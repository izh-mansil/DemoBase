///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии ...
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

//РаботаСВнешнимОборудованием
Перем глПодключаемоеОборудование Экспорт; // для кэширования на клиенте
Перем глПодключаемоеОборудованиеСобытиеОбработано Экспорт; // для предотвращения повторной обработки события
Перем глДоступныеТипыОборудования Экспорт;
//Конец РаботаСВнешнимОборудованием

// ++ НЕ ГОСИС
// ЭлектронноеВзаимодействие
Перем ПараметрыПодсистемыОбменСБанками Экспорт;
// При соответствующих настройках сертификата ЭП в соответствии будут храниться пары Сертификат-Пароль (в данном сеансе)
Перем СоответствиеСертификатаИПароля Экспорт;
// Конец ЭлектронноеВзаимодействие

Перем глКомпонентаОбменаСМобильнымиПриложениями Экспорт;
Перем глФормаНачальнойНастройкиПрограммы Экспорт;
// -- НЕ ГОСИС

// СтандартныеПодсистемы

// Хранилище глобальных переменных.
//
// ПараметрыПриложения - Соответствие - хранилище переменных, где:
//   * Ключ - Строка - имя переменной в формате "ИмяБиблиотеки.ИмяПеременной";
//   * Значение - Произвольный - значение переменной.
//
// Инициализация (на примере СообщенияДляЖурналаРегистрации):
//   ИмяПараметра = "СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации";
//   Если ПараметрыПриложения[ИмяПараметра] = Неопределено Тогда
//     ПараметрыПриложения.Вставить(ИмяПараметра, Новый СписокЗначений);
//   КонецЕсли;
//  
// Использование (на примере СообщенияДляЖурналаРегистрации):
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"].Добавить(...);
//   ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"] = ...;
Перем ПараметрыПриложения Экспорт;

// Конец СтандартныеПодсистемы

// ТехнологияСервиса
Перем ОповещениеПриПримененииЗапросовНаИспользованиеВнешнихРесурсовВМоделиСервиса Экспорт;
// Конец ТехнологияСервиса

// Параметры для фоновых заданий
Перем ПараметрыПроверкиФоновыхЗаданий Экспорт;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Перем а1, а2;
Перем б3; // fghjfghjjjjj

#Если НЕ ТонкийКлиент Тогда //tyuityui

// фывафыва
Процедура а(ШаблонНазначенияДавальца, НазначениеПартнера) //vbnmvbnm
	
	// фыва фывафыва фывааааааааааааааааа фывафйцуккккккккккккккккккккккккккккккккккккккккккк йцукйцук
	// йцукйцукккккккккккккккккк йцукйцук фывафывааааааааааааааааааааааа
	MessageText = "Select receipt CR or receipt CR for return";
	
	// фывафыв-фывафыва
	а = 1; //фыва - фывафыва
	а = "//"; // xxcvb-1234
	а = "///////" + "//фывафыва"; //qwerqwer - мить
	а = "‒
	|фывафыв ‒ смит
	|//asdfasdf‒asdfasdf" + "‒"; // чсми - 555
	
КонецПроцедуры

#КонецЕсли

&НаСервереБезКонтекста
Процедура УдалитьНаборЗаписейПользователя(Знач Пользователь, Знач АдресУстановленныхБлокировок)
	
	ЗаблокироватьНаборЗаписейПользователяНаСервере(Пользователь, АдресУстановленныхБлокировок);
	
	НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователь, Истина);
	НаборЗаписей.Записать();
	
	РазблокироватьВсеЗаписиНаСервере(АдресУстановленныхБлокировок);
	
КонецПроцедуры

// фывафыва

Процедура апк_ЗаполнитьСоставПредопределенныхЭлементов()
	
	#Если НЕ ТонкийКлиент Тогда
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОбъектМетаданных.Ссылка
	|ИЗ
	|	Справочник.Справочник1 КАК ОбъектМетаданных
	|ГДЕ
	|	ОбъектМетаданных.Предопределенный = &Предопределенный";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предопределенный", Истина);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		// Если объект (например, Справочник) входит в разделитель (общий реквизит),
		// и у разделителя установлено свойство "Использование разделяемых данных" = "Независимо",
		// то выполнение запроса вызовет исключение.
		а = ОписаниеОшибки();
		Возврат;
	КонецПопытки;
	
	МассивПредопределенных = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ОбъектСсылка = Выборка.Ссылка;
		Попытка
			ИмяПредопределенногоЭлемента = ОбъектСсылка.ИмяПредопределенныхДанных;
		Исключение
			// В конфигурациях с режимом совместимости ниже 8.3 нет свойства объекта "ИмяПредопределенныхДанных",
			// записываем наименование.
			ИмяПредопределенногоЭлемента = ОбъектСсылка.Наименование;
		КонецПопытки;
		МассивПредопределенных.Добавить(ИмяПредопределенногоЭлемента);
	КонецЦикла;
	
	#КонецЕсли
	
	Возврат;
	
КонецПроцедуры

Процедура ПриНачалеРаботыСистемы()
	
	//ЗапуститьАвтоформатирование2();
	//ЗапуститьАвтоРасстановкуШапок();
	
	//ПолучитьФорму("Обработка.АнализСтроковыхКонстантВТекстахЗапросов.Форма.Результат");
	//а = ПолучитьФорму("Справочник.Организации.Форма.ФормаЭлемента");
	
	//#Если НЕ ТонкийКлиент Тогда
	//а = Метаданные.ВариантВстроенногоЯзыка["Русский"];
	//#КонецЕсли
	//
	// апк_ЗаполнитьСоставПредопределенныхЭлементов();
	
	//а = Новый ("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
#Если НЕ ТонкийКлиент Тогда
	
	//Константы["Константа1"].Установить(Новый ХранилищеЗначения(23452345));
	//Константы["Константа2"].Установить(Истина);
	//Константы["Константа3"].Установить("ьюбячсьмйшзщ qpwoerls;df фыва");
	//Константы["Константа4"].Установить(Справочники.Организации.мой);
	
	//Константы["Константа1"].Установить(Неопределено);
	//Константы["Константа2"].Установить(Неопределено);
	//Константы["Константа3"].Установить(Неопределено);
	//Константы["Константа4"].Установить(Неопределено);
	
	//форма = ПолучитьОбщуюФорму("Форма_НеразрешимыеСсылкиНаКартинки");
	
	//ТаблицаОшибок = Глобальный.ПолучитьТаблицуОшибокБитыхСсылок();
	
#КонецЕсли
	
КонецПроцедуры

Процедура ЗапуститьАвтоформатирование2()
	
	#Если НЕ ТонкийКлиент Тогда
		
	РольДоступна("фывафывафыва");
	
	Попытка
		
		Сообщить("" + ТекущаяДата() + " " + НСтр("ru='начало автоформатирования'"));
		
		ОбработкаАвтоформатирования = ВнешниеОбработки.Создать("D:\Work\АПК\1S\АПК\архив\АвтоформатированиеКодаИЛокализация.epf", Ложь);
		
		Параметры = ОбработкаАвтоформатирования.ПолучитьПараметрыАвтоформатированияПоУмолчанию();
		Параметры.ПутьКБазе = "D:\Work\АПК\1S\АПК\Проверки\ДемоБаза_Копия";
		Параметры.Пользователь = "Администратор";
		//Параметры.ВыгружатьКонфигурациюВФайлыXML = Истина;
		//Параметры.ЗагружатьКонфигурациюИзФайловXML = Истина;
		//Параметры.ОбновитьКонфигурациюБД = Истина;
		Параметры.КаталогВыгрузкиXML = "D:\Work\АПК\1S\АПК\архив\Хлам\1";
		Параметры.СписокИзмененныхОбъектов = "";
		//Параметры.КаталогХранилища = "D:\Work\АПК\1S\АПК\Проверки\ДемоБаза_Копия\Хранилище";
		//Параметры.ПользовательХранилища = "Юзер1";
		//Параметры.СписокИзмененныхОбъектов = "D:\Work\АПК\1S\АПК\архив\Хлам\СписокИзмененныхОбъектов.xml";
		//Параметры.ПомещатьИзмененныеОбъектыВХранилище = Истина;
		//Параметры.ТекстКомментария = НСтр("ru='закладка 2 от'") + " " + ТекущаяДатаСеанса() + Символы.ПС + НСтр("ru='тест многострочного комментария'");
		//Параметры.СписокЗахваченныхОбъектов = "D:\Work\АПК\1S\АПК\архив\Хлам\out1.txt";
		//Параметры.РежимОтладки = Истина;
		
		//ЗначениеФлагов = Параметры.ЗначениеФлагов;
		//ЗначениеФлагов.КаноническийВидКлючевыхСловЗапроса = Ложь;
		//ЗначениеФлагов.Стандарт441 = Ложь;
		
		Статус = ОбработкаАвтоформатирования.АвтоформатироватьКод(Параметры);
		Если НЕ ПустаяСтрока(Статус) Тогда
			Сообщить(Статус);
		КонецЕсли;
		
		Сообщить("" + ТекущаяДата() + " " + НСтр("ru='конец автоформатирования'"));
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗапуститьАвтоРасстановкуШапок()
	
	#Если НЕ ТонкийКлиент Тогда
	
	Попытка
		
		Сообщить("" + ТекущаяДата() + " " + НСтр("ru='начало автоформатирования'"));
		
		ОбработкаАвтоформатирования = ВнешниеОбработки.Создать("D:\Work\АПК\1S\АПК\архив\АвторасстановкаШапокВПрограммныхМодулях.epf", Ложь);
		
		Параметры = ОбработкаАвтоформатирования.ПолучитьПараметрыАвтоформатированияПоУмолчанию();
		Параметры.ПутьКБазе = "D:\Work\АПК\1S\АПК\Проверки\БСП_3.0.2.208";
		Параметры.Пользователь = "Администратор";
		Параметры.КаталогВыгрузкиXML = "D:\Work\АПК\1S\АПК\архив\Хлам\1";
		//Параметры.ВыгружатьКонфигурациюВФайлыXML = Истина;
		//Параметры.ЗагружатьКонфигурациюИзФайловXML = Истина;
		//Параметры.ОбновитьКонфигурациюБД = Истина;
		//Параметры.КаталогХранилища = "D:\Work\АПК\1S\АПК\Проверки\ДемоБаза_Копия\Хранилище";
		Параметры.КаталогХранилища = "D:\Work\Хранилища\БСП_3.0.2";
		Параметры.ПользовательХранилища = "Администратор";
		//Параметры.СписокИзмененныхОбъектов = "D:\Work\АПК\1S\АПК\архив\Хлам\СписокИзмененныхОбъектов.xml";
		Параметры.ПомещатьИзмененныеОбъектыВХранилище = Истина;
		//Параметры.ТекстКомментария = НСтр("ru='закладка 2 от'") + " " + ТекущаяДатаСеанса() + Символы.ПС + НСтр("ru='тест многострочного комментария'");
		//Параметры.СписокЗахваченныхОбъектов = "D:\Work\АПК\1S\АПК\архив\Хлам\out1.txt";
		Параметры.ТекстПреамбулыПрограммныхМодулей = "///////////////////////////////////////////////////////////////////////////////////////////////////////
			|// Copyright (c) %Год%, ООО 1С-Софт
			|// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
			|// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
			|// Текст лицензии доступен по ссылке:
			|// https://creativecommons.org/licenses/by/4.0/legalcode
			|///////////////////////////////////////////////////////////////////////////////////////////////////////";
		Параметры.РежимОтладки = Истина;
		
		Статус = ОбработкаАвтоформатирования.АвтоформатироватьКод(Параметры);
		Если НЕ ПустаяСтрока(Статус) Тогда
			Сообщить(Статус);
		КонецЕсли;
		
		Сообщить("" + ТекущаяДата() + " " + НСтр("ru='конец автоформатирования'"));
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;
	
	#КонецЕсли
	
КонецПроцедуры

Функция апк_ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

// ++ НЕ ГИСМ

//Попытка
//	ПолучитьФорму("Документ.ПриходныйОрдерНаТовары.Форма.ФормаДокумента");
	//Структура = Новый Структура;
	//Структура.Вставить("Основание", "");
	//Структура.Вставить("Документ", "");
	//
	////Форма = ПолучитьФорму("Документ.Документ1.Форма.ФормаДокумента", Структура);
	//Форма = ПолучитьФорму("Справочник.Организации.ФормаОбъекта", Структура);
//Исключение
//	а = ОписаниеОшибки();
//	б = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
//КонецПопытки;

//РегламентныеЗадания.ПолучитьРегламентныеЗадания();

//ГлНомерКонтейнераСбербанк     = 0;
//глУстановленКаналСоСбербанком = Ложь;
// //-- НЕ ГИСМ

//глПодключаемоеОборудованиеСобытиеОбработано = Ложь;

//Процедура п1(Знач Массив1)
//	Массив1.Очистить();
//	//Массив1 = "";
//	//Массив1.Вставить("а1234");
//	//Массив1 = "1234";
//КонецПроцедуры

//Массив2 = Новый Массив;
//Массив2.Добавить("");

//Массив3 = Массив2;
//Массив3.Добавить("123");

////Массив = "";
////Массив = Новый Структура;
////Массив.Вставить("");
////Массив.Колонки.Добавить("имя");
////Массив.Добавить().имя = "ф";

// (Массив2);

//а = 1;


//ПроверкаЗапросов();
#Если НЕ ТонкийКлиент Тогда

ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.CRC32);
ХешированиеДанных.Добавить("34563456");
а = ХешированиеДанных.ХешСумма;

б = 1;

а(Новый Структура, "");

//аа = 1/0;

#КонецЕсли

#КонецОбласти
