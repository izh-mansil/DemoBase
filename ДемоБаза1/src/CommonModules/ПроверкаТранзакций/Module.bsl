///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии ...
///////////////////////////////////////////////////////////////////////////////////////////////////////

Procedure ImportDataFromExternalSourceResultDataProcessor(ImportResult, Object = Undefined, CurrentForm = Undefined) Export
	
	BeginTransaction();
	
	Try
		
		BeginTransaction();
		
		DataMatchingTable 		= ImportResult.DataMatchingTable;
		UpdateExisting 			= ImportResult.DataLoadSettings.UpdateExisting;
		CreateIfNotMatched 		= ImportResult.DataLoadSettings.CreateIfNotMatched;
		FillingObjectFullName	= ImportResult.DataLoadSettings.FillingObjectFullName;
		
		For Each TableRow In DataMatchingTable Do
			
			ImportToApplicationIsPossible = TableRow[DataImportFromExternalSources.ServiceFieldNameImportToApplicationPossible()];
			
			If FillingObjectFullName = "Catalog.Leads" Then 
				
				CoordinatedStringStatus = (TableRow._RowMatched AND UpdateExisting) 
				OR (NOT TableRow._RowMatched AND CreateIfNotMatched);
				
				If ImportToApplicationIsPossible AND CoordinatedStringStatus Then
					
					If TableRow._RowMatched Then
						CatalogItem			= TableRow.Leads.GetObject();
					Else
						CatalogItem 		= Catalogs.Leads.CreateItem();
					EndIf;
					
					CatalogItem.Description 	= TableRow.Description;
					FillPropertyValues(CatalogItem, TableRow);
					
					DescriptionByFistContact = Undefined;
					
					If Not IsBlankString(TableRow.Contact1)
						OR Not IsBlankString(TableRow.Phone1)
						OR Not IsBlankString(TableRow.Email1) Then
						
						AddContact(CatalogItem, TableRow.Contact1, TableRow.Phone1, TableRow.Email1);
						DescriptionByFistContact = True;
						
					EndIf;
					
					If Not IsBlankString(TableRow.Contact2)
						OR Not IsBlankString(TableRow.Phone2)
						OR Not IsBlankString(TableRow.Email2) Then
						
						AddContact(CatalogItem, TableRow.Contact2, TableRow.Phone2, TableRow.Email2);
						DescriptionByFistContact = ?(DescriptionByFistContact = Undefined, True, False);
						
					EndIf;
					
					If Not IsBlankString(TableRow.Contact3)
						OR Not IsBlankString(TableRow.Phone3)
						OR Not IsBlankString(TableRow.Email3) Then
						
						AddContact(CatalogItem, TableRow.Contact3, TableRow.Phone3, TableRow.Email3);
						DescriptionByFistContact = ?(DescriptionByFistContact = Undefined, True, False);
						
					EndIf;
					
					If DescriptionByFistContact AND IsBlankString(CatalogItem.Contacts[0].Representation) Then
						
						CatalogItem.Contacts[0].Representation = CatalogItem.Description;
						
					EndIf;
					
					If ImportResult.DataLoadSettings.SelectedAdditionalAttributes.Count() > 0 Then
						DataImportFromExternalSources.ProcessSelectedAdditionalAttributes(CatalogItem, TableRow._RowMatched, TableRow, ImportResult.DataLoadSettings.SelectedAdditionalAttributes);
					EndIf;
					
					CatalogItem.Write();
					
				EndIf;
				
			EndIf;
		EndDo;
		
		CommitTransaction();
		
	Except
		
		WriteLogEvent(
			NStr("en = 'Data Import'", CommonUseClientServer.MainLanguageCode()),
			EventLogLevel.Error,
			Metadata.Catalogs.Products,
			,
			ErrorDescription());
			
		RollbackTransaction();
	EndTry;
	
EndProcedure

Процедура Пример1(ОбновлениеИнформационнойБазы, МетаданныеДокумента)
	
	ПолноеИмяОбъекта = "";
	ТекстЗапросаВидЗапасовОприходование = "";
	
	Запрос = Новый Запрос;
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаПоДокументам.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТоварыКОформлениюОтчетовКомитенту.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", ВыборкаПоДокументам.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента,
				ВыборкаПоДокументам.Ссылка,
				ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		ДокументОбъект = ВыборкаПоДокументам.Ссылка.ПолучитьОбъект();
		
		Запрос = Новый Запрос(ТекстЗапросаВидЗапасовОприходование);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		Запрос.УстановитьПараметр("Склад", ДокументОбъект.Склад);
		
		ВыборкаПоАналитикам = Запрос.Выполнить().Выбрать();
		ЕстьПроблема = Ложь;
		Пока ВыборкаПоАналитикам.Следующий() Цикл
			
			Если ВыборкаПоАналитикам.КоличествоВидовЗапасов <> 1 Тогда
				ТекстИсключения = НСтр("ru = 'Ошибка обработки документа %Документ% - несколько приходуемых видов номенклатуры по одной номенклатуре.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Документ%", ВыборкаПоДокументам.Ссылка);
				ЕстьПроблема = Истина;
				Прервать;
			КонецЕсли;
			
			НайденныеСтроки = ДокументОбъект.ВидыЗапасов.НайтиСтроки(Новый Структура("АналитикаУчетаНоменклатуры, ВидЗапасов",
			ВыборкаПоАналитикам.АналитикаУчетаНоменклатуры, ВыборкаПоАналитикам.ВидЗапасов));
			Для Каждого СтрМас Из НайденныеСтроки Цикл
				СтрМас.ВидЗапасовПолучателя = ВыборкаПоАналитикам.ВидЗапасовОприходование;
			КонецЦикла;
		КонецЦикла;
		
		Если ЕстьПроблема Тогда
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеДокумента,
				ВыборкаПоДокументам.Ссылка,
				ТекстИсключения);
			Прервать;
		КонецЕсли;
		
		НайденныеСтроки = ДокументОбъект.ВидыЗапасов.НайтиСтроки(Новый Структура("ВидЗапасовПолучателя", Справочники.ВидыЗапасов.ПустаяСсылка()));
		Для Каждого СтрМас Из НайденныеСтроки Цикл
			Если СтрМас.ВидЗапасов.ТипЗапасов <> Перечисления.ТипыЗапасов.КомиссионныйТовар Тогда // Данные по комиссионным товарвам заполняются выше. Если вид запасов не заполнен, то это ошибка.
				СтрМас.ВидЗапасовПолучателя = СтрМас.ВидЗапасов;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", ВыборкаПоДокументам.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеДокумента,
				ВыборкаПоДокументам.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура Пример2(ОбновлениеИнформационнойБазыУТ, Параметры, ОбновлениеИнформационнойБазы)
	
	ПолноеИмяОбъекта = "";
	
	Запрос = Новый Запрос;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойБлокировке(Выборка.Ссылка);
			Продолжить;  // Ругается тут
			
		КонецПопытки;
		
		СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
		Если СправочникОбъект = Неопределено Тогда
			ЗафиксироватьТранзакцию();
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект.ЭлементОбработан = Истина;
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(Выборка.Ссылка);
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры

Функция Пример3(ОбщегоНазначенияКлиентСервер, Объект)
	
	Сч = 0;
	ВыделенныеДокументы = Новый Массив;
	
	НачатьТранзакцию();
	Попытка
		Пока Сч > 0 Цикл
			Сч = Сч - 1;
			ДокументНеПомеченНаУдаление = Ложь;
			СтрокаТаблицы = Объект.Документы.НайтиПоИдентификатору(ВыделенныеДокументы[Сч]);
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПометитьНаУдалениеДокумент(СтрокаТаблицы, ДокументНеПомеченНаУдаление);
			Если ДокументНеПомеченНаУдаление Тогда
				Отказ = Истина;
			Иначе
				КоличествоИзмененныхДокументов = КоличествоИзмененныхДокументов + 1;
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Пометка документов на удаление'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат 0;
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Пометка документов на удаление'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат 0;
	КонецПопытки;
	
КонецФункции

Процедура ПометитьНаУдалениеДокумент(СтрокаТаблицы, ДокументНеПомеченНаУдаление)
	
КонецПроцедуры

Процедура Пример4(Ссылка)
	
	Для Счетчик = 1 По 10 Цикл
	
		НачатьТранзакцию();
		Попытка
			
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ЗарплатаКадры.ОтметитьВыполнениеОбработки(Ссылка);  // выполняет запись в ИБ
				ЗафиксироватьТранзакцию(); // !!!
				Продолжить;
			//
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяДокумента = "Документ.АктПостановкиНаБалансЕГАИС";
	МетаданныеДокумента = Метаданные.Документы.АктПостановкиНаБалансЕГАИС;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяДокумента);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Если ДокументОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ОбработкаЗавершена = Истина;
			Для каждого ТекСтрока Из ДокументОбъект.АкцизныеМарки Цикл
				Если ЗначениеЗаполнено(ТекСтрока.КодАкцизнойМарки) Тогда
					ТекСтрока.АкцизнаяМарка = Справочники.ШтрихкодыУпаковокТоваров.ПолучитьАкцизнуюМаркуПоКоду(ТекСтрока.КодАкцизнойМарки);
					ТекСтрока.Количество = 1;
					Если НЕ ЗначениеЗаполнено(ТекСтрока.АкцизнаяМарка) Тогда
						ОбработкаЗавершена = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ОбработкаЗавершена Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Ссылка% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеДокумента,
				Выборка.Ссылка,
				ТекстСообщения);
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяДокумента);
	
КонецПроцедуры
