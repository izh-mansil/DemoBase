///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии ...
///////////////////////////////////////////////////////////////////////////////////////////////////////

// ГенераторСлЧс = Новый ГенераторСлучайныхЧисел();//АПК здесь не выдала орфографические ошибки? АПК не выдала ошибок

#Область ПрограммныйИнтерфейс

Функция ПреобразоватьСписокПолейВСтроку(СоответствиеПолей, БезПустыхПолей = Истина)
	
	КвартираДобавлена = Ложь;
	КорпусДобавлен = Ложь;
	ПредыдущиеЗначение = Неопределено;
	
	СтруктураЗначенийПолей = Новый Структура;
	Для Каждого Элемент Из СоответствиеПолей Цикл
		
		Если Элемент.Представление = "Корпус" ИЛИ Элемент.Представление = "ТипКорпуса" Тогда
			Если ПредыдущиеЗначение <> Неопределено И ПредыдущиеЗначение.Представление = "ТипКорпуса"
				И ПредыдущиеЗначение.Значение = "Корпус" Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
				КорпусДобавлен = Истина;
			ИначеЕсли НЕ КорпусДобавлен Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
			КонецЕсли;
		ИначеЕсли Элемент.Представление = "Квартира" ИЛИ Элемент.Представление = "ТипКвартиры" Тогда
			Если ПредыдущиеЗначение <> Неопределено И ПредыдущиеЗначение.Представление = "ТипКвартиры"
				И ПредыдущиеЗначение.Значение = "Квартира" Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);
				КвартираДобавлена = Истина;
			ИначеЕсли НЕ КвартираДобавлена Тогда
				СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);				
			КонецЕсли;
		ИначеЕсли Элемент.Представление = "Квартира1" ИЛИ Элемент.Представление = "ТипКвартиры1" Тогда
			// бла-бла-бла
		Иначе
			СтруктураЗначенийПолей.Вставить(Элемент.Представление, Элемент.Значение);	
		КонецЕсли;
		ПредыдущиеЗначение = Элемент;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ДатаВремяБезСекунд(ДатаВремя) Экспорт
	
	ЛокализованныйФорматДаты = НСтр("ru = 'ДФ=''dd.MM.yyyy HH:mm'''"); 
	Возврат Формат(ДатаВремя, ЛокализованныйФорматДаты);
	
КонецФункции

// Чурак П. 11.03.2022 НФуф-055144(
//ижтисиПечать.ПоместитьКнопкуПечатиНаФорму(ЭтотОбъект);
// Чурак П. 11.03.2022 НФуф-055144)

Функция СформироватьПечатнуюФормуЛистаКассовойКниги(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДенежныеСредства.Касса.ВалютаДенежныхСредств КАК Валюта,
		|	ЕСТЬNULL(сумма(
		|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|			ДенежныеСредства.Сумма
		|		КОГДА ДенежныеСредства.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|			-ДенежныеСредства.Сумма
		|		КОНЕЦ
		|	), 0) КАК СуммаИнвентаризации,
		|	естьnull(СУММА(
		|		ВЫБОР КОГДА ДенежныеСредства.ВидДвижения = ""ГДЕ"" ТОГДА
		|			ДенежныеСредства.СуммаРегл
		|		КОГДА ДенежныеСредства.ВидДвижения = "" выбрать из 1 "" тогда
		|			-ДенежныеСредства.СуммаРегл
		|		КОНЕЦ
		|	), 0) КАК СуммаИнвентаризацииРегл
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваНаличные КАК ДенежныеСредства";
	
КонецФункции

Функция ПрочитатьТабличныйДокумент(ТабличныйДокументИсточник)
	
	КоличествоСтолбцов = ТабличныйДокументИсточник.ШиринаТаблицы;
	
	Если КоличествоСтолбцов = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Для НомерСтолбца = 1 По КоличествоСтолбцов Цикл
		ТабличныйДокумент.Область(1, НомерСтолбца, 1, НомерСтолбца).Текст = "Номер_" + Формат(НомерСтолбца,"ЧГ=0");
	КонецЦикла;
	
КонецФункции

Функция ПолучитьТаблицуОшибокБитыхСсылок() Экспорт
	
	если истИна тОгда
		
	Конецесли;
	
	ПолноеИмяФайла = "D:\Work\АПК\1S\АПК\архив\Хлам\Битые ссылки в ERP 2.5.6.txt";
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Объект");
	ТаблицаОшибок.Колонки.Добавить("Ошибка");
	ТаблицаОшибок.Колонки.Добавить("Количество");
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаОшибки = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		Если ПустаяСтрока(СтрокаОшибки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияПробела = СтрНайти(СтрокаОшибки, " ");
		Если ПозицияПробела = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Лев(СтрокаОшибки, ПозицияПробела - 1);
		
		ПозицияСкобки = СтрНайти(СтрокаОшибки, "(",, ПозицияПробела);
		Если ПозицияСкобки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Ошибка = Сред(СтрокаОшибки, ПозицияПробела + 1, ПозицияСкобки - ПозицияПробела - 1);
		Количество = Сред(СтрокаОшибки, ПозицияСкобки + 1);
		Количество = СтрЗаменить(Количество, ")", "");
		
		НоваяОшибка = ТаблицаОшибок.Добавить();
		НоваяОшибка.Объект = СокрЛП(Объект);
		НоваяОшибка.Ошибка = СокрЛП(Ошибка);
		НоваяОшибка.Количество = Число(Количество);
		
	КонецЦикла;
	
	ТаблицаОшибок.Сортировать("Ошибка");
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// Возвращает массив имен реквизитов, заданных в свойстве формы ПараметрыЗапретаРедактированияРеквизитов
// на основе имен реквизитов, указанных в модуле менеджера объекта, исключая реквизиты,
// у которых ПравоРедактирования = Ложь.
//
// Параметры:
//  Форма         - ФормаКлиентскогоПриложения - форма объекта с обязательным стандартным реквизитом "Объект".
//  ТолькоЗаблокированные - Булево - для вспомогательных целей можно задать Ложь, чтобы
//                  получить список всех видимых реквизитов, которые могут разблокироваться.
//  ТолькоВидимые - Булево - чтобы получить и разблокировать все реквизиты объекта, нужно указать Ложь.
//
// фывафывафывафывафыва
//
// Возвращаемое значение:
//  Массив - значения:
//   * Строка - имена реквизитов.
//
// нестандартная секция:
// ролдролдролдролд
//
Функция Реквизиты(Знач Форма, Знач ТолькоЗаблокированные = Истина, ТолькоВидимые = Истина) Экспорт
	
	ПредставлениеОтбора2 = Формат(ТекущаяДатаСеанса(), НСтр("ru='ДФ=''""«""dd""»"" MMM yyyy ""г.""'''"));
	
КонецФункции

// фывафыва
//
// Параметры:
//   Параметр1 - Массив из:
//     Параметр11 - см. не правильно
//
Процедура ПроверкаЗаписиВРегистр(Параметр1) Экспорт
	
	Набор = РегистрыСведений.РегистрСведений1.СоздатьНаборЗаписей();
	Набор.Загрузить(Новый ТаблицаЗначений);
	Набор.Записать();
	
КонецПроцедуры

// бла-бла-бла
// 
// Возвращаемое значение:
//   Массив - Массив из:
//     * Параметр1 - см. ДивидендыКлиент.ПодпискаНаСобытие1ПередЗаписью
//     * Ведомость - ДокументСсылка.ВедомостьНаВыплатуЗарплаты.
//     * ФизическоеЛицо - СправочникСсылка.ФизическиеЛица.
//     * БанковскийСчет - см. ДивидендыКлиент.ПодпискаНаСобытие1ПередЗаписью.
//     * СуммаКВыплате - Число.
//     * КомпенсацияЗаЗадержкуЗарплаты - Число.
//     * ИтогоКВыплате - Число.
//
Функция фывафыва() Экспорт
	
а = 1;КонецФункции Процедура ПроверкаТранзакций(ДобавленныйФайл)
	
	// Документword
	
	РазностьДат = "%1 дн.";
	
	а = Метаданные.ОпределяемыеТипы.ОпределяемыйТип1;
	
	НачатьТранзакцию();
	Попытка
		
		Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
			а = 1;
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

Функция НовыйПроизвольныйДокумент(ПараметрыФормирования, ПараметрыФайла) Экспорт
	
	а = Новый ("СправочникОбъект.ИдентификаторыОбъектовМетаданных");
	
	Результат = Неопределено;
	
	// Определим настройки.
	ПараметрыЭД = Новый Структура();
	ПараметрыЭД.Вставить("ВидЭД", 		       Перечисления.ВидыЭД.ПроизвольныйЭД);
	ПараметрыЭД.Вставить("Организация",        ПараметрыФормирования.Организация);
	ПараметрыЭД.Вставить("Контрагент",	       ПараметрыФормирования.Контрагент);
	ПараметрыЭД.Вставить("ДоговорКонтрагента", ПараметрыФормирования.ДоговорКонтрагента);
	ПараметрыЭД.Вставить("НаправлениеЭД",      Перечисления.НаправленияЭД.Исходящий);
	НастройкиОбменаЭД = ""; //ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	Если ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
		НачатьТранзакцию();
		Попытка
			// Создадим произвольный документ.
			ПроизвольныйДокумент = Документы.ЭлектронныйДокументИсходящий.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ПроизвольныйДокумент, ПараметрыФормирования);
			ПроизвольныйДокумент.Дата                      = ТекущаяДатаСеанса();
			ПроизвольныйДокумент.ВидЭД                     = Перечисления.ВидыЭД.ПроизвольныйЭД;
			ПроизвольныйДокумент.ТипДокумента              = Перечисления.ТипыЭД.Прочее;
			ПроизвольныйДокумент.ВерсияРегламентаЭДО       = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
			ПроизвольныйДокумент.ТипЭлементаВерсииЭД       = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
			ПроизвольныйДокумент.СостояниеЭДО              = Перечисления.СостоянияВерсийЭД.НеСформирован;
			ПроизвольныйДокумент.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
			ПроизвольныйДокумент.УникальныйИД              = Новый УникальныйИдентификатор;
			
			// Заполним служебные реквизиты.
			ПроизвольныйДокумент.ПрофильНастроекЭДО     = НастройкиОбменаЭД.ПрофильНастроекЭДО;
			ПроизвольныйДокумент.НастройкаЭДО           = НастройкиОбменаЭД.СоглашениеЭД;
			ПроизвольныйДокумент.ТребуетсяПодтверждение = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
				НастройкиОбменаЭД.ТребуетсяПодтверждение, Ложь);
			ПроизвольныйДокумент.ТребуетсяИзвещение     = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
				НастройкиОбменаЭД.ТребуетсяИзвещение, Ложь);
			МаршрутПодписания = Неопределено;
			Если Не НастройкиОбменаЭД.Свойство("МаршрутПодписания", ПроизвольныйДокумент.МаршрутПодписания)
				ИЛИ Не ЗначениеЗаполнено(ПроизвольныйДокумент.МаршрутПодписания)
				ИЛИ ПроизвольныйДокумент.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании Тогда
				
				ПроизвольныйДокумент.МаршрутПодписания = Справочники.МаршрутыПодписания.ОднойДоступнойПодписью;	
			КонецЕсли;
			ПроизвольныйДокумент.Записать();
			
			// Добавим присоединенный файл
			ДобавленныйФайл = Документы.ЭлектронныйДокументИсходящий.ДобавитьПрисоединенныйФайл(ПроизвольныйДокумент,
				ПараметрыФайла.АдресХранилища, ПараметрыФайла.ИмяФайла);
				
			Если ЗначениеЗаполнено(ДобавленныйФайл) Тогда
				Результат = ПроизвольныйДокумент.Ссылка;
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
		Исключение
			ОтменитьТранзакцию();
			ТекстИсключения = НСтр("ru = 'Не удалось создать произвольный документ по причине:'") + Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Процедура ОператорИ(ТекущиеДанные, Объект)
	
	СтруктураПараметров = Новый Структура("НовыйЭтап, ОтборСтрок, ИмяТЧ",
		"ДобавляетсяНовыйЭтап",
		Новый Структура("Распоряжение", Объект.Ссылка));
	
	// Это оооооочень длинный комментарий, превыщайющий 120 символов, после которого жизненно необходимо поставить точку,
	// иначе будет ошибка в АПК
	Если ЗначениеЗаполнено(ТекущиеДанные.Сотрудник) И ЗначениеЗаполнено(Объект.ДатаПрисвоения) И ЗначениеЗаполнено(ТекущиеДанные.ВоинскоеСпециальноеЗвание) Тогда
		
		
	КонецЕсли;
	
	ИмяОписаниеЗащитыОтОпасныхДействий = "ОписаниеЗащитыОтОпасныхДействий";
	ОписаниеЗащиты = Новый(ИмяОписаниеЗащитыОтОпасныхДействий);
	ОписаниеЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	УдалитьФайлы("");
	
	КоличествоЗаданий = "";
	КоличествоПрописью = ЧислоПрописью(
		КоличествоЗаданий,
		"Л = ru_RU; НП = Истина; НД = Ложь; ДП = Ложь;",
		НСтр("ru = 'задание,задания,заданий,с,,,,,0'"));
		
КонецПроцедуры

Процедура СформироватьДоходыИНДФЛСДивидендов(Дивиденды) Экспорт
	
	Дивиденды.Колонки.Акционер.Имя = "ФизическоеЛицо";
	Дивиденды.Колонки.Начислено.Имя = "СуммаДохода";
	Дивиденды.Колонки.ВычетПоНДФЛ.Имя = "СуммаВычета";
	Дивиденды.Колонки.НДФЛ.Имя = "Сумма";
	
	Дивиденды.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Дивиденды.Колонки.Добавить("ПодразделениеСотрудника", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Дивиденды.Колонки.Добавить("ДатаПолученияДохода", Новый ОписаниеТипов("Дата"));
	Дивиденды.ЗаполнитьЗначения("", "ДатаПолученияДохода");
	
КонецПроцедуры

Функция ПроверкаЗапросов(БыстрыйПоиск = "") Экспорт
	
	Query = New Query;
	Query.Text = 
	"SELECT TOP 1
	|	LeadKanban.Order AS Order
	|FROM
	|	InformationRegister.LeadKanban AS LeadKanban
	|WHERE
	|	LeadKanban.Campaign = &Campaign
	|	AND LeadKanban.Activity = &Activity
	|
	|Order By
	|	Order DESC";
	
	а = "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДополнительныеСведения.Значение, """"Не указан"") КАК Значение,
	|	СУММА(1),
	|	SUM(1)";
	
	ВариантыВыбора = Новый СписокЗначений;
	ВариантыВыбора.Добавить("Установить", "ВЫБРАТЬ другой файл");
	
	а = "
	|ВЫБРАТЬ
	|// Обработчик снятия флага ""Отгружать не одной датой"", где ...
	|ВЫБРАТЬ
	|" + ?(ЗначениеЗаполнено(БыстрыйПоиск), "	И (ЭлементыФинОтчетов.Наименование ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%""
							|		ИЛИ ЭлементыФинОтчетов.Код ПОДОБНО ""%" +  СокрЛП(БыстрыйПоиск) + "%"")", "");
	
	а = 
	"ВЫБРАТЬ
	|	Организации.Ссылка,
	|	Справочник1.Дата5 КАК Поле1
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справочник1 КАК Справочник1
	|		ПО Организации.Владелец = Справочник1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Документ1 КАК Документ1
	|		ПО Организации.Ссылка = Документ1.Реквизит1
	|
	|ВЫБРАТЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	Справочник1.Дата5
	|
	|УПОРЯДОЧИТЬ ПО
	|	Справочник1.Дата5,
	|	Дата5 УБЫВ";

КонецФункции

// Устарела.
Функция Неправильно()
	
	а = Формат("", "ДЛФ=DD; ДП='не указан'");
	
	Запрос = "
|ВЫБРАТЬ
|  СправочникНоменклатура.Ссылка КАК НоменклатураСсылка,
|  ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
|ИЗ
|  Справочник.Номенклатура КАК СправочникНоменклатура
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
|	ПО (ЗапасыОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
|
|УПОРЯДОЧИТЬ ПО
|  КоличествоОстаток";

КонецФункции

Функция Правильно()
	
	Запрос = "
|ВЫБРАТЬ
|  СправочникНоменклатура.Ссылка КАК НоменклатураСсылка,
|  ЕСТЬNULL(ЗапасыОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
|ИЗ
|  Справочник.Номенклатура КАК СправочникНоменклатура
|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки КАК ЗапасыОстатки
|	ПО (ЗапасыОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
|
|УПОРЯДОЧИТЬ ПО
|  КоличествоОстаток
|";
	
КонецФункции

Функция ПроверкаБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	Блокировка.Заблокировать();
	
	НачатьТранзакцию();
	
	ЗафиксироватьТранзакцию();
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// Какая-то новая область

///////////////////////////////////////////////////////////////////////////////////////////////////////////
// КАКАЯ-ТО ОБЛАСТЬ, НАПИСАННАЯ ЗАГЛАВНЫМИ БУКВАМИ

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс


Функция ПроверитьЗащиту(ОбластьМакетаПодвал) Экспорт 
	
	ТекстЗапроса = "";
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ";
	
	ТекстЗапроса = ТекстЗапроса *
	"ВЫБРАТЬ";
	
	// Строка не локализуется т.к. является частью регламентированной формы, применяемой в РФ.
	ОбластьМакетаПодвал.Параметры.РКО = "Расходный кассовый ордер № _______ от  ""___"" ___________ 20 ___ г.";
	
	
	
КонецФункции


#КонецОбласти
