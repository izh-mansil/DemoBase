
////////////////////////////////////////////////////////////////////////////////
// Отраслевые процедуры и функции для подсистем модулей группы "Леспром".
// Серверные процедуры и функции общего назначения:
// - работа с отраслевыми свойствами номенклатуры;
// - пересчеты по геометрическим свойствам номенклатуры;
// - прочее.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Константы

// Возвращает таблицу, описывающую зависимость констант в конфигурации.
// Каждая строка таблицы означает:
// для родительской константы со значением Х допустимо только значение Y для подчиненной константы.
//
// Параметры:
//   Результат - ТаблицаЗначений:
//             - ИмяРодительскойКонстанты
//             - ИмяПодчиненнойКонстанты
//             - ЗначениеРодительскойКонстанты
//             - ЗначениеПодчиненнойКонстанты
//
Процедура ПолучитьТаблицуЗависимостиКонстант(Результат) Экспорт
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(Результат,
		"LES_ИспользоватьУправлениеДеревообработкой", Ложь, "LES_ИспользоватьУсловияКонтрактов", Ложь);

КонецПроцедуры

#КонецОбласти
// Формирует структуру, в которой для указанного объекта содержатся значения
// реквизитов, хранимые в ресурсах специального регистра сведений.
//
// Параметры:
//  РегистрСведенийМенеджер - РегистрСведенийМенеджер -
//    Менеджер РС, предназначенного для хранения значений реквизитов.
//  ОбъектСсылка - СправочникСсылка, ДокументСсылка -
//    Ссылка на объект, для которого происходит получение значений реквизитов.
//
// Возвращаемое значение:
//  Структура - ключ структуры - Имя реквизита. Значение - значение реквизита.
//
Функция ЗначенияРеквизитовЛеспром(РегистрСведенийМенеджер, ОбъектСсылка) Экспорт
	
	ЗначенияРеквизитов = Новый Структура;
	КоллекцияМетаданныхРесурсы = РегистрСведенийМенеджер.СоздатьНаборЗаписей().Метаданные().Ресурсы;
	Для Каждого ДопРеквизитРесурс Из КоллекцияМетаданныхРесурсы Цикл
		ЗначенияРеквизитов.Вставить(ДопРеквизитРесурс.Имя, ДопРеквизитРесурс.Тип.ПривестиЗначение(""));
	КонецЦикла;
	
	ДопРеквизитыВыборка = РегистрСведенийМенеджер.Выбрать(Новый Структура("Объект", ОбъектСсылка));
	Если ДопРеквизитыВыборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, ДопРеквизитыВыборка);
	КонецЕсли;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

#Область РаботаСКруглымЛесом

// Выполняет поиск дополнительных реквизитов номенклатуры по соответствию значений отраслевых свойств,
// состав которых указан в РС "LES_СоставСвойствКруглогоЛеса".
// Если найдены дополнительные реквизиты, возвращается список реквизитов.
// Если не найденые дополнительные реквизиты, то возвращается Неопрделено.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура -
//    Ссылка на номенклатуру, для которой выполняется поиск дополнительных реквизитов.
//
// Возвращаемое значение:
//  Результат - выборка из результата запроса, содержащая список дополнительных реквизитов с найденными значениями.
//
Функция ДополнительныеРеквизитыНоменклатурыКруглогоЛеса(Номенклатура) Экспорт

	Перем Результат;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизитыПорода.Значение КАК Порода,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	НоменклатураДополнительныеРеквизитыСорт.Значение КАК Сорт,
	|	НоменклатураДополнительныеРеквизитыДлина.Значение КАК Длина,
	|	НоменклатураДополнительныеРеквизитыДиаметр.Значение КАК Диаметр
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыПорода
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.LES_СоставСвойствКруглогоЛеса КАК LES_СоставСвойствКруглогоЛесаПорода
	|			ПО НоменклатураДополнительныеРеквизитыПорода.Свойство = LES_СоставСвойствКруглогоЛесаПорода.Порода
	|				И НоменклатураДополнительныеРеквизитыПорода.Ссылка.ВидНоменклатуры = LES_СоставСвойствКруглогоЛесаПорода.ВидНоменклатуры
	|		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизитыПорода.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыСорт
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.LES_СоставСвойствКруглогоЛеса КАК LES_СоставСвойствКруглогоЛесаСорт
	|			ПО НоменклатураДополнительныеРеквизитыСорт.Свойство = LES_СоставСвойствКруглогоЛесаСорт.Сорт
	|				И НоменклатураДополнительныеРеквизитыСорт.Ссылка.ВидНоменклатуры = LES_СоставСвойствКруглогоЛесаСорт.ВидНоменклатуры
	|		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизитыСорт.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыДлина
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.LES_СоставСвойствКруглогоЛеса КАК LES_СоставСвойствКруглогоЛесаДлина
	|			ПО НоменклатураДополнительныеРеквизитыДлина.Свойство = LES_СоставСвойствКруглогоЛесаДлина.Длина
	|				И НоменклатураДополнительныеРеквизитыДлина.Ссылка.ВидНоменклатуры = LES_СоставСвойствКруглогоЛесаДлина.ВидНоменклатуры
	|		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизитыДлина.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизитыДиаметр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.LES_СоставСвойствКруглогоЛеса КАК LES_СоставСвойствКруглогоЛесаДиаметр
	|			ПО НоменклатураДополнительныеРеквизитыДиаметр.Свойство = LES_СоставСвойствКруглогоЛесаДиаметр.Диаметр
	|				И НоменклатураДополнительныеРеквизитыДиаметр.Ссылка.ВидНоменклатуры = LES_СоставСвойствКруглогоЛесаДиаметр.ВидНоменклатуры
	|		ПО Номенклатура.Ссылка = НоменклатураДополнительныеРеквизитыДиаметр.Ссылка
	|ГДЕ
	|	Номенклатура.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Номенклатура);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		Результат = РезультатЗапроса;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет поиск характеристики по соответствию значений отраслевых свойств,
// состав которых указан в РС "LES_СоставСвойствКруглогоЛеса". Если характеристика
// не найдена, то создается новая. Если найдено более одной, то возвращается
// первая подходящая.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура -
//    Ссылка на номенклатуру, для которой выполняется поиск характеристики.
//  ЗначенияСвойств - Структура -
//    Ключ структуры - имя свойства, значение структуры - искомое значение
//    свойства. Состав ключей структуры определяется составом реквизитов РС
//    состава отраслевых свойств.
//  НоваяХарактеристика - Булево - Истина - была создана новая характеристика.
//
// Возвращаемое значение:
//  СправочникСсылка.ХарактеристикиНоменклатуры - ссылка на найденную характеристику.
//
Функция ХарактеристикаКруглогоЛесаПоЗначениямСвойств(Номенклатура, ЗначенияСвойств, НоваяХарактеристика = Ложь) Экспорт
	
	Перем Результат;
	
	Запрос = Новый Запрос;
	
	ВладельцыХарактеристики = Новый Массив;
	ВладельцыХарактеристики.Добавить(Номенклатура);
	ВладельцыХарактеристики.Добавить(Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ВладельцыХарактеристики", ВладельцыХарактеристики);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	Запрос.УстановитьПараметр("ПустоеСвойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ЗначениеДлина", ЗначенияСвойств.Длина);
	Запрос.УстановитьПараметр("ЗначениеДиаметр", ЗначенияСвойств.Диаметр);
	Запрос.УстановитьПараметр("ЗначениеПорода", ЗначенияСвойств.Порода);
	Запрос.УстановитьПараметр("ЗначениеСорт", ЗначенияСвойств.Сорт);
	
	Запрос.УстановитьПараметр("ГруппаХарактеристикиНоменклатуры", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	|ПОМЕСТИТЬ ВТ_СвойстваНоменклатуры
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = &ГруппаХарактеристикиНоменклатуры
	|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиДопРеквизиты.Ссылка КАК ХарактеристикаСсылка,
	|	ХарактеристикиДопРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДопРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_ХарактеристикиИДопРеквизитыПоВладельцу
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДопРеквизиты
	|ГДЕ
	|	ХарактеристикиДопРеквизиты.Ссылка.Владелец В(&ВладельцыХарактеристики)
	|	И НЕ ХарактеристикиДопРеквизиты.Ссылка.ПометкаУдаления
	|	И ХарактеристикиДопРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				ВТ_СвойстваНоменклатуры.Свойство КАК Свойство
	|			ИЗ
	|				ВТ_СвойстваНоменклатуры КАК ВТ_СвойстваНоменклатуры)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РССоставСвойств.Длина В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваНоменклатуры.Свойство КАК Свойство
	|				ИЗ
	|					ВТ_СвойстваНоменклатуры КАК ВТ_СвойстваНоменклатуры)
	|			ТОГДА РССоставСвойств.Длина
	|		ИНАЧЕ &ПустоеСвойство
	|	КОНЕЦ КАК СвойствоДлина,
	|	ВЫБОР
	|		КОГДА РССоставСвойств.Диаметр В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваНоменклатуры.Свойство КАК Свойство
	|				ИЗ
	|					ВТ_СвойстваНоменклатуры КАК ВТ_СвойстваНоменклатуры)
	|			ТОГДА РССоставСвойств.Диаметр
	|		ИНАЧЕ &ПустоеСвойство
	|	КОНЕЦ КАК СвойствоДиаметр,
	|	ВЫБОР
	|		КОГДА РССоставСвойств.Порода В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваНоменклатуры.Свойство КАК Свойство
	|				ИЗ
	|					ВТ_СвойстваНоменклатуры КАК ВТ_СвойстваНоменклатуры)
	|			ТОГДА РССоставСвойств.Порода
	|		ИНАЧЕ &ПустоеСвойство
	|	КОНЕЦ КАК СвойствоПорода,
	|	ВЫБОР
	|		КОГДА РССоставСвойств.Сорт В
	|				(ВЫБРАТЬ
	|					ВТ_СвойстваНоменклатуры.Свойство КАК Свойство
	|				ИЗ
	|					ВТ_СвойстваНоменклатуры КАК ВТ_СвойстваНоменклатуры)
	|			ТОГДА РССоставСвойств.Сорт
	|		ИНАЧЕ &ПустоеСвойство
	|	КОНЕЦ КАК СвойствоСорт
	|ПОМЕСТИТЬ ВТ_СоставСвойств
	|ИЗ
	|	РегистрСведений.LES_СоставСвойствКруглогоЛеса КАК РССоставСвойств
	|ГДЕ
	|	РССоставСвойств.ВидНоменклатуры = &ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДопРеквизиты.ХарактеристикаСсылка КАК ХарактеристикаСсылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиПоДлине
	|ИЗ
	|	ВТ_СоставСвойств КАК ВТ_СоставСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиИДопРеквизитыПоВладельцу КАК ХарактеристикиДопРеквизиты
	|		ПО (ВЫБОР
	|				КОГДА ВТ_СоставСвойств.СвойствоДлина = &ПустоеСвойство
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ХарактеристикиДопРеквизиты.Свойство = ВТ_СоставСвойств.СвойствоДлина
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_СоставСвойств.СвойствоДлина = &ПустоеСвойство
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ХарактеристикиДопРеквизиты.Значение = &ЗначениеДлина
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДопРеквизиты.ХарактеристикаСсылка КАК ХарактеристикаСсылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиПоДиаметру
	|ИЗ
	|	ВТ_СоставСвойств КАК ВТ_СоставСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиИДопРеквизитыПоВладельцу КАК ХарактеристикиДопРеквизиты
	|		ПО (ВЫБОР
	|				КОГДА ВТ_СоставСвойств.СвойствоДиаметр = &ПустоеСвойство
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ХарактеристикиДопРеквизиты.Свойство = ВТ_СоставСвойств.СвойствоДиаметр
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_СоставСвойств.СвойствоДиаметр = &ПустоеСвойство
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ХарактеристикиДопРеквизиты.Значение = &ЗначениеДиаметр
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДопРеквизиты.ХарактеристикаСсылка КАК ХарактеристикаСсылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиПоПороде
	|ИЗ
	|	ВТ_СоставСвойств КАК ВТ_СоставСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиИДопРеквизитыПоВладельцу КАК ХарактеристикиДопРеквизиты
	|		ПО (ВЫБОР
	|				КОГДА ВТ_СоставСвойств.СвойствоПорода = &ПустоеСвойство
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ХарактеристикиДопРеквизиты.Свойство = ВТ_СоставСвойств.СвойствоПорода
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_СоставСвойств.СвойствоПорода = &ПустоеСвойство
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ХарактеристикиДопРеквизиты.Значение = &ЗначениеПорода
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДопРеквизиты.ХарактеристикаСсылка КАК ХарактеристикаСсылка
	|ПОМЕСТИТЬ ВТ_ХарактеристикиПоСорту
	|ИЗ
	|	ВТ_СоставСвойств КАК ВТ_СоставСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиИДопРеквизитыПоВладельцу КАК ХарактеристикиДопРеквизиты
	|		ПО (ВЫБОР
	|				КОГДА ВТ_СоставСвойств.СвойствоСорт = &ПустоеСвойство
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ХарактеристикиДопРеквизиты.Свойство = ВТ_СоставСвойств.СвойствоСорт
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_СоставСвойств.СвойствоСорт = &ПустоеСвойство
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ХарактеристикиДопРеквизиты.Значение = &ЗначениеСорт
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиНоменклатуры.Ссылка КАК ХарактеристикаСсылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиПоДлине КАК ВТ_ХарактеристикиПоДлине
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ВТ_ХарактеристикиПоДлине.ХарактеристикаСсылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиПоДиаметру КАК ВТ_ХарактеристикиПоДиаметру
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ВТ_ХарактеристикиПоДиаметру.ХарактеристикаСсылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиПоПороде КАК ВТ_ХарактеристикиПоПороде
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ВТ_ХарактеристикиПоПороде.ХарактеристикаСсылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиПоСорту КАК ВТ_ХарактеристикиПоСорту
	|		ПО ХарактеристикиНоменклатуры.Ссылка = ВТ_ХарактеристикиПоСорту.ХарактеристикаСсылка";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() Тогда
		Выборка.Следующий();
		Результат = Выборка.ХарактеристикаСсылка;
	Иначе
		Результат = НоваяХарактеристикаПоЗначениямСвойств("КруглыйЛес", Номенклатура.ВидНоменклатуры, ЗначенияСвойств);
		НоваяХарактеристика = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Выполняет заполнение справочников "Диаметры круглого леса", "Длины круглого леса",
// регистра сведений "Кубатурник" по файлу.
//
// Параметры:
//   Файл - Файл - файл xml, открытый на чтение.
//
Процедура ЗаполнитьКубатурникИзФайла(Файл) Экспорт
	
	Пока  Файл.Прочитать() Цикл 
		
		// Загрузка справочника Длины круглого леса
		Если Файл.Имя = "СправочникДлины" Тогда 
			Пока Файл.Прочитать() Цикл
				
				Если Файл.Имя = "СправочникДлины" Тогда 
					Прервать;
				КонецЕсли;
				
				Если Файл.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
					
					Пока Файл.ПрочитатьАтрибут() Цикл 
						Если Файл.Имя = "Наименование" Тогда
							Наименование = Файл.Значение;
						ИначеЕсли Файл.Имя = "ПогоннаяДлина" Тогда
							ПогоннаяДлина = Число(Файл.Значение);
						КонецЕсли;
					КонецЦикла;
					
					НайденныйЭлемент = Справочники.LES_ДлиныКруглогоЛеса.НайтиПоРеквизиту("ПогоннаяДлина", ПогоннаяДлина);
					Если НайденныйЭлемент = Справочники.LES_ДлиныКруглогоЛеса.ПустаяСсылка() Тогда
						ЭлементСправочника = Справочники.LES_ДлиныКруглогоЛеса.СоздатьЭлемент();
					Иначе
						ЭлементСправочника = НайденныйЭлемент.ПолучитьОбъект();
					КонецЕсли;
						
					ЭлементСправочника.Наименование = Наименование;
					ЭлементСправочника.ПогоннаяДлина = ПогоннаяДлина;
					
					Попытка 
						ЭлементСправочника.Записать();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  // Длины круглого леса
		
		// Загрузка справочника Диаметры круглого леса
		Если Файл.Имя = "СправочникДиаметры" Тогда 
			Пока Файл.Прочитать() Цикл
				
				Если Файл.Имя = "СправочникДиаметры" Тогда 
					Прервать;
				КонецЕсли;
				
				Если Файл.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
					
					Пока Файл.ПрочитатьАтрибут() Цикл 
						Если Файл.Имя = "Наименование" Тогда
							Наименование = Файл.Значение;
						ИначеЕсли Файл.Имя = "ДиаметрФакт" Тогда
							ДиаметрФакт = Число(Файл.Значение);
						ИначеЕсли Файл.Имя = "ДиаметрОт" Тогда
							ДиаметрОт = Число(Файл.Значение);
						ИначеЕсли Файл.Имя = "ДиаметрДо" Тогда
							ДиаметрДо = Число(Файл.Значение);
						КонецЕсли;
						
					КонецЦикла;
					
					НайденныйЭлемент = Справочники.LES_ДиаметрыКруглогоЛеса.НайтиПоРеквизиту("ДиаметрФакт", ДиаметрФакт);
					Если НайденныйЭлемент = Справочники.LES_ДиаметрыКруглогоЛеса.ПустаяСсылка() Тогда
						ЭлементСправочника = Справочники.LES_ДиаметрыКруглогоЛеса.СоздатьЭлемент();
					Иначе
						ЭлементСправочника = НайденныйЭлемент.ПолучитьОбъект();
					КонецЕсли;
						
					ЭлементСправочника.Наименование = Наименование;
					ЭлементСправочника.ДиаметрФакт = ДиаметрФакт;
					ЭлементСправочника.ДиаметрОт = ДиаметрОт;
					ЭлементСправочника.ДиаметрДо = ДиаметрДо;
					
					Попытка 
						ЭлементСправочника.Записать();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					КонецПопытки;
						
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  // Диаметры круглого леса
		
		// Загрузка Регистра сведений Кубатурник
		Если Файл.Имя = "РегистрСведенийКубатурник" Тогда 
			Пока Файл.Прочитать() Цикл
				
				Если Файл.Имя = "РегистрСведенийКубатурник" Тогда 
					Прервать;
				КонецЕсли;
				
				Если Файл.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
					
					Пока Файл.ПрочитатьАтрибут() Цикл 
						Если Файл.Имя = "Длина" Тогда
							Длина = Файл.Значение;
						ИначеЕсли Файл.Имя = "Диаметр" Тогда
							Диаметр = Файл.Значение;
						ИначеЕсли Файл.Имя = "Объем" Тогда
							Объем = Файл.Значение;
						КонецЕсли;   
						
					КонецЦикла;
					
					ЭлементДлина = Справочники.LES_ДлиныКруглогоЛеса.НайтиПоНаименованию(Длина);
					ЭлементДиаметр = Справочники.LES_ДиаметрыКруглогоЛеса.НайтиПоНаименованию(Диаметр);
						
					Если Не ЭлементДлина = Справочники.LES_ДлиныКруглогоЛеса.ПустаяСсылка() И
					Не ЭлементДиаметр = Справочники.LES_ДиаметрыКруглогоЛеса.ПустаяСсылка() Тогда
						Кубатурник = РегистрыСведений.LES_Кубатурник.СоздатьМенеджерЗаписи();
						Кубатурник.Диаметр = ЭлементДиаметр;
						Кубатурник.Длина = ЭлементДлина;
						Кубатурник.Объем = Число(Объем);
						Попытка 
							Кубатурник.Записать();
						Исключение
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;  // Регистр Кубатурник

	КонецЦикла;
	
	Текст = НСтр("ru = ""Заполнение завершено.""");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры

#Область ПересчетыПоКубатурнику

// Функция возвращает объем в соответствии с переданными параметрами.
// Если запись не найдена, тогда функция возвращает 0.
//
// Параметры:
//   Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - характеристика номенклатуры.
//
// Возвращаемое значение:
//   Число - объем одного бревна по кубатурнику.
//
Функция ОбъемШтукиКруглогоЛесаПоХарактеристике(Характеристика) Экспорт
	
	Если Характеристика = Неопределено Или Характеристика.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВидНоменклатуры = ?(ТипЗнч(Характеристика.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры"), Характеристика.Владелец, Характеристика.Владелец.ВидНоменклатуры);
	
	СтруктураДопСвойств = Новый Структура;
	ПустоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	СтруктураДопСвойств.Вставить("СвойствоДлина", ПустоеСвойство);
	СтруктураДопСвойств.Вставить("СвойствоДиаметр", ПустоеСвойство);
	
	СтруктураЗначенийДопСвойств = Новый Структура;
	СтруктураЗначенийДопСвойств.Вставить("Длина", Справочники.LES_ДлиныКруглогоЛеса.ПустаяСсылка());
	СтруктураЗначенийДопСвойств.Вставить("Диаметр", Справочники.LES_ДиаметрыКруглогоЛеса.ПустаяСсылка());
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РССоставСвойств.Длина КАК СвойствоДлина,
	|	РССоставСвойств.Диаметр КАК СвойствоДиаметр
	|ИЗ
	|	РегистрСведений.LES_СоставСвойствКруглогоЛеса КАК РССоставСвойств
	|ГДЕ
	|	РССоставСвойств.ВидНоменклатуры = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	
	ВыборкаПоСвойствам = Запрос.Выполнить().Выбрать();
	Если ВыборкаПоСвойствам.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДопСвойств, ВыборкаПоСвойствам);
	Иначе
		// Дальше нет смысла
		Возврат 0;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Диаметр,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ ЗначениеДиаметра
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = &СвойствоДиаметр
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка = &Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Значение КАК Длина,
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка
	|ПОМЕСТИТЬ ЗначениеДлина
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиНоменклатурыДополнительныеРеквизиты
	|ГДЕ
	|	ХарактеристикиНоменклатурыДополнительныеРеквизиты.Ссылка = &Характеристика
	|	И ХарактеристикиНоменклатурыДополнительныеРеквизиты.Свойство = &СвойствоДлина
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначениеДиаметра.Диаметр,
	|	ЗначениеДлина.Длина
	|ИЗ
	|	ЗначениеДиаметра КАК ЗначениеДиаметра
	|		ПОЛНОЕ СОЕДИНЕНИЕ ЗначениеДлина КАК ЗначениеДлина
	|		ПО ЗначениеДиаметра.Ссылка = ЗначениеДлина.Ссылка";
	 
	Запрос.УстановитьПараметр("СвойствоДлина", СтруктураДопСвойств.СвойствоДлина);
	Запрос.УстановитьПараметр("СвойствоДиаметр", СтруктураДопСвойств.СвойствоДиаметр);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	
	ВыборкаПоЗначениямДопСвойств = Запрос.Выполнить().Выбрать();
	Если ВыборкаПоЗначениямДопСвойств.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЗначенийДопСвойств, ВыборкаПоЗначениямДопСвойств);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураЗначенийДопСвойств.Длина) ИЛИ
		НЕ ЗначениеЗаполнено(СтруктураЗначенийДопСвойств.Диаметр) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ОбъемШтукиКруглогоЛесаПоКубатурнику(СтруктураЗначенийДопСвойств.Длина, СтруктураЗначенийДопСвойств.Диаметр);
	
КонецФункции

// Функция возвращает объем в соответствии с переданными параметрами
// Номенклатура, Длина и Диаметр. Если запись не найдена, тогда 
// функция возвращает 0.
//
// Параметры:
//   Длина        – СправочникСсылка.LES_ДлиныКруглогоЛеса – Длина бревна.
//   Диаметр      – СправочникСсылка.LES_ДиаметрыПиловочника – Диаметр бревна.
//   Сообщать     – Булево – Выводить ли инф. сообщение, если не 
//					было найдено записи в регистре.
//
// Возвращаемое значение:
//  Число – Объем одного бревна по кубатурнику.
//
Функция ОбъемШтукиКруглогоЛесаПоКубатурнику(Длина, Диаметр, Сообщать = Ложь) Экспорт
	
	Объем = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	LES_Кубатурник.Объем КАК Объем
	|ИЗ
	|	РегистрСведений.LES_Кубатурник КАК LES_Кубатурник
	|ГДЕ
	|	LES_Кубатурник.Длина = &Длина
	|	И LES_Кубатурник.Диаметр = &Диаметр";  	
	
	Запрос.УстановитьПараметр("Длина"       , Длина);
	Запрос.УстановитьПараметр("Диаметр"     , Диаметр);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Объем = Выборка.Объем;
		
	ИначеЕсли Сообщать Тогда
	   	   	
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для длины: %1 и диаметра: %2 не указан объем в регистре %3'"), 
			Длина, Диаметр, "Кубатурник");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);

	КонецЕсли;
	
	Возврат Объем;
	
КонецФункции

#КонецОбласти // ПересчетыПоКубатурнику

#КонецОбласти // РаботаСКруглымЛесом

#Область РаботаСПиломатериалами

#Область СвойстваПиломатериалов

// Выполняет поиск характеристики по соответствию значений отраслевых свойств,
// состав которых указан в РС "LES_СоставСвойствПиломатериалов". Если характеристика
// не найдена, то создается новая. Если найдено более одной, то возвращается
// первая подходящая.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура -
//    Ссылка на номенклатуру, для которой выполняется поиск характеристики.
//  ЗначенияСвойств - Структура -
//    Ключ структуры - имя свойства, значение структуры - значение свойства
//    для искомой характеристики.
//  НоваяХарактеристика - Булево - Истина - была создана новая характеристика.
//
// Возвращаемое значение:
//  СправочникСсылка.ХарактеристикиНоменклатуры - ссылка на найденную характеристику.
//
Функция ХарактеристикаПиломатериаловПоЗначениямСвойств(Номенклатура, ЗначенияСвойств, НоваяХарактеристика = Ложь) Экспорт
	
	Перем Результат;
	
	// Инициализация запроса
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаХарактеристикаПиломатериаловПоЗначениямСвойств();
	
	// Параметры запроса
	ВладельцыХарактеристики = Новый Массив;
	ВладельцыХарактеристики.Добавить(Номенклатура);
	ВладельцыХарактеристики.Добавить(Номенклатура.ВидНоменклатуры);
	
	Запрос.УстановитьПараметр("ВладельцыХарактеристики", ВладельцыХарактеристики);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ГруппаХарактеристикиНоменклатуры", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
	ПустоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	Запрос.УстановитьПараметр("ПустоеСвойство", ПустоеСвойство);
	
	// Параметры запроса - значения отраслевых свойств
	СтруктураСвойств = ПустыеЗначенияСвойствПиломатериалов();
	ЗаполнитьЗначенияСвойств(СтруктураСвойств, ЗначенияСвойств);
	Для Каждого ЭлементСтруктуры Из СтруктураСвойств Цикл
		Запрос.УстановитьПараметр("Значение"+ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	// Обработка результата запроса
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() Тогда
		Выборка.Следующий();
		Результат = Выборка.ХарактеристикаСсылка;
	Иначе
		Результат = НоваяХарактеристикаПоЗначениямСвойств("Пиломатериалы", Номенклатура.ВидНоменклатуры, ЗначенияСвойств);
		НоваяХарактеристика = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение отраслевых свойств пиломатериала для номенклатуры. Состав свойств
// определен ресурсами РС "LES_СоставСвойствПиломатериалов". Если для вида
// номенклатуры не задано соответствие в регистре, то будет возвращена
// структура с пустыми значениями свойств.
//
// Параметры:
//  Номенклатура - СправочникСсылка.Номенклатура -
//    Номенклатура, для которой требуется определить значения отраслевых свойств.
//
// Возвращаемое значение:
//  Структура - ключ структуры - имя свойства (ресурса РС), значение структуры -
//    значение свойства.
//
Функция ЗначенияСвойствПиломатериалаПоНоменклатуре(Номенклатура) Экспорт
	
	// Инициализация структуры свойств
	ПустоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	ЗначенияСвойств = ПустыеЗначенияСвойствПиломатериалов();
	
	// Инициализация запроса
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗначенияСвойствПиломатериалаПоВладельцу(Тип("СправочникСсылка.Номенклатура"));
	
	Запрос.УстановитьПараметр("ВладелецСвойств", Номенклатура);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	Запрос.УстановитьПараметр("ПустоеСвойство", ПустоеСвойство);
	
	// Обработка результата запроса
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат ЗначенияСвойств;
	Иначе
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Выборка);
		Для Каждого КлючИЗначение Из Новый ФиксированнаяСтруктура(ЗначенияСвойств) Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ЗначенияСвойств.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначенияСвойств;
	
КонецФункции 

// Получение отраслевых свойств номенклатуры по ее характеристике. Состав свойств
// определен ресурсами РС "LES_СоставСвойствПиломатериалов". Если для вида
// номенклатуры, связанного с характеристикой, не задано соответствие в регистре,
// то будет возвращена структура с пустыми значениями свойств.
//
// Параметры:
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//    Характеристика, для которой требуется определить значения отраслевых свойств.
//
// Возвращаемое значение:
//  Структура - ключ структуры - имя свойства (ресурса РС), значение структуры -
//    значение свойства.
//
Функция ЗначенияСвойствПиломатериаловПоХарактеристике(Характеристика) Экспорт
	
	// Инициализация структуры свойств
	ПустоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	ЗначенияСвойств = ПустыеЗначенияСвойствПиломатериалов();
	
	ВладелецХарактеристики = Характеристика.Владелец;
	Если ТипЗнч(ВладелецХарактеристики) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = ВладелецХарактеристики.ВидНоменклатуры;
	ИначеЕсли ТипЗнч(ВладелецХарактеристики) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ВидНоменклатуры = ВладелецХарактеристики;
	Иначе
		Возврат ЗначенияСвойств;
	КонецЕсли;
	
	// Инициализация запроса
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаЗначенияСвойствПиломатериалаПоВладельцу(Тип("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Запрос.УстановитьПараметр("ВладелецСвойств", Характеристика);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
	Запрос.УстановитьПараметр("ПустоеСвойство", ПустоеСвойство);
	
	// Обработка результата запроса
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат ЗначенияСвойств;
	Иначе
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЗначенияСвойств, Выборка);
		Для Каждого КлючИЗначение Из Новый ФиксированнаяСтруктура(ЗначенияСвойств) Цикл
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ЗначенияСвойств.Удалить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ЗначенияСвойств;
	
КонецФункции 

// Функция формирует коллекцию пустых свойств в соответствии с регистром сведений "LES_СоставСвойствПиломатериалов".
//
// Возвращаемое значение:
//  Структура - 
//		Ключ структуры - имя свойства (ресурса регистра сведений)
//		Значение структуры - значение свойства
//
Функция ПустыеЗначенияСвойствПиломатериалов() Экспорт
	
	ПустоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	СтруктураСвойств = Новый Структура;
	СоставСвойств = РегистрыСведений.LES_СоставСвойствПиломатериалов.СоздатьНаборЗаписей().Метаданные().Ресурсы;
	Для Каждого Свойство Из СоставСвойств Цикл
		СтруктураСвойств.Вставить(Свойство.Имя, ПустоеСвойство);
	КонецЦикла;
	
	Возврат СтруктураСвойств;
	
КонецФункции

#КонецОбласти // СвойстваПиломатериалов

#Область ПересчетыПоГеометрии

// Рассчитывает объем одной штуки пиломатериалов (брус, доска) в соответствии
// с геометрическими параметрами, указанными в переданной характеристике. Если
// расчет невозможен (например, геом. параметры не указаны в характеристике),
// то функция возвращает 0. Расчет выполняется по правилам функции
// ОбъемШтукиПиломатериаловПоГеометрии.
//
// Параметры:
//  Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
//    Характеристика, для которой выполняется расчет объема штуки п/м.
//  ВариантРасчета - Строка -
//    Вариант рассчитываемого объема. Принимает значения "Факт", "Зачет".
//
// Возвращаемое значение:
//  Число – Объем единицы пиломатериалов (брус, доска).
//
Функция ОбъемШтукиПиломатериаловПоХарактеристике(Характеристика, Знач ВариантРасчета = "Факт") Экспорт
	
	Если Характеристика = Неопределено Или Характеристика.Пустая() Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ВариантРасчета <> "Факт" И ВариантРасчета <> "Зачет" Тогда
		Возврат 0;
	КонецЕсли;
	
	ЗначенияСвойств = ЗначенияСвойствПиломатериаловПоХарактеристике(Характеристика);
	
	Длина = ?(ЗначенияСвойств.Свойство("Длина"+ВариантРасчета), ЗначенияСвойств["Длина"+ВариантРасчета], 0);
	Ширина = ?(ЗначенияСвойств.Свойство("Ширина"+ВариантРасчета), ЗначенияСвойств["Ширина"+ВариантРасчета], 0);
	Толщина = ?(ЗначенияСвойств.Свойство("Толщина"+ВариантРасчета), ЗначенияСвойств["Толщина"+ВариантРасчета], 0);
	
	Возврат ОбъемШтукиПиломатериаловПоГеометрии(Длина, Ширина, Толщина);
	
КонецФункции 

// Рассчитывает объем одной штуки пиломатериалов (брус, доска) в соответствии
// с переданными значениями геометрических параметров. Если расчет невозможен
// (например, недостаточно указанных параметров), то функция возвращает 0.
//
// Параметры:
//   Длина – Число – Длина пиломатериала.
//   Ширина – Число – Ширина пиломатериала.
//   Толщина - Число - толщина пиломатериала.
//
// Возвращаемое значение:
//   Число – Объем единицы пиломатериалов (брус, доска).
//
Функция ОбъемШтукиПиломатериаловПоГеометрии(Знач Длина, Знач Ширина, Знач Толщина) Экспорт
	
	// Соотношения геометрических величин к метру
	КоэфШирина = 0.001; // мм
	КоэфТолщина = 0.001; // мм
	КоэфДлина = 1; // м
	
	ТипЧисло = Тип("Число");
	Если ТипЗнч(Длина) <> ТипЧисло
		Или ТипЗнч(Ширина) <> ТипЧисло
		Или ТипЗнч(Толщина) <> ТипЧисло Тогда
		Возврат 0;
	КонецЕсли;
	
	Объем = Длина * КоэфДлина * Ширина * КоэфШирина * Толщина * КоэфТолщина;
	Возврат Объем;
	
КонецФункции

#КонецОбласти // ПересчетыПоГеометрии

#КонецОбласти // РаботаСПиломатериалами

#Область УправлениеПечатью

// Добавляет документы подсистемы "LES_УправлениеДеревообработкой" в список объектов,
// для которых доступны команды печати.
//
// Параметры:
//   СписокОбъектов - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Документы.LES_АктОбмера);
	СписокОбъектов.Добавить(Документы.LES_КонтрольныйЗамер);
	СписокОбъектов.Добавить(Документы.LES_ВесовойЗамер);
	
КонецПроцедуры

#КонецОбласти

#область УправлениеОтчетами

// Добавляет документы подсистемы "LES_УправлениеДеревообработкой" в список объектов,
// в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   СписокОбъектов - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ПриОпределенииОбъектовСКомандамиОтчетов(СписокОбъектов) Экспорт
	
	СписокОбъектов.Добавить(Метаданные.Документы.LES_УсловияКонтрактов);
	
КонецПроцедуры

// Добавляет подсистему "Отчет по деревообработке" в список разделов
// глобального командного интерфейса, в которых предусмотрены панели отчетов.
//
// Параметры:
//   Разделы - СписокЗначений - разделы, в которые выведены команды открытия панели отчетов.
//
Процедура ОпределитьРазделыСВариантамиОтчетов(Разделы) Экспорт
	
	Разделы.Добавить(Метаданные.Подсистемы.LES_УправлениеДеревообработкой,
			НСтр("ru= 'Отчеты по деревообработке'"));
			
КонецПроцедуры

// Задает настройки размещения вариантов отчетов в панели отчетов.
// см. ОбщийМодуль.ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
// 
// Параметры:
//   Настройки - Коллекция - настройки отчетов и вариантов отчетов конфигурации.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	// отчеты подсистемы Деревообработка
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.LES_ВыполнениеКонтрактовНаПоставку);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие пиломатериалы должны поставить поставщики? 
		|Какие пиломатериалы поставлены на предприятие по факту?'");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.LES_УправлениеДеревообработкой.Подсистемы.LES_ПоступлениеЛесосырья);

	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.LES_ВыполнениеКонтрактовНаОтгрузку);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru= 'Какие пиломатериалы предприятие должно поставить клиентам? 
		|Какие пиломатериалы поставлены клиентам по факту?'");
	ОписаниеВарианта.Размещение.Вставить(Метаданные.Подсистемы.LES_УправлениеДеревообработкой.Подсистемы.LES_ОтгрузкаЛесопродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДинамическоеСозданиеЭлементовФорм

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
// см. справочную информацию по событиям управляемой формы.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки событий.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИмяФормы = Форма.ИмяФормы;
	Если ИмяФормы = "" Тогда
		Возврат;
	КонецЕсли;	
	
	СервисыЗаполненияДокументов(Форма, Отказ, СтандартнаяОбработка);
	
	Если ИмяФормы = "Документ.ПриобретениеТоваровУслуг.Форма.ФормаДокумента" Тогда
		ПриСозданииФормыДокумента_ПриобретениеТоваровУслуг(Форма, Отказ, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиПодписокНаСобытия

// Обработчик подписки на событие "Обработка заполнения" всех документов.
// см. справочную информацию по событиям документа. 
//
// Параметры:
//   Источник - ДокументОбъект - объект-источник заполнения документа.
//   ДанныеЗаполнения - Произвольный - значение, которое используется как основание для заполнения.
//   ТекстЗаполнения - Строка, Неопределено - текст, используемый для заполнения документа.
//   СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки событий.
//
Процедура LES_ДокументыОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		ПриобретениеТоваровУслугПриОбработкеЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ПриходныйОрдерНаТовары") Тогда
		ПриходныйОрдерНаТоварыПриОбработкеЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		РеализацияТоваровУслугПриОбработкеЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "Обработка проведения" всех документов.
// см. справочную информацию по событиям документа. 
//
// Параметры:
//   Источник - ДокументОбъект - проводимый документ.
//   Отказ - Булево - признак отказа от проведения документа.
//   РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура LES_ДокументыОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	
	Если ТипИсточника = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		ПриобретениеТоваровУслугПриОбработкеПроведения(Источник, Отказ, РежимПроведения);
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		РеализацияТоваровУслугПриОбработкеПроведения(Источник, Отказ, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки на событие "При записи" документов "ДвижениеПродукцииИМатериалов",
// "ПроизводствоБезЗаказа". Обновляет реквизиты операций по сушке пиломатериалов в регистре,
// сведений "ИсторияОперацийСушкиПиломатериалов", если документ регистрировал операцию.
//
// Параметры:
//   Источник - ДокументОбъект - проверяемый документ.
//   Отказ - Булево - признак отказа от записи в регистр.
//
Процедура LES_ОбновитьЗаписьИсторииОперацийСушкиПриЗаписиДокумента(Источник, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИсторияОпераций.Период,
	|	ИсторияОпераций.ВидОперации,
	|	ИсторияОпераций.СушильнаяКамера,
	|	ИсторияОпераций.Спецификация
	|ИЗ
	|	РегистрСведений.LES_ИсторияОперацийСушкиПиломатериалов КАК ИсторияОпераций
	|ГДЕ
	|	ИсторияОпераций.ДокументОперации = &ДокументСсылка";
	
	Запрос.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	
	ВыборкаЗапись = Запрос.Выполнить().Выбрать();
	Если ВыборкаЗапись.Следующий() Тогда
		
		ИсторияОперацийНаборЗаписей = РегистрыСведений.LES_ИсторияОперацийСушкиПиломатериалов.СоздатьНаборЗаписей();
		
		// Удаление старой записи
		ИсторияОперацийНаборЗаписей.Отбор.Период.Установить(ВыборкаЗапись.Период);
		ИсторияОперацийНаборЗаписей.Отбор.ВидОперации.Установить(ВыборкаЗапись.ВидОперации);
		ИсторияОперацийНаборЗаписей.Отбор.СушильнаяКамера.Установить(ВыборкаЗапись.СушильнаяКамера);
		ИсторияОперацийНаборЗаписей.Записать();
		
		// Формирование новой записи
		СушильнаяКамера = ВыборкаЗапись.СушильнаяКамера;
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.ДвижениеПродукцииИМатериалов") Тогда
			СушильнаяКамера = Источник.Получатель;
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ПроизводствоБезЗаказаМатериалыИРаботы.Отправитель
			|ИЗ
			|	Документ.ПроизводствоБезЗаказа.МатериалыИРаботы КАК ПроизводствоБезЗаказаМатериалыИРаботы
			|ГДЕ
			|	ПроизводствоБезЗаказаМатериалыИРаботы.Ссылка = &ДокументСсылка
			|	И ПроизводствоБезЗаказаМатериалыИРаботы.Отправитель ССЫЛКА Справочник.Склады";
			
			ВыборкаОтправитель = Запрос.Выполнить().Выбрать();
			Если ВыборкаОтправитель.Следующий() Тогда
				СушильнаяКамера = ВыборкаОтправитель.Отправитель;
			КонецЕсли;
			
		КонецЕсли;
		
		ИсторияОперацийНаборЗаписей.Отбор.Период.Установить(Источник.Дата);
		ИсторияОперацийНаборЗаписей.Отбор.ВидОперации.Установить(ВыборкаЗапись.ВидОперации);
		ИсторияОперацийНаборЗаписей.Отбор.СушильнаяКамера.Установить(СушильнаяКамера);
		
		ИсторияОперацийЗапись = ИсторияОперацийНаборЗаписей.Добавить();
		ИсторияОперацийЗапись.Период = Источник.Дата;
		ИсторияОперацийЗапись.ВидОперации = ВыборкаЗапись.ВидОперации;
		ИсторияОперацийЗапись.СушильнаяКамера = СушильнаяКамера;
		ИсторияОперацийЗапись.Спецификация = ВыборкаЗапись.Спецификация;
		ИсторияОперацийЗапись.ДокументОперации = Источник.Ссылка;
		
		ИсторияОперацийНаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

#Область Константы

// Используется процедура общего модуля ОбщегоНазначенияУТПовтИсп
Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант,
			ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты)
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты 	  = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты 	  = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры 

#КонецОбласти

#Область РаботаСХарактеристикамиНоменклатуры

// Функция создает, заполняет и записывает новую характеристику по заданным
// значениям отраслевых свойств.
//
// Параметры:
//  ОтраслевойТип - Строка -
//    Отраслевой тип. Определяет состав и привязку отраслевых свойств
//    характеристики. Может принимать значения: "КруглыйЛес", "Пиломатериалы".
//  ВладелецХарактеристики - СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры -
//    Владелец характеристики (номенклатура или вид номенклатуры).
//  ЗначенияСвойств - Структура -
//    Ключ структуры - имя свойства, значение - значение свойства. Состав
//    свойств определяется набором ресурсов отраслевого РС "СоставСвойств".
//
// Возвращаемое значение:
//  СправочникСсылка.ХарактеристикиНоменклатуры - ссылка на созданный элемент справочника.
//
Функция НоваяХарактеристикаПоЗначениямСвойств(ОтраслевойТип, ВладелецХарактеристики, ЗначенияСвойств)
	
	ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ПустоеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	
	// Получение набора отраслевых свойств, которые будут заполнены в новой характеристике.
	Если НРег(ОтраслевойТип) = "круглыйлес" Тогда
		СоставСвойствНаборЗаписей = РегистрыСведений.LES_СоставСвойствКруглогоЛеса.СоздатьНаборЗаписей();
	ИначеЕсли НРег(ОтраслевойТип) = "пиломатериалы" Тогда
		СоставСвойствНаборЗаписей = РегистрыСведений.LES_СоставСвойствПиломатериалов.СоздатьНаборЗаписей();
	Иначе
		Возврат ПустаяХарактеристика;
	КонецЕсли;
	
	Если ТипЗнч(ВладелецХарактеристики) = Тип("СправочникСсылка.Номенклатура") Тогда
		ВидНоменклатуры = ВладелецХарактеристики.ВидНоменклатуры;
	ИначеЕсли ТипЗнч(ВладелецХарактеристики) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		ВидНоменклатуры = ВладелецХарактеристики;
	Иначе
		Возврат ПустаяХарактеристика;
	КонецЕсли;
	
	СвойстваХарактеристикНоменклатуры = ПолучитьСвойстваХарактеристикНоменклатуры();	
	
	СоставСвойствНаборЗаписей.Отбор.ВидНоменклатуры.Установить(ВидНоменклатуры);
	СоставСвойствНаборЗаписей.Прочитать();
	ЗаполняемыеСвойстваХарактеристики = Новый Структура;
	Если СоставСвойствНаборЗаписей.Количество() Тогда
		СоставСвойств = СоставСвойствНаборЗаписей[0];
		Для Каждого Свойство Из СоставСвойствНаборЗаписей.Метаданные().Ресурсы Цикл
			Если СоставСвойств[Свойство.Имя] <> ПустоеСвойство И НЕ СвойстваХарактеристикНоменклатуры.Найти(СоставСвойств[Свойство.Имя]) = Неопределено Тогда
				ЗаполняемыеСвойстваХарактеристики.Вставить(Свойство.Имя, СоставСвойств[Свойство.Имя]);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗаполняемыеСвойстваХарактеристики) Тогда
		Возврат ПустаяХарактеристика;
	КонецЕсли;
	
	// Заполнение характеристики
	ХарактеристикаОбъект = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	
	// Значения отраслевых свойств
	Для Каждого ЗаполняемоеСвойство Из ЗаполняемыеСвойстваХарактеристики Цикл
		НовыйДопРеквизит = ХарактеристикаОбъект.ДополнительныеРеквизиты.Добавить();
		НовыйДопРеквизит.Свойство = ЗаполняемоеСвойство.Значение;
		НовыйДопРеквизит.Значение = ЗначенияСвойств[ЗаполняемоеСвойство.Ключ];
	КонецЦикла;
	
	// Основные реквизиты характеристики
	ХарактеристикаОбъект.Владелец = ВладелецХарактеристики;
	
	НаименованиеХарактеристики = НоменклатураСервер.НаименованиеПоШаблону(ВидНоменклатуры.ШаблонРабочегоНаименованияХарактеристики, ХарактеристикаОбъект);
	Если Не ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
		Разделитель = ", ";
		Для Каждого ДопРеквизит Из ХарактеристикаОбъект.ДополнительныеРеквизиты Цикл
			НаименованиеХарактеристики = НаименованиеХарактеристики + Разделитель + Строка(ДопРеквизит.Значение);
		КонецЦикла;
		Если ЗначениеЗаполнено(НаименованиеХарактеристики) Тогда
			НаименованиеХарактеристики = Сред(НаименованиеХарактеристики, СтрДлина(Разделитель) + 1);
		КонецЕсли;
	КонецЕсли;
	ХарактеристикаОбъект.Наименование = НаименованиеХарактеристики;
	ХарактеристикаОбъект.НаименованиеПолное = НаименованиеХарактеристики;
	
	// Запись объекта и возврат ссылки. При ошибках записи ссылка останется пустой.
	ХарактеристикаОбъект.Записать();
	Возврат ХарактеристикаОбъект.Ссылка;
	
КонецФункции

// Принцип построения запроса:
// 1. Поиск характеристик по заданному владельцу (Номенклатура, ВидНоменклатуры).
// 2. Определение состава отраслевых свойств, используемых для данного вида
//    номенклатруры.
// 3. (Для каждого свойства) Поиск среди характеристик из п.1 тех, что содержат
//    заданное значение свойства.
// 4. Внутреннее соединение по всем таблицам из п.3. В результат попадут только
//    те характеристики (в идеале - одна), которые удовлетворяют всем критериям
//    поиска (совпадают по всем заданным значениям отраслевых свойств). Т.е.
//    получаем пересечение всех подмножеств из п.3.
//
Функция ТекстЗапросаХарактеристикаПиломатериаловПоЗначениямСвойств()
	
	// Подготовка вспомогательных данных
	РазделительПодзапросов =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	СоставСвойств = РегистрыСведений.LES_СоставСвойствПиломатериалов.СоздатьНаборЗаписей().Метаданные().Ресурсы;
	
	// П. 0
	ПодзапросСоставаСвойствОбщий =
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
	|ПОМЕСТИТЬ ВТ_СвойстваНоменклатуры
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = &ГруппаХарактеристикиНоменклатуры
	|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления";
	
	// П. 1
	ПодзапросХарактеристикиВладельца =
	"ВЫБРАТЬ
	|	ХарактеристикиДопРеквизиты.Ссылка КАК ХарактеристикаСсылка,
	|	ХарактеристикиДопРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДопРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_ВсеХарактеристикиВладельца
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДопРеквизиты
	|ГДЕ
	|	ХарактеристикиДопРеквизиты.Ссылка.Владелец В(&ВладельцыХарактеристики)
	|	И НЕ ХарактеристикиДопРеквизиты.Ссылка.ПометкаУдаления";
	
	// П. 2
	ПодзапросСоставСвойств =
	"ВЫБРАТЬ [ТекстНабораСвойств]
	|ПОМЕСТИТЬ ВТ_СоставСвойствВидаНоменклатуры
	|ИЗ
	|	РегистрСведений.LES_СоставСвойствПиломатериалов КАК РССоставСвойств
	|ГДЕ
	|	РССоставСвойств.ВидНоменклатуры = &ВидНоменклатуры";
	
	ТекстНабораСвойств = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		
		ТекстСвойства =
		",
		|	ВЫБОР
		|		КОГДА РССоставСвойств.[ИмяСвойства] В
		|				(ВЫБРАТЬ
		|					ВТ_СвойстваНоменклатуры.Свойство КАК Свойство
		|				ИЗ
		|					ВТ_СвойстваНоменклатуры КАК ВТ_СвойстваНоменклатуры)
		|			ТОГДА РССоставСвойств.[ИмяСвойства]
		|		ИНАЧЕ &ПустоеСвойство
		|	КОНЕЦ КАК Свойство[ИмяСвойства]";
		
		ТекстСвойства = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСвойства, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстНабораСвойств = ТекстНабораСвойств + ТекстСвойства;
	КонецЦикла;
	ТекстНабораСвойств = Сред(ТекстНабораСвойств, 2); // убираем лишнюю запятую
	
	ПодзапросСоставСвойств = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПодзапросСоставСвойств, Новый Структура("ТекстНабораСвойств", ТекстНабораСвойств));
	
	// П. 3
	ПодзапросТаблицыПоСвойствам = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		// Если отраслевое свойство не определено в составе, то подходящими считаются
		// все характеристики. В противном случае - только те, значения свойств которых
		// совпали с заданным.
		ТекстПодзапросаСвойство =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ХарактеристикиВладельца.ХарактеристикаСсылка КАК ХарактеристикаСсылка
		|ПОМЕСТИТЬ ВТ_ХарактеристикиОтбор[ИмяСвойства]
		|ИЗ
		|	ВТ_СоставСвойствВидаНоменклатуры КАК ВТ_СоставСвойств
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеХарактеристикиВладельца КАК ХарактеристикиВладельца
		|		ПО (ВЫБОР
		|				КОГДА ВТ_СоставСвойств.Свойство[ИмяСвойства] = &ПустоеСвойство
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ХарактеристикиВладельца.Свойство = ВТ_СоставСвойств.Свойство[ИмяСвойства]
		|			КОНЕЦ)
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_СоставСвойств.Свойство[ИмяСвойства] = &ПустоеСвойство
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ХарактеристикиВладельца.Значение = &Значение[ИмяСвойства]
		|		КОНЕЦ";
		ТекстПодзапросаСвойство = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстПодзапросаСвойство, Новый Структура("ИмяСвойства", Свойство.Имя));
		ПодзапросТаблицыПоСвойствам = ПодзапросТаблицыПоСвойствам + РазделительПодзапросов + ТекстПодзапросаСвойство;
	КонецЦикла;
	
	// П. 4
	ПодзапросРезультат =
	"ВЫБРАТЬ
	|	ХарактеристикиВладельца.ХарактеристикаСсылка
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_ВсеХарактеристикиВладельца.ХарактеристикаСсылка КАК ХарактеристикаСсылка
	|	ИЗ
	|		ВТ_ВсеХарактеристикиВладельца КАК ВТ_ВсеХарактеристикиВладельца) КАК ХарактеристикиВладельца [ТекстСоединений]";
	
	ТекстСоединений = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		ТекстСоединения = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ХарактеристикиОтбор[ИмяСвойства] КАК ВТ_ХарактеристикиОтбор[ИмяСвойства]
		|		ПО ХарактеристикиВладельца.ХарактеристикаСсылка = ВТ_ХарактеристикиОтбор[ИмяСвойства].ХарактеристикаСсылка";
		ТекстСоединения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСоединения, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстСоединений = ТекстСоединений + ТекстСоединения;
	КонецЦикла;
	
	ПодзапросРезультат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПодзапросРезультат, Новый Структура("ТекстСоединений", ТекстСоединений));
	
	// Компоновка итогового текста запроса
	ТекстЗапроса = ""
	+ ПодзапросСоставаСвойствОбщий + РазделительПодзапросов
	+ ПодзапросХарактеристикиВладельца + РазделительПодзапросов
	+ ПодзапросСоставСвойств // без разделителя - есть в следующем подзапросе
	+ ПодзапросТаблицыПоСвойствам + РазделительПодзапросов
	+ ПодзапросРезультат;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Принцип построения запроса:
// 1. Определение состава отраслевых свойств, используемых для вида номенклатуры.
// 2. Получение таблицы, в которой содержатся свойства и их значения только для
//    данной номенклатуры/характеристики.
// 3. Транспонирование: столбец значений свойств переносится в строку; имена
//    колонок - имена свойств.
//
Функция ТекстЗапросаЗначенияСвойствПиломатериалаПоВладельцу(ТипВладельца)
	
	// Подготовка вспомогательных данных
	Если ТипВладельца = Тип("СправочникСсылка.Номенклатура") Тогда
		ТаблицаДопРеквизиты = "Справочник.Номенклатура.ДополнительныеРеквизиты";
	ИначеЕсли ТипВладельца = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		ТаблицаДопРеквизиты = "Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты";
	Иначе
		ВызватьИсключение НСтр("ru='Некорректное использование метода! Обратитесь к администратору.'");
	КонецЕсли;
	
	РазделительПодзапросов =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	СоставСвойств = РегистрыСведений.LES_СоставСвойствПиломатериалов.СоздатьНаборЗаписей().Метаданные().Ресурсы;
	
	// П. 1
	ПодзапросСоставСвойств =
	"ВЫБРАТЬ [ТекстНабораСвойств]
	|ПОМЕСТИТЬ ВТ_СоставСвойствВидаНоменклатуры
	|ИЗ
	|	РегистрСведений.LES_СоставСвойствПиломатериалов КАК РССоставСвойств
	|ГДЕ
	|	РССоставСвойств.ВидНоменклатуры = &ВидНоменклатуры";
	
	ТекстНабораСвойств = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		ТекстСвойства =
		",
		|	РССоставСвойств.[ИмяСвойства]";
		ТекстСвойства = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСвойства, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстНабораСвойств = ТекстНабораСвойств + ТекстСвойства;
	КонецЦикла;
	ТекстНабораСвойств = Сред(ТекстНабораСвойств, 2); // Убираем лишнюю запятую
	
	ПодзапросСоставСвойств = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПодзапросСоставСвойств, Новый Структура("ТекстНабораСвойств", ТекстНабораСвойств));
	
	// П. 2
	ПодзапросЗначенияСвойств =
	"ВЫБРАТЬ
	|	ВладелецСвойствДопРеквизиты.Свойство,
	|	ВладелецСвойствДопРеквизиты.Значение
	|ПОМЕСТИТЬ ВТ_ЗначенияСвойствВладельца
	|ИЗ
	|	&ТаблицаВладелецСвойствДопРеквизиты КАК ВладелецСвойствДопРеквизиты
	|ГДЕ
	|	ВладелецСвойствДопРеквизиты.Ссылка = &ВладелецСвойств";
	
	ПодзапросЗначенияСвойств = СтрЗаменить(ПодзапросЗначенияСвойств, "&ТаблицаВладелецСвойствДопРеквизиты", ТаблицаДопРеквизиты);
	
	// П. 3
	ПодзапросРезультат =
	"ВЫБРАТЬ [ТекстЗначенияСвойств]
	|ИЗ
	|	ВТ_СоставСвойствВидаНоменклатуры КАК ВТ_СоставСвойствВидаНоменклатуры [ТекстСоединений]";
	
	ТекстЗначенияСвойств = "";
	ТекстСоединений = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		
		ТекстСвойства =
		",
		|	ЕСТЬNULL(ВладелецСвойств[ИмяСвойства].Значение, &ПустоеСвойство) КАК [ИмяСвойства]";
		ТекстСвойства = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСвойства, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстЗначенияСвойств = ТекстЗначенияСвойств + ТекстСвойства;
		
		ТекстСоединения =
		"
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияСвойствВладельца КАК ВладелецСвойств[ИмяСвойства]
		|		ПО ВладелецСвойств[ИмяСвойства].Свойство = ВТ_СоставСвойствВидаНоменклатуры.[ИмяСвойства]";
		ТекстСоединения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСоединения, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстСоединений = ТекстСоединений + ТекстСоединения;
		
	КонецЦикла;
	ТекстЗначенияСвойств = Сред(ТекстЗначенияСвойств, 2);
	
	ВставляемыеЗначения = Новый Структура("ТекстЗначенияСвойств, ТекстСоединений", ТекстЗначенияСвойств, ТекстСоединений);
	ПодзапросРезультат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПодзапросРезультат, ВставляемыеЗначения);
	
	// Компоновка итогового текста запроса
	ТекстЗапроса = ""
	+ ПодзапросСоставСвойств + РазделительПодзапросов
	+ ПодзапросЗначенияСвойств + РазделительПодзапросов
	+ ПодзапросРезультат;
	
	Возврат ТекстЗапроса;
	
КонецФункции 

// Устарела. Следует использовать LES_ЛеспромСервер.ТекстЗапросаЗначенияСвойствПиломатериаловПоВладельцу
// Принцип построения запроса:
// 1. Определение состава отраслевых свойств, используемых для вида номенклатруры,
//    связанного с данной характеристикой.
// 2. Получение таблицы, в которой содержатся свойства и их значения только для
//    данной характеристики.
// 3. Транспонирование: столбец значений свойств переносится в строку; имена
//    колонок - имена свойств.
//
Функция ТекстЗапросаЗначенияСвойствПиломатериаловПоХарактеристике()
	
	// Подготовка вспомогательных данных
	РазделительПодзапросов =
	"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	СоставСвойств = РегистрыСведений.LES_СоставСвойствПиломатериалов.СоздатьНаборЗаписей().Метаданные().Ресурсы;
	
	// П. 1
	ПодзапросСоставСвойств =
	"ВЫБРАТЬ [ТекстНабораСвойств]
	|ПОМЕСТИТЬ ВТ_СоставСвойствВидаНоменклатуры
	|ИЗ
	|	РегистрСведений.LES_СоставСвойствПиломатериалов КАК РССоставСвойств
	|ГДЕ
	|	РССоставСвойств.ВидНоменклатуры = &ВидНоменклатуры";
	
	ТекстНабораСвойств = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		ТекстСвойства =
		",
		|	РССоставСвойств.[ИмяСвойства]";
		ТекстСвойства = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСвойства, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстНабораСвойств = ТекстНабораСвойств + ТекстСвойства;
	КонецЦикла;
	ТекстНабораСвойств = Сред(ТекстНабораСвойств, 2); // Убираем лишнюю запятую
	
	ПодзапросСоставСвойств = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПодзапросСоставСвойств, Новый Структура("ТекстНабораСвойств", ТекстНабораСвойств));
	
	// П. 2
	ПодзапросЗначенияСвойств =
	"ВЫБРАТЬ
	|	ХарактеристикиДопРеквизиты.Свойство,
	|	ХарактеристикиДопРеквизиты.Значение
	|ПОМЕСТИТЬ ВТ_ЗначенияСвойствХарактеристики
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДопРеквизиты
	|ГДЕ
	|	ХарактеристикиДопРеквизиты.Ссылка = &Характеристика";
	
	// П. 3
	ПодзапросРезультат =
	"ВЫБРАТЬ [ТекстЗначенияСвойств]
	|ИЗ
	|	ВТ_СоставСвойствВидаНоменклатуры КАК ВТ_СоставСвойствВидаНоменклатуры [ТекстСоединений]";
	
	ТекстЗначенияСвойств = "";
	ТекстСоединений = "";
	Для Каждого Свойство Из СоставСвойств Цикл
		
		ТекстСвойства =
		",
		|	ЕСТЬNULL(Характеристики[ИмяСвойства].Значение, &ПустоеСвойство) КАК [ИмяСвойства]";
		ТекстСвойства = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСвойства, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстЗначенияСвойств = ТекстЗначенияСвойств + ТекстСвойства;
		
		ТекстСоединения =
		"
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияСвойствХарактеристики КАК Характеристики[ИмяСвойства]
		|		ПО Характеристики[ИмяСвойства].Свойство = ВТ_СоставСвойствВидаНоменклатуры.[ИмяСвойства]";
		ТекстСоединения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстСоединения, Новый Структура("ИмяСвойства", Свойство.Имя));
		ТекстСоединений = ТекстСоединений + ТекстСоединения;
		
	КонецЦикла;
	ТекстЗначенияСвойств = Сред(ТекстЗначенияСвойств, 2);
	
	ВставляемыеЗначения = Новый Структура("ТекстЗначенияСвойств, ТекстСоединений", ТекстЗначенияСвойств, ТекстСоединений);
	ПодзапросРезультат = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ПодзапросРезультат, ВставляемыеЗначения);
	
	// Компоновка итогового текста запроса
	ТекстЗапроса = ""
	+ ПодзапросСоставСвойств + РазделительПодзапросов
	+ ПодзапросЗначенияСвойств + РазделительПодзапросов
	+ ПодзапросРезультат;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция получает свойства, входящие в характеристики номенклатуры.
//
// Параметры:
//
// Возвращаемое значение:
//  Массив свойств.
//
Функция ПолучитьСвойстваХарактеристикНоменклатуры()
	
	МассивСвойствХарактеристикНоменклатуры = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ГруппаХарактеристикиНоменклатуры", Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_ХарактеристикиНоменклатуры);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК Свойство
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Родитель = &ГруппаХарактеристикиНоменклатуры
		|	И НЕ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
		|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл		
			МассивСвойствХарактеристикНоменклатуры.Добавить(ВыборкаДетальныеЗаписи.Свойство);			
		КонецЦикла; 		
	КонецЕсли;	
	
	Возврат МассивСвойствХарактеристикНоменклатуры;
	
КонецФункции

#КонецОбласти

#Область ДинамическоеСозданиеЭлементовФорм

// Размещает на формах команды вызова дополнительных сервисов заполнения
//
// Параметры:
//   Форма - УправляемаяФорма - создаваемая форма.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - признак использования стандартных (системных) обработчиков.
//
Процедура СервисыЗаполненияДокументов(Форма, Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") Тогда
		Возврат;
	КонецЕсли;
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	
	ИмяФормы = Форма.ИмяФормы;
	
	// Вспомогательная коллекция для перечисления типов объектов, использующих сервисы,
	// а также мест размещения сервисов в них по умолчанию.
	НаборРазмещенийСервисов = Новый ТаблицаЗначений;
	НаборРазмещенийСервисов.Колонки.Добавить("ТипОбъекта");
	НаборРазмещенийСервисов.Колонки.Добавить("РазмещениеПоУмолчанию");
	НаборРазмещенийСервисов.Колонки.Добавить("ИмяМетодаМенеджераОбъекта");
	
	Если ИмяФормы = "Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента" Тогда
		// Документ ПроизводствоБезЗаказа
		СтрокаРазмещения = НаборРазмещенийСервисов.Добавить();
		СтрокаРазмещения.ТипОбъекта = Тип("ДокументОбъект.ПроизводствоБезЗаказа");
		СтрокаРазмещения.РазмещениеПоУмолчанию = "Форма.Элементы.ВыходныеИзделия.КоманднаяПанель";
		СтрокаРазмещения.ИмяМетодаМенеджераОбъекта = "ДобавитьКомандыВызоваСервисаВыпускПакетов"; 
		
		СтрокаРазмещения = НаборРазмещенийСервисов.Добавить();
		СтрокаРазмещения.ТипОбъекта = Тип("ДокументОбъект.ПроизводствоБезЗаказа");
		СтрокаРазмещения.РазмещениеПоУмолчанию = "Форма.Элементы.МатериалыИРаботы.КоманднаяПанель";
		СтрокаРазмещения.ИмяМетодаМенеджераОбъекта = "ДобавитьКомандыВызоваСервисаПодборПакетов"; 
		
	ИначеЕсли ИмяФормы = "Документ.ДвижениеПродукцииИМатериалов.Форма.ФормаДокумента" Тогда
		// Документ ДвижениеПродукцииИМатериалов
		СтрокаРазмещения = НаборРазмещенийСервисов.Добавить();
		СтрокаРазмещения.ТипОбъекта = Тип("ДокументОбъект.ДвижениеПродукцииИМатериалов");
		СтрокаРазмещения.РазмещениеПоУмолчанию = "Форма.Элементы.Товары.КоманднаяПанель";
		СтрокаРазмещения.ИмяМетодаМенеджераОбъекта = "ДобавитьКомандыВызоваСервисаПодборПакетов"; 
		
	ИначеЕсли ИмяФормы = "Документ.РеализацияТоваровУслуг.Форма.ФормаДокумента" Тогда
		// Документ РеализацияТоваровУслуг
		СтрокаРазмещения = НаборРазмещенийСервисов.Добавить();
		СтрокаРазмещения.ТипОбъекта = Тип("ДокументОбъект.РеализацияТоваровУслуг");
		СтрокаРазмещения.РазмещениеПоУмолчанию = "Форма.Элементы.Товары.КоманднаяПанель";
		СтрокаРазмещения.ИмяМетодаМенеджераОбъекта = "ДобавитьКомандыВызоваСервисаПодборПакетов"; 
		
	ИначеЕсли ИмяФормы = "Документ.ЗаказПереработчику.Форма.ФормаДокумента" Тогда
		// Документ ЗаказПереработчику
		СтрокаРазмещения = НаборРазмещенийСервисов.Добавить();
		СтрокаРазмещения.ТипОбъекта = Тип("ДокументОбъект.ЗаказПереработчику");
		СтрокаРазмещения.РазмещениеПоУмолчанию = "Форма.Элементы.Материалы.КоманднаяПанель";
		СтрокаРазмещения.ИмяМетодаМенеджераОбъекта = "ДобавитьКомандыВызоваСервисаПодборПакетов"; 
		
	КонецЕсли;
	
	ТекущееРазмещениеСервисов = НаборРазмещенийСервисов.НайтиСтроки(Новый Структура("ТипОбъекта", ТипЗнч(ДокументОбъект)));
	Для каждого СтрокаТекущегоРазмещенияСервисов из ТекущееРазмещениеСервисов Цикл
		РазмещениеПоУмолчанию = Вычислить(СтрокаТекущегоРазмещенияСервисов.РазмещениеПоУмолчанию);
		LES_СервисыЗаполненияТоваров.ПриСозданииНаСервере(Форма, РазмещениеПоУмолчанию, СтрокаТекущегоРазмещенияСервисов.ИмяМетодаМенеджераОбъекта);
	КонецЦикла;
	
КонецПроцедуры

// Размещает на форме документа "Приобретение товаров и услуг" дополнительные элементы.
//
// Параметры:
//   Форма - УправляемаяФорма - создаваемая форма.
//   Отказ - Булево - признак отказа от создания формы.
//   СтандартнаяОбработка - Булево - признак использования стандартных (системных) обработчиков.
//
Процедура ПриСозданииФормыДокумента_ПриобретениеТоваровУслуг(Форма, Отказ, СтандартнаяОбработка)
	
#Область Реквизиты

	ГруппаДанныеПоставщика = Форма.Элементы.Добавить("СтраницаДанныеПоставщика", Тип("ГруппаФормы"), Форма.Элементы.ГруппаСтраницы);
	ГруппаДанныеПоставщика.Заголовок = "Данные поставщика";

	ТаблицаФормы = Форма.Элементы.Добавить("ДанныеПоставщика", Тип("ТаблицаФормы"), ГруппаДанныеПоставщика);
	ТаблицаФормы.ПутьКДанным	 = "Объект.LES_ДанныеПоставщика";
	ТаблицаФормы.Видимость = Истина;
	ТаблицаФормы.Доступность  = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("НомерСтроки", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.ПутьКДанным	= "Объект.LES_ДанныеПоставщика.НомерСтроки";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.Видимость = Истина;
	НовыйЭлемент.Доступность = Истина;	
	
	НовыйЭлемент = Форма.Элементы.Добавить("Номенклатура", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.ПутьКДанным = "Объект.LES_ДанныеПоставщика.Номенклатура.";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Видимость = Истина;
	НовыйЭлемент.Доступность = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("Характеристака", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.ПутьКДанным	= "Объект.LES_ДанныеПоставщика.Характеристика";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Видимость = Истина;
	НовыйЭлемент.Доступность = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("Количество", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.ПутьКДанным	= "Объект.LES_ДанныеПоставщика.Количество";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Видимость = Истина;
	НовыйЭлемент.Доступность = Истина;
	
	НовыйЭлемент = Форма.Элементы.Добавить("ЕдиницаИзмерения", Тип("ПолеФормы"), ТаблицаФормы);
	НовыйЭлемент.ПутьКДанным = "Объект.LES_ДанныеПоставщика.Номенклатура.ЕдиницаИзмерения";
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.Заголовок = "Ед. изм.";
	НовыйЭлемент.Видимость = Истина;
	НовыйЭлемент.Доступность = Истина;
	
#КонецОбласти 

#Область Команды

	НоваяКоманда = Форма.Команды.Добавить("LES_ЗаполнитьПоДаннымКонтрольногоЗамера");
	НоваяКоманда.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	НоваяКоманда.Заголовок = "Заполнить по данным контрольного замера";
	
	ЭлементКнопка = Форма.Элементы.Добавить(
		"LES_ЗаполнитьПоДаннымКонтрольногоЗамера",
		Тип("КнопкаФормы"),
		Форма.Элементы.Товары.КоманднаяПанель.ПодчиненныеЭлементы.ГруппаТоварыПодобратьТовары.ПодчиненныеЭлементы.ТоварыЗаполнить);
	ЭлементКнопка.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	ЭлементКнопка.ИмяКоманды = "LES_ЗаполнитьПоДаннымКонтрольногоЗамера";
	
#КонецОбласти 
	
КонецПроцедуры
	
#КонецОбласти 

#Область ОбработчикиПодписокНаСобытия

#Область ЗаполнениеДокументов

Процедура ПриобретениеТоваровУслугПриОбработкеЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.LES_КонтрольныйЗамер") Тогда
		ЗаполнитьПриобретениеТоваровУслугНаОснованииКонтрольногоЗамера(Источник, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.LES_ВесовойЗамер") Тогда
		ЗаполнитьПриобретениеТоваровУслугНаОснованииВесовогоЗамера(Источник, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.LES_АктОбмера") Тогда
		ЗаполнитьПриобретениеТоваровУслугНаОснованииАктаОбмера(Источник, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриходныйОрдерНаТоварыПриОбработкеЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) 
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.LES_АктОбмера") Тогда
		ЗаполнитьПриходныйОрдерНаТоварыНаОснованииАктаОбмера(Источник, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры 

Процедура РеализацияТоваровУслугПриОбработкеЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.LES_АктОбмера") Тогда
		ЗаполнитьРеализациюТоваровУслугНаОснованииАктаОбмера(Источник, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти 

#Область ПроведениеДокументов

Процедура ПриобретениеТоваровУслугПриОбработкеПроведения(Источник, Отказ, РежимПроведения)

	ПриобретениеТоваровУслугДвижениеПоРегиструЗакупкиПоДаннымПоставщиков(Источник, Отказ, РежимПроведения);
	
	Если ПолучитьФункциональнуюОпцию("LES_ИспользоватьУсловияКонтрактов") Тогда
		ПриобретениеТоваровУслугДвижениеПоРегиструПоставкиПоКонтрактам(Источник, Отказ, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

Процедура РеализацияТоваровУслугПриОбработкеПроведения(Источник, Отказ, РежимПроведения)
	
	Если ПолучитьФункциональнуюОпцию("LES_ИспользоватьУсловияКонтрактов") Тогда
		РеализацияТоваровУслугДвижениеПоРегиструОтгрузкиПоКонтрактам(Источник, Отказ, РежимПроведения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область Движения

Процедура ПриобретениеТоваровУслугДвижениеПоРегиструЗакупкиПоДаннымПоставщиков(ДокументОбъект, Отказ, РежимПроведения)
	
	ТаблицаДвижений = ПолучитьТаблицуДвижений(ДокументОбъект);
		
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;
	
	ЗакупкиПоДаннымПоставщиков = ДокументОбъект.Движения.LES_ЗакупкиПоДаннымПоставщиков;
	ЗакупкиПоДаннымПоставщиков.Записывать = Истина;
	ЗакупкиПоДаннымПоставщиков.Загрузить(ТаблицаДвижений);

КонецПроцедуры

Функция ПолучитьТаблицуДвижений(ДокументОбъект)
	
	ТаблицаДвижений = ДокументОбъект.LES_ДанныеПоставщика.Выгрузить();
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.ЗаполнитьЗначения(ДокументОбъект.Дата, "Период");
	
	Возврат ТаблицаДвижений;
	
КонецФункции

Процедура ПриобретениеТоваровУслугДвижениеПоРегиструПоставкиПоКонтрактам(ДокументОбъект, Отказ, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаДвижений = ПолучитьТаблицуДвиженийПоКонтрактам(ДокументОбъект);
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда 
	
		Возврат;
		
	КонецЕсли;

	ПоставкиПоКонтрактам = ДокументОбъект.Движения.LES_ПоставкиПоКонтрактам;
	ПоставкиПоКонтрактам.Записывать = Истина;
	Для Каждого Стр из ТаблицаДвижений Цикл
		 Движение = ПоставкиПоКонтрактам.Добавить();
		 ЗаполнитьЗначенияСвойств(Движение, Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура РеализацияТоваровУслугДвижениеПоРегиструОтгрузкиПоКонтрактам(ДокументОбъект, Отказ, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаДвижений = ПолучитьТаблицуДвиженийПоКонтрактам(ДокументОбъект);
	
	Если Отказ ИЛИ ТаблицаДвижений.Количество() = 0 Тогда
	
		Возврат;
		
	КонецЕсли;

	ОтгрузкиПоКонтрактам = ДокументОбъект.Движения.LES_ОтгрузкиПоКонтрактам;
	ОтгрузкиПоКонтрактам.Записывать = Истина;
	ОтгрузкиПоКонтрактам.Загрузить(ТаблицаДвижений);
	
КонецПроцедуры

Функция ПолучитьТаблицуДвиженийПоКонтрактам(ДокументОбъект)
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	
	ЗапросУК = Новый Запрос;
	ЗапросУК.Текст = 
	"ВЫБРАТЬ
	|	LES_СрокиДействияКонтрактов.Контракт КАК Контракт
	|ИЗ
	|	РегистрСведений.LES_СрокиДействияКонтрактов КАК LES_СрокиДействияКонтрактов
	|ГДЕ
	|	&Дата МЕЖДУ LES_СрокиДействияКонтрактов.НачалоДействия И LES_СрокиДействияКонтрактов.ОкончаниеДействия
	|	И LES_СрокиДействияКонтрактов.Договор = &Договор";
	
	ЗапросУК.УстановитьПараметр("Дата", ДокументОбъект.Дата);
	ЗапросУК.УстановитьПараметр("Договор", ДокументОбъект.Договор);
	
	ВыборкаДокументы = ЗапросУК.Выполнить().Выбрать();
	
	СтруктураХарактеристик = Новый Структура();
	СтруктураХарактеристик.Вставить("Порода", Справочники.LES_ПородыДревесины.ПустаяСсылка()); 
	СтруктураХарактеристик.Вставить("Сорт", Справочники.LES_СортаПиломатериалов.ПустаяСсылка());
	СтруктураХарактеристик.Вставить("ДлинаФакт", 0);  
	СтруктураХарактеристик.Вставить("ШиринаФакт", 0); 
	СтруктураХарактеристик.Вставить("ТолщинаФакт", 0);
	СтруктураХарактеристик.Вставить("Влажность", Справочники.LES_ВлажностиДревесины.ПустаяСсылка());
	
	ТаблицаДвиженийВыборка = Новый ТаблицаЗначений;
	ТаблицаДвиженийВыборка.Колонки.Добавить("Организация");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Партнер");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Контрагент");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Договор");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Контракт");
	ТаблицаДвиженийВыборка.Колонки.Добавить("АналитикаУчетаКонтракта");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Номенклатура");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Характеристика");
	ТаблицаДвиженийВыборка.Колонки.Добавить("Количество"); 
	
	Пока ВыборкаДокументы.Следующий() Цикл	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	LES_УсловияКонтрактов.Организация КАК Организация,
		|	LES_УсловияКонтрактов.Партнер КАК Партнер,
		|	LES_УсловияКонтрактов.Контрагент КАК Контрагент,
		|	LES_УсловияКонтрактов.Договор КАК Договор,
		|	LES_УсловияКонтрактов.Регистратор КАК Контракт,
		|	LES_УсловияКонтрактов.КлючАналитикиУчетаКонтрактов КАК АналитикаУчетаКонтракта
		|ИЗ
		|	РегистрСведений.LES_УсловияКонтрактов КАК LES_УсловияКонтрактов
		|ГДЕ
		|	LES_УсловияКонтрактов.Регистратор = &Ссылка
		|	И LES_УсловияКонтрактов.ВидКонтракта = &ВидКонтракта";
		
		Запрос.УстановитьПараметр("Ссылка", ВыборкаДокументы.Контракт);
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
			Запрос.УстановитьПараметр("ВидКонтракта", Перечисления.LES_ВидыКонтрактов.Поставка);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда 
			Запрос.УстановитьПараметр("ВидКонтракта", Перечисления.LES_ВидыКонтрактов.Отгрузка);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда 
			Продолжить;
		КонецЕсли;
		
		Для каждого Стр из ДокументОбъект.Товары Цикл
			
			Характеристика = ЗначенияСвойствПиломатериаловПоХарактеристике(Стр.Характеристика);
			ЗаполнитьЗначенияСвойств(СтруктураХарактеристик, Характеристика);
			Найдено = Истина;
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если (НЕ ЗначениеЗаполнено(СтруктураХарактеристик.Порода) ИЛИ СтруктураХарактеристик.Порода = ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.Порода) 
					И (НЕ ЗначениеЗаполнено(СтруктураХарактеристик.Сорт) ИЛИ ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.ГруппаСортов.СортаПиломатериалов.Найти(СтруктураХарактеристик.Сорт, "СортПиломатериала") <> Неопределено)
					И (НЕ ЗначениеЗаполнено(СтруктураХарактеристик.Влажность) ИЛИ ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.ГруппыВлажностиДревесины.ВлажностиДревесины.Найти(СтруктураХарактеристик.Влажность, "ВлажностьДревесины") <> Неопределено)
					И (НЕ ЗначениеЗаполнено(СтруктураХарактеристик.ШиринаФакт) ИЛИ СтруктураХарактеристик.ШиринаФакт = ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.Ширина)
					И (НЕ ЗначениеЗаполнено(СтруктураХарактеристик.ТолщинаФакт) ИЛИ СтруктураХарактеристик.ТолщинаФакт = ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.Толщина)
					И (НЕ ЗначениеЗаполнено(СтруктураХарактеристик.ДлинаФакт) ИЛИ СтруктураХарактеристик.ДлинаФакт <= ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.ДиапазонДлин.До И СтруктураХарактеристик.ДлинаФакт >= ВыборкаДетальныеЗаписи.АналитикаУчетаКонтракта.ДиапазонДлин.От)
					Тогда
					НоваяСтрока = ТаблицаДвиженийВыборка.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					НоваяСтрока.Номенклатура = Стр.Номенклатура;
					НоваяСтрока.Характеристика = Стр.Характеристика;
					НоваяСтрока.Количество = Стр.Количество;
					Найдено = Истина;
					Прервать;
				Иначе 
					Найдено = Ложь;    
				КонецЕсли;				
			КонецЦикла;
			Если Не Найдено Тогда
				НоваяСтрока = ТаблицаДвиженийВыборка.Добавить();
				НоваяСтрока.Организация = ДокументОбъект.Организация;
				НоваяСтрока.Партнер = ДокументОбъект.Партнер;
				НоваяСтрока.Контрагент = ДокументОбъект.Контрагент;
				НоваяСтрока.Договор = ДокументОбъект.Договор;
				НоваяСтрока.Контракт = ВыборкаДетальныеЗаписи.Контракт;
				НоваяСтрока.АналитикаУчетаКонтракта = Справочники.LES_КлючиАналитикиУчетаКонтрактов.НеСоответствуетУсловиямКонтракта;
				НоваяСтрока.Номенклатура = Стр.Номенклатура;
				НоваяСтрока.Характеристика = Стр.Характеристика;
				НоваяСтрока.Количество = Стр.Количество;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаДвижений = ТаблицаДвиженийВыборка.Скопировать(); 
		ТаблицаДвижений.Колонки.Добавить("Период");
		ТаблицаДвижений.ЗаполнитьЗначения(ДокументОбъект.Дата, "Период");
		
	КонецЦикла;	
	
	Возврат ТаблицаДвижений;

КонецФункции

#КонецОбласти 

#Область КонтрольныйЗамер

// Функции, выполняющая распределение общего объема пропорционально контрольному замеру
//
// Параметры:
//   ТаблицаКонтрольногоЗамера - ТаблицаЗначений - таблица, содержащая данные контрольного замера
//                 Содержит колонки: Номенклатура, Порода, Сорт, Длина, Диаметр, Объем
//   ОбщийОбъем  - Число - общий объем для распределения
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица, содержащая результат распределения
//	 			   Содержит колонки: Номенклатура, Порода, Сорт, Длина, Диаметр, Объем		
//
Функция РаспределитьПропорциональноКонтрольномуЗамеру(Знач ТаблицаКонтрольногоЗамера, ОбщийОбъем) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Порода");
	Результат.Колонки.Добавить("Сорт");
	Результат.Колонки.Добавить("Длина");
	Результат.Колонки.Добавить("Диаметр");
	Результат.Колонки.Добавить("Объем");

	ТаблицаКонтрольногоЗамера.Свернуть("Номенклатура, Порода, Сорт, Длина, Диаметр", "Объем");
	
	ОбъемЗамера = ТаблицаКонтрольногоЗамера.Итог("Объем");

	Если НЕ ОбъемЗамера = 0 Тогда
		
		Коэффициент = ОбщийОбъем / ОбъемЗамера;
		
		Распределено = 0;
		
		Для каждого ТекущаяСтрока Из ТаблицаКонтрольногоЗамера Цикл
			
			НоваяСтрока = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
			
			НоваяСтрока.Объем = Окр(НоваяСтрока.Объем * Коэффициент, 3);
			Распределено = Распределено + НоваяСтрока.Объем;
			
		КонецЦикла; 
		
		Если НЕ Распределено = ОбщийОбъем Тогда
			
			Результат[Результат.Количество() - 1].Объем = Результат[Результат.Количество() - 1].Объем + (ОбщийОбъем - Распределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функции, выполняющая преобразование таблицы вида: "Номенклатура, Порода, Сорт, Длина, Диаметр, Объем"
//	к таблице вида: "Номенклатура, Характеристика, КоличествоУпаковок"
//
// Параметры:
//   ИсходнаяТаблица - ТаблицаЗначений - исходная таблица для преобразования 
//                 Содержит колонки: Номенклатура, Порода, Сорт, Длина, Диаметр, Объем
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая результат преобразования
//	 			   Содержит колонки: Номенклатура, Характеристика, КоличествоУпаковок, Количество		
//
Функция ПреобразоватьТаблицу(Знач ИсходнаяТаблица) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("Характеристика");
	Результат.Колонки.Добавить("КоличествоУпаковок");
	Результат.Колонки.Добавить("Количество");

	ИсходнаяТаблица.Свернуть("Номенклатура, Порода, Сорт, Длина, Диаметр", "Объем");
			
	Для каждого ТекущаяСтрока Из ИсходнаяТаблица Цикл
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Номенклатура = ТекущаяСтрока.Номенклатура;
		
		Параметры = Новый Структура;   			
		Параметры.Вставить("Порода", ТекущаяСтрока.Порода);
		Параметры.Вставить("Сорт", ТекущаяСтрока.Сорт);
		Параметры.Вставить("Длина", ТекущаяСтрока.Длина);
		Параметры.Вставить("Диаметр", ТекущаяСтрока.Диаметр);

		НоваяСтрока.Характеристика = LES_ЛеспромСервер.ХарактеристикаКруглогоЛесаПоЗначениямСвойств(ТекущаяСтрока.Номенклатура, Параметры);
		
		НоваяСтрока.КоличествоУпаковок = ТекущаяСтрока.Объем;
		НоваяСтрока.Количество = ТекущаяСтрока.Объем;
				
	КонецЦикла; 
	
	Результат.Свернуть("Номенклатура, Характеристика", "КоличествоУпаковок, Количество");
		
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти 

#Область ЗаполнениеПриобретенияТоваровИУслуг

Процедура ЗаполнитьПриобретениеТоваровУслугНаОснованииКонтрольногоЗамера(Источник, ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	LES_КонтрольныйЗамер.Ссылка КАК LES_ДокументЗамера,
		|	LES_КонтрольныйЗамер.Организация КАК Организация,
		|	LES_КонтрольныйЗамер.Партнер КАК Партнер,
		|	LES_КонтрольныйЗамер.Контрагент КАК Контрагент,
		|	LES_КонтрольныйЗамер.Склад КАК Склад,
		|	LES_КонтрольныйЗамер.Расчет.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Порода КАК Порода,
		|		Сорт КАК Сорт,
		|		Длина КАК Длина,
		|		Диаметр КАК Диаметр,
		|		Объем КАК Объем
		|	) КАК Расчет
		|ИЗ
		|	Документ.LES_КонтрольныйЗамер КАК LES_КонтрольныйЗамер
		|ГДЕ
		|	LES_КонтрольныйЗамер.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаШапка = РезультатЗапроса.Выбрать();
		
		ВыборкаШапка.Следующий();
		ЗаполнитьЗначенияСвойств(Источник, ВыборкаШапка);
		
		ТаблицаРасчет = ВыборкаШапка.Расчет.Выгрузить();
		ТаблицаТовары = ПреобразоватьТаблицу(ТаблицаРасчет);
		Источник.Товары.Загрузить(ТаблицаТовары);
		
	КонецЕсли;
	
	Источник.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	ВыполнитьТиповуюОбработкуТабличнойЧастиТоварыДляОбъекта(Источник);
	
КонецПроцедуры
	
// Функция возвращает таблицу "Товары" для документа "Приобретение товаров и услуг"
// при заполнении его по данным контрольного замера
//
// Параметры:
//   КонтрольныйЗамерСсылка  - ДокументСсылка.LES_КонтрольныйЗамер - ссылка на документ "Контрольный замер",
//                 на основанни которого заполняется ПТУ
//   ОбщийОбъем  - Число - общий объем для распределения
//					(итог по колонке "Количество" ТЧ "Данные поставщика" документа ПТУ)
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица, содержащая колонки Номенклатура, Характеристика, КоличествоУпаковок, Количество
//
Функция ПолучитьТаблицуТовары(КонтрольныйЗамерСсылка, ОбщийОбъем) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Ссылка КАК Ссылка,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.НомерСтроки КАК НомерСтроки,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Номенклатура КАК Номенклатура,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Порода КАК Порода,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Сорт КАК Сорт,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Длина КАК Длина,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Диаметр КАК Диаметр,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.КоличествоБревен КАК КоличествоБревен,
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Объем КАК Объем
		|ИЗ
		|	Документ.LES_КонтрольныйЗамер.КонтрольныйЗамер КАК LES_КонтрольныйЗамерКонтрольныйЗамер
		|ГДЕ
		|	LES_КонтрольныйЗамерКонтрольныйЗамер.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", КонтрольныйЗамерСсылка);
	
	ТаблицаКонтрольныйЗамер = Запрос.Выполнить().Выгрузить();	
	ТаблицаРасчет = LES_ЛеспромСервер.РаспределитьПропорциональноКонтрольномуЗамеру(ТаблицаКонтрольныйЗамер, ОбщийОбъем);
	ТаблицаТовары = LES_ЛеспромСервер.ПреобразоватьТаблицу(ТаблицаРасчет);
		
	Возврат ТаблицаТовары;
	
КонецФункции

Процедура ВыполнитьТиповуюОбработкуТабличнойЧастиТовары(Объект) Экспорт
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
	
		ВыполнитьТиповуюОбработкуСтрокиТабличнойЧастиТовары(ТекущаяСтрока, Объект);	
	
	КонецЦикла; 
		
КонецПроцедуры

Процедура ВыполнитьТиповуюОбработкуСтрокиТабличнойЧастиТовары(ТекущаяСтрока, Объект)
		
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриобретениеТоваровУслуг));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;

	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАлкогольнаяПродукция", Новый Структура("Номенклатура", "АлкогольнаяПродукция"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьПризнакБезВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	СтруктураДействий.Вставить("ПересчитатьСуммуСверхЗаказа", Новый Структура("РеализацияПоступлениеПоЗаказу, ТребуетсяЗалогЗаТару",
		Объект.ПоступлениеПоЗаказам, Объект.ТребуетсяЗалогЗаТару));
		
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	Если ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара") Или
		ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Набор")
			Или ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		ТекущаяСтрока.СписатьНаРасходы = Ложь;
		ТекущаяСтрока.СтатьяРасходов = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
		ТекущаяСтрока.АналитикаРасходов = Неопределено;
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	ИначеЕсли ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
		ТекущаяСтрока.СписатьНаРасходы = Истина;
	КонецЕсли;
	
	Если НЕ ТекущаяСтрока.ВедетсяУчетПоГТД Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыполнитьТиповуюОбработкуТабличнойЧастиТоварыДляОбъекта(Объект) Экспорт
	
	Для каждого ТекущаяСтрока Из Объект.Товары Цикл
	
		ВыполнитьТиповуюОбработкуСтрокиТабличнойЧастиТоварыДляОбъекта(ТекущаяСтрока, Объект);	
	
	КонецЦикла; 
		
КонецПроцедуры

Процедура ВыполнитьТиповуюОбработкуСтрокиТабличнойЧастиТоварыДляОбъекта(ТекущаяСтрока, Объект)
		
	ИспользоватьСоглашенияСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСПоставщиками");
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Объект.Склад);
	СтруктураПересчетаСуммы = ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПриобретениеТоваровУслуг));
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;

	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПроверитьСтатьюАналитикуРасходов", ТекущаяСтрока.Номенклатура);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ИспользоватьСоглашенияСПоставщиками И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ТекущаяСтрока.Склад = Объект.Склад;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	НДСпоСтавкам4и2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "НДСпоСтавкам4и2");
	СтруктураПересчетаСуммы.Вставить("НДСпоСтавкам4и2", НДСпоСтавкам4и2);
	
	Возврат СтруктураПересчетаСуммы;
	
КонецФункции

Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура(
		"БезВозвратнойТары",
		"Сумма,СуммаНДС,СуммаСНДС,СуммаРучнойСкидки");
	
КонецФункции

Процедура ЗаполнитьПриобретениеТоваровУслугНаОснованииВесовогоЗамера(Источник, ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	LES_ВесовойЗамер.Ссылка КАК LES_ДокументЗамера,
		|	LES_ВесовойЗамер.ВерсияДанных КАК ВерсияДанных,
		|	LES_ВесовойЗамер.ПометкаУдаления КАК ПометкаУдаления,		
		|	LES_ВесовойЗамер.Партнер КАК Партнер,
		|	LES_ВесовойЗамер.Склад КАК Склад,
		|	LES_ВесовойЗамер.Контрагент КАК Контрагент,
		|	LES_ВесовойЗамер.Организация КАК Организация,		
		|	LES_ВесовойЗамер.НомерНакладной КАК НомерНакладной,		
		|	LES_ВесовойЗамер.ДатаНакладной КАК ДатаНакладной,
		|	LES_ВесовойЗамер.Товары.(		
		|		Номенклатура КАК Номенклатура,
		|		Порода КАК Порода,
		|		Сорт КАК Сорт,
		|		Длина КАК Длина,
		|		Диаметр КАК Диаметр,
		|		Влажность КАК Влажность,
		|		Объем КАК Объем,
		|		Вес КАК Вес
		|	) КАК Товары
		|ИЗ
		|	Документ.LES_ВесовойЗамер КАК LES_ВесовойЗамер
		|ГДЕ
		|	LES_ВесовойЗамер.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаШапка = РезультатЗапроса.Выбрать();
		
		ВыборкаШапка.Следующий();
		ЗаполнитьЗначенияСвойств(Источник, ВыборкаШапка);
		
		ТаблицаРасчет = ВыборкаШапка.Товары.Выгрузить();
		ТаблицаТовары = ПреобразоватьТаблицу(ТаблицаРасчет);
		Источник.Товары.Загрузить(ТаблицаТовары);
		Источник.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Источник);
		ПересчитатьСуммуСУчетомРучнойСкидки = Новый Структура("Очищать", Ложь);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", ПересчитатьСуммуСУчетомРучнойСкидки);
		
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦеныПоставщика");
		ПараметрыЗаполнения.Вставить("Дата", Источник.Дата);
		ПараметрыЗаполнения.Вставить("Валюта", Источник.Валюта);
		ПараметрыЗаполнения.Вставить("Соглашение", Источник.Соглашение);
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Источник.НалогообложениеНДС);
	
		ЦеныРассчитаны = ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(
		Источник.Товары,
		Неопределено,
		ПараметрыЗаполнения,
		СтруктураДействий);
		
		СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Источник.Склад, Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументовЗакупки(Источник.Склад), Источник.Товары, Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ЗаполнитьПриобретениеТоваровУслугНаОснованииАктаОбмера(Источник, ДанныеЗаполнения)
	
	//ШАПКА
	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения, ,"Номер, Дата");
	Источник.Дата = ТекущаяДата();
	Источник.LES_ДокументЗамера = ДанныеЗаполнения;
	Источник.ЗаполнитьУсловияЗакупокПоУмолчанию(Ложь);
	
	//Товары
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(ДанныеЗаполнения);
	Товары = ПолучитьТаблицуТоварыПоАктамОбмера(МассивОбъектов);
	
	Если Товары.Количество() Тогда
		
		Для Каждого СтрокаТовары Из Товары Цикл
			СтрокаТоварыПТУ = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыПТУ, СтрокаТовары);
			СтрокаТоварыПТУ.Количество = СтрокаТовары.Объем;
			СтрокаТоварыПТУ.КоличествоУпаковок = СтрокаТовары.Объем;
		КонецЦикла;
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Источник);
		
		ПересчитатьСуммуСУчетомРучнойСкидки = Новый Структура("Очищать", Ложь);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", ПересчитатьСуммуСУчетомРучнойСкидки);
		
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦеныПоставщика");
		ПараметрыЗаполнения.Вставить("Дата", Источник.Дата);
		ПараметрыЗаполнения.Вставить("Валюта", Источник.Валюта);
		ПараметрыЗаполнения.Вставить("Соглашение", Источник.Соглашение);
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Источник.НалогообложениеНДС);

		ЦеныРассчитаны = ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(
		Источник.Товары,
		Неопределено,
		ПараметрыЗаполнения,
		СтруктураДействий);

	КонецЕсли;
			
КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеДокументаПриходныйОрдерНаТовары

Процедура ЗаполнитьПриходныйОрдерНаТоварыНаОснованииАктаОбмера(Источник, ДанныеЗаполнения)
	
	//ШАПКА
	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения, ,"Номер, Дата");
	Источник.Дата 				= ТекущаяДата();
	Источник.СкладскаяОперация = Перечисления.СкладскиеОперации.ПриемкаОтПоставщика;
	Источник.Распоряжение 		= ДанныеЗаполнения;
	Источник.Отправитель		= ДанныеЗаполнения.Партнер;
	Источник.НомерВходящегоДокумента = ДанныеЗаполнения.НомерНакладной;
	Источник.ДатаВходящегоДокумента = ДанныеЗаполнения.ДатаНакладной;
	Источник.Статус = Перечисления.СтатусыПриходныхОрдеров.КПоступлению;
	Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	
	//Товары
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(ДанныеЗаполнения);
	Товары = ПолучитьТаблицуТоварыПоАктамОбмера(МассивОбъектов);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		СтрокаТоварыОрдер 					= Источник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТоварыОрдер, СтрокаТовары);
		СтрокаТоварыОрдер.Количество 			= СтрокаТовары.Объем;
		СтрокаТоварыОрдер.КоличествоУпаковок 	= СтрокаТовары.Объем;
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеДокументаРеализацияТоваровУслуг

Процедура ЗаполнитьРеализациюТоваровУслугНаОснованииАктаОбмера(Источник, ДанныеЗаполнения)
	
	//ШАПКА
	ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения, ,"Номер, Дата");
	Источник.Дата = ТекущаяДата();
	Источник.LES_ДокументЗамера = ДанныеЗаполнения;
	Источник.ЗаполнитьУсловияПродажПоУмолчанию();
	
	//Товары
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(ДанныеЗаполнения);
	Товары = ПолучитьТаблицуТоварыПоАктамОбмера(МассивОбъектов);
	
	Если Товары.Количество() Тогда
		
		Для Каждого СтрокаТовары Из Товары Цикл
			СтрокаТоварыРТУ = Источник.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТоварыРТУ, СтрокаТовары);
			СтрокаТоварыРТУ.Количество = СтрокаТовары.Объем;
			СтрокаТоварыРТУ.КоличествоУпаковок = СтрокаТовары.Объем;
		КонецЦикла;
	
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Источник);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
		СтруктураДействий.Вставить("ОчиститьСуммуВзаиморасчетов", Неопределено);
	
		ПараметрыЗаполнения = Новый Структура();
		ПараметрыЗаполнения.Вставить("Дата", Источник.Дата);
		ПараметрыЗаполнения.Вставить("Валюта", Источник.Валюта);
		ПараметрыЗаполнения.Вставить("Соглашение", Источник.Соглашение);
		ПараметрыЗаполнения.Вставить("Организация", Источник.Организация);
		ПараметрыЗаполнения.Вставить("РасчитыватьНаборы", Истина);
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены, СрокПоставки");
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС",  Источник.НалогообложениеНДС);
	
		ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		Источник.Товары, // Табличная часть
		Неопределено, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

Функция ПолучитьТаблицуТоварыПоАктамОбмера(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	LES_АктОбмераГеометрическийОбмер.Номенклатура,
	|	LES_АктОбмераГеометрическийОбмер.Порода,
	|	LES_АктОбмераГеометрическийОбмер.Сорт,
	|	LES_АктОбмераГеометрическийОбмер.Ширина,
	|	LES_АктОбмераГеометрическийОбмер.Высота,
	|	LES_АктОбмераГеометрическийОбмер.КоэффициентПолнодревесности,
	|	LES_АктОбмераГеометрическийОбмер.Объем,
	|	LES_АктОбмераГеометрическийОбмер.Длина,
	|	LES_АктОбмераГеометрическийОбмер.НомерСтроки
	|ИЗ
	|	Документ.LES_АктОбмера.ГеометрическийОбмер КАК LES_АктОбмераГеометрическийОбмер
	|ГДЕ
	|	LES_АктОбмераГеометрическийОбмер.Ссылка В(&СписокОбъектов)";
	Запрос.УстановитьПараметр("СписокОбъектов", МассивОбъектов);
	
	РезультатЗапросаПоГеометрическомуОбмеру = Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	LES_АктОбмераПоштучныйОбмер.Номенклатура,
	|	LES_АктОбмераПоштучныйОбмер.Порода,
	|	LES_АктОбмераПоштучныйОбмер.Сорт,
	|	LES_АктОбмераПоштучныйОбмер.Объем,
	|	LES_АктОбмераПоштучныйОбмер.НоменклатураОтбраковки,
	|	LES_АктОбмераПоштучныйОбмер.Длина,
	|	LES_АктОбмераПоштучныйОбмер.Диаметр,
	|	LES_АктОбмераПоштучныйОбмер.КоличествоБревен,
	|	LES_АктОбмераПоштучныйОбмер.НомерСтроки
	|ИЗ
	|	Документ.LES_АктОбмера.ПоштучныйОбмер КАК LES_АктОбмераПоштучныйОбмер
	|ГДЕ
	|	LES_АктОбмераПоштучныйОбмер.Ссылка В(&СписокОбъектов)";	
	
	РезультатЗапросаПоПоштучномуОбмеру = Запрос.Выполнить();
	
	ТаблицаГеометрическийОбмер = РезультатЗапросаПоГеометрическомуОбмеру.Выгрузить();
	ТаблицаПоштучныйОбмер      = РезультатЗапросаПоПоштучномуОбмеру.Выгрузить();
	
	ТаблицаГеометрическийОбмер.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаПоштучныйОбмер.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));

	Для Каждого СтрокаГеометрОбмера Из ТаблицаГеометрическийОбмер Цикл
		
		Параметры = Новый Структура;   			
		Параметры.Вставить("Порода", СтрокаГеометрОбмера.Порода);
		Параметры.Вставить("Сорт", СтрокаГеометрОбмера.Сорт);
		Параметры.Вставить("Длина", СтрокаГеометрОбмера.Длина);
		Параметры.Вставить("Диаметр", Справочники.LES_ДиаметрыКруглогоЛеса.ПустаяСсылка());
		
		СтрокаГеометрОбмера.Характеристика = LES_ЛеспромСервер.ХарактеристикаКруглогоЛесаПоЗначениямСвойств(СтрокаГеометрОбмера.Номенклатура, Параметры);
		
	КонецЦикла; 
	
	Для Каждого СтрокаПоштучОбмера Из ТаблицаПоштучныйОбмер Цикл
		
		Параметры = Новый Структура;   			
		Параметры.Вставить("Порода", СтрокаПоштучОбмера.Порода);
		Параметры.Вставить("Сорт", СтрокаПоштучОбмера.Сорт);
		Параметры.Вставить("Длина", СтрокаПоштучОбмера.Длина);
		Параметры.Вставить("Диаметр", СтрокаПоштучОбмера.Диаметр);
		
		СтрокаПоштучОбмера.Характеристика = LES_ЛеспромСервер.ХарактеристикаКруглогоЛесаПоЗначениямСвойств(СтрокаПоштучОбмера.Номенклатура, Параметры);
		
	КонецЦикла; 	
	
	Если НЕ ТаблицаПоштучныйОбмер.Количество() = 0 Тогда
		// Минус
		Для Каждого ТекСтрока Из ТаблицаПоштучныйОбмер Цикл
			ИндексТочки = Найти(ТекСтрока.НоменклатураОтбраковки, ".");
			Если ИндексТочки <> 0 Тогда
				НомСтр = Лев(ТекСтрока.НоменклатураОтбраковки, ИндексТочки-1);
				СтрокаТабл = ТаблицаГеометрическийОбмер.Найти(Число(НомСтр),"НомерСтроки");
				СтрокаТабл.Объем = СтрокаТабл.Объем - ТекСтрока.Объем;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаГеометрическийОбмер.Свернуть("Номенклатура, Характеристика","Объем");
	ТаблицаПоштучныйОбмер.Свернуть("Номенклатура, Характеристика","Объем");
	
	Если НЕ ТаблицаПоштучныйОбмер.Количество() = 0 Тогда
		// Плюс
		Для Каждого ТекСтрока Из ТаблицаГеометрическийОбмер Цикл			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура",ТекСтрока.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",ТекСтрока.Характеристика);
			МассивСтрок = ТаблицаПоштучныйОбмер.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() > 0 Тогда
				Для Каждого СтрокаМассива Из МассивСтрок Цикл
					ТекСтрока.Объем = ТекСтрока.Объем + СтрокаМассива.Объем;
				КонецЦикла;
			КонецЕсли;			
		КонецЦикла;
		// Новые строки
		Для Каждого ТекСтрока Из ТаблицаПоштучныйОбмер Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура",ТекСтрока.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",ТекСтрока.Характеристика);
			МассивСтрок = ТаблицаГеометрическийОбмер.НайтиСтроки(СтруктураПоиска);
			Если МассивСтрок.Количество() = 0 Тогда
				НоваяСтрока = ТаблицаГеометрическийОбмер.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.Характеристика = ТекСтрока.Характеристика;
				НоваяСтрока.Объем = ТекСтрока.Объем;
			КонецЕсли;
		КонецЦикла;     		
	КонецЕсли;    	
	
	Возврат ТаблицаГеометрическийОбмер;
	
КонецФункции 

#КонецОбласти
