///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии ...
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ЗначениеФлагов;
Перем КоличествоСимволовДляПереносаКомментария;
Перем ТаблицаТиповОбъектов;
Перем ТаблицаКлючевыхСлов;
Перем ТаблицаКлючевыхСловЗапроса;
Перем МассивКлючевыхСловЗапроса;
Перем МассивИсключенийСловЗапроса;
Перем МассивСлужебныхТегов;
Перем ОбъектРегулярныхВыражений;
Перем ТекстСимволыНачалаПреамбулы;

#КонецОбласти

#Область ПроцедурыИФункцииДляВызоваОбработкиИзКонфигурации

// Процедура предназначена для вызова из кода исправляемой конфигурации,
// например, из регламентного задания по расписанию.
//
Функция АвтоформатироватьКод(ПараметрыАвтоформатирования = Неопределено) Экспорт
	
	Статус = ПроверитьПлатформу836();
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыАвтоформатирования) <> Тип("Структура") Тогда 
		ПараметрыАвтоформатирования = ПолучитьПараметрыАвтоформатированияПоУмолчанию();
	КонецЕсли;
	
	ЗначениеФлагов = Неопределено;
	Если НЕ ПараметрыАвтоформатирования.Свойство("ЗначениеФлагов", ЗначениеФлагов) Тогда
		ЗначениеФлагов = ПолучитьЗначенияФлаговПоУмолчанию();
	КонецЕсли;
	
	ЗаполнитьПараметры(ПараметрыАвтоформатирования);
	
	ХранилищеУказано = НЕ ПустаяСтрока(КаталогХранилища);
	
	Если ВыгружатьКонфигурациюВФайлыXML Тогда
		
		// Если указан список захваченных объектов, то только заполняем таблицу.
		Если НЕ ПустаяСтрока(СписокЗахваченныхОбъектов) Тогда
			
			Статус = ЗаполнитьТаблицуЗахваченныхОбъектов(СписокЗахваченныхОбъектов, Ложь);
			Если НЕ ПустаяСтрока(Статус) Тогда 
				Возврат Статус;
			КонецЕсли;
			
		// Если заполнен каталог с хранилищем, то работаем с ним.
		ИначеЕсли ХранилищеУказано Тогда
			
			// Если флаг "Помещать обработанные объекты в хранилище" установлен,
			Если ПомещатьИзмененныеОбъектыВХранилище Тогда
				// то подключаемся к хранилищу.
				Статус = ПодключитьКонфигурациюКХранилищу();
				Если НЕ ПустаяСтрока(Статус) Тогда 
					Возврат Статус;
				КонецЕсли;
				
				// И пытаемся захватить в нем все объекты.
				Статус = ЗахватитьОбъектыКонфигурацииВХранилище();
				Если НЕ ПустаяСтрока(Статус) Тогда 
					Возврат Статус;
				КонецЕсли;
			Иначе
				// Если флаг не установлен, то только загружаем конфигурацию из хранилища.
				Статус = ЗагрузитьКонфигурациюИзХранилища();
				Если НЕ ПустаяСтрока(Статус) Тогда 
					Возврат Статус;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Статус = ВыгрузитьКонфигурациюВФайлыXML();
		Если НЕ ПустаяСтрока(Статус) Тогда 
			Возврат Статус;
		КонецЕсли;
		
		СкопироватьКаталогВыгрузки(КаталогВыгрузки, КаталогВыгрузкиРезультат);
		
	КонецЕсли;
	
	ЗаполнитьПравилаПоддержки();
	
	ЗаполнитьРезультат();
	
	ПривестиКонфигурациюКСтандартам();
	
	ЗаполнитьПравилаПоддержкиДляИзмененныхОбъектов();
	
	Если ЗагружатьКонфигурациюИзФайловXML Тогда
		
		Статус = ЗагрузитьКонфигурациюИзФайловXML();
		Если НЕ ПустаяСтрока(Статус) Тогда
			Возврат Статус;
		КонецЕсли;
		
		Если ОбновитьКонфигурациюБД Тогда
			Статус = ОбновитьКонфигурациюБД();
			Если НЕ ПустаяСтрока(Статус) Тогда
				Возврат Статус;
			КонецЕсли;
		КонецЕсли;
		
		ОчиститьКаталогиВыгрузки("");
		
	КонецЕсли;
	
	Если ХранилищеУказано И ПомещатьИзмененныеОбъектыВХранилище Тогда
		
		Статус = ПоместитьИзмененныеОбъектыВХранилище();
		Если НЕ ПустаяСтрока(Статус) Тогда
			Возврат Статус;
		КонецЕсли;
		
		Статус = ОтменитьЗахватОбъектовВХранилище();
		Если НЕ ПустаяСтрока(Статус) Тогда
			Возврат Статус;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

// Функция предназначена для вызова из кода исправляемой конфигурации.
// Получает значения флагов для исправления по умолчанию.
// 
Функция ПолучитьПараметрыАвтоформатированияПоУмолчанию() Экспорт 
	
	ПараметрыАвтоформатирования = Новый Структура;
	ПараметрыАвтоформатирования.Вставить("ПутьКБазе", СтрокаСоединенияИнформационнойБазы());
	ПараметрыАвтоформатирования.Вставить("Пользователь", ИмяПользователя());
	ПараметрыАвтоформатирования.Вставить("Пароль", "");
	ПараметрыАвтоформатирования.Вставить("КаталогВыгрузкиXML", КаталогВременныхФайлов());
	ПараметрыАвтоформатирования.Вставить("ОбновитьКонфигурациюБД", Ложь);
	ПараметрыАвтоформатирования.Вставить("КаталогХранилища", "");
	ПараметрыАвтоформатирования.Вставить("ПользовательХранилища", "");
	ПараметрыАвтоформатирования.Вставить("ПарольХранилища", "");
	ПараметрыАвтоформатирования.Вставить("ПомещатьИзмененныеОбъектыВХранилище", Ложь);
	ПараметрыАвтоформатирования.Вставить("СтрокаЗапускаПлатформы", КаталогПрограммы() + "1cv8.exe");
	ПараметрыАвтоформатирования.Вставить("СписокИзмененныхОбъектов", ПолучитьИмяВременногоФайла("xml"));
	ПараметрыАвтоформатирования.Вставить("ВыгружатьКонфигурациюВФайлыXML", Истина);
	ПараметрыАвтоформатирования.Вставить("ЗагружатьКонфигурациюИзФайловXML", Истина);
	ПараметрыАвтоформатирования.Вставить("ТекстКомментария", "");
	ПараметрыАвтоформатирования.Вставить("СписокЗахваченныхОбъектов", "");
	ПараметрыАвтоформатирования.Вставить("РежимОтладки", Ложь);
	
	ПараметрыАвтоформатирования.Вставить("ЗначениеФлагов", ПолучитьЗначенияФлаговПоУмолчанию());
	
	Возврат ПараметрыАвтоформатирования;
	
КонецФункции

// Функция предназначена для вызова из кода исправляемой конфигурации.
// Получает значения флагов для исправления по умолчанию.
// 
Функция ПолучитьЗначенияФлаговПоУмолчанию()
	
	ЗначениеФлаговПоУмолчанию = Новый Структура;
	
	ТаблицаСтандартов = ПолучитьТаблицуСтандартовИзМакета();
	Для Каждого СтрокаСтандарта Из ТаблицаСтандартов Цикл
		ЗначениеФлаговПоУмолчанию.Вставить(СтрокаСтандарта.Ключ, НЕ ПустаяСтрока(СтрокаСтандарта.ВыбранПоУмолчанию));
	КонецЦикла;
	
	Возврат ЗначениеФлаговПоУмолчанию;
	
КонецФункции

Функция ПолучитьИмяФайлаБезРасширения(ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Возврат Файл.ИмяБезРасширения;
	
КонецФункции

Процедура ЗаполнитьПараметры(Знач ПараметрыАвтоформатирования)
	
	// Заполняем параметры "КаталогВыгрузки" и "КаталогВыгрузкиРезультат".
	КаталогВыгрузкиXML = ПараметрыАвтоформатирования.КаталогВыгрузкиXML;
	// Если каталог выгрузки не передан, то заполняем временными каталогами.
	Если ПустаяСтрока(КаталогВыгрузкиXML) Тогда
		КаталогВыгрузки = ПолучитьИмяВременногоФайла("");
		КаталогВыгрузкиРезультат = ПолучитьИмяВременногоФайла("");
	ИначеЕсли ПараметрыАвтоформатирования.ВыгружатьКонфигурациюВФайлыXML Тогда
		// Если передан каталог выгрузки и необходимость выгрузки в файлы XML,
		// то заполняем переданный каталог временными каталогами.
		КаталогВыгрузкиXML = СокрЛП(КаталогВыгрузкиXML);
		КаталогДобавитьСлэш(КаталогВыгрузкиXML);
		
		ИмяФайла = ПолучитьИмяВременногоФайла("");
		ИмяФайла = ПолучитьИмяФайлаБезРасширения(ИмяФайла);
		КаталогВыгрузки = КаталогВыгрузкиXML + ИмяФайла;
		
		ИмяФайла = ПолучитьИмяВременногоФайла("");
		ИмяФайла = ПолучитьИмяФайлаБезРасширения(ИмяФайла);
		КаталогВыгрузкиРезультат = КаталогВыгрузкиXML + ИмяФайла;
	Иначе
		// Если передан каталог выгрузки, и не надо выгружать конфигурацию в файлы XML,
		// то заполняем им КаталогВыгрузкиРезультат, а КаталогВыгрузки - временным каталогом.
		КаталогВыгрузкиРезультат = КаталогВыгрузкиXML;
		КаталогВыгрузки = ПолучитьИмяВременногоФайла("");
	КонецЕсли;
	
	КаталогДобавитьСлэш(КаталогВыгрузки);
	КаталогДобавитьСлэш(КаталогВыгрузкиРезультат);
	
	// Заполняем остальные параметры автоформатирования.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыАвтоформатирования);
	
	// Проверяем параметр "ПутьКБазе".
	Если ПустаяСтрока(ПутьКБазе) Тогда 
		ПутьКБазе = СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	
	// Проверяем параметр "Пользователь".
	Если ПустаяСтрока(Пользователь) Тогда 
		ТекущийПользователь = ИмяПользователя();
		Если ПустаяСтрока(ТекущийПользователь) Тогда 
			Пользователь = "";
			Пароль = "";
		Иначе 
			Пользователь = ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем путь к файлу со списком измененных объектов.
	Если ПустаяСтрока(СписокИзмененныхОбъектов) Тогда
		СписокИзмененныхОбъектов = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРезультат() Экспорт 
	
	Результат.Очистить();
	
	НайденныеФайлы = НайтиФайлы(КаталогВыгрузкиРезультат, "*.*", Истина);
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьОбъекта = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(Файл.ПолноеИмя);
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.ПолноеИмяФайла = Файл.ПолноеИмя;
		НоваяСтрока.Объект = ПутьОбъекта;
		НоваяСтрока.Флаг = Истина;
		НоваяСтрока.Изменен = Ложь;
		НоваяСтрока.Результат = "сравнить";
		
		НоваяСтрока.ЗахваченВХранилище = ПолучитьСтатусЗахватаОбъектаВХранилище(ПутьОбъекта);
		НоваяСтрока.РедактированиеРазрешено = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуИзмененныхОбъектовНаСервере(ЗахваченВХранилище = Неопределено,
	РедактированиеРазрешено = Неопределено) Экспорт
	
	// Получаем только выбранные измененные файлы.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Изменен", Истина);
	СтруктураОтбора.Вставить("Флаг", Истина);
	
	Если ЗахваченВХранилище <> Неопределено Тогда
		СтруктураОтбора.Вставить("ЗахваченВХранилище", ЗахваченВХранилище);
	КонецЕсли;
	
	Если РедактированиеРазрешено <> Неопределено Тогда
		СтруктураОтбора.Вставить("РедактированиеРазрешено", РедактированиеРазрешено);
	КонецЕсли;
	
	Возврат Результат.Выгрузить(СтруктураОтбора);
	
КонецФункции

Процедура ЗаменитьПутиФайловФормВТаблицеИзмененныхФайлов(ТаблицаФайлов)
	
	// Для форм заменяем путь к измененному файлу путем к файлу XML формы как к объекту метаданных,
	// т.к. при указании, например, файла с модулем формы будет ошибка платформы при загрузке.
	// Модуль формы будет загружен автоматически при указании файла XML формы.
	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл
		
		КлассОбъекта = ПолучитьКлассОбъекта(СтрокаФайла.Объект);
		Если (СтрСравнить(КлассОбъекта, "Форма") <> 0)
		   И (СтрСравнить(КлассОбъекта, "ОбщаяФорма") <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьОбъектаАнгл = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(СтрокаФайла.ПолноеИмяФайла,, "ИмяАнглМнФормы");
		ПутьОбъектаАнгл = СтрЗаменить(ПутьОбъектаАнгл, ".", "\");
		
		ПолноеИмяФайлаФормы = КаталогВыгрузкиРезультат + ПутьОбъектаАнгл + "\Ext\Form.xml";
		Если апк_ФайлСуществует(ПолноеИмяФайлаФормы) Тогда
			СтрокаФайла.ПолноеИмяФайла = ПолноеИмяФайлаФормы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьФайлыКорняКонфигурацииИзТаблицыИзмененныхФайлов(ТаблицаФайлов)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Объект", "Конфигурация");
	
	МассивФайловКонфигурации = ТаблицаФайлов.НайтиСтроки(СтруктураОтбора);
	Если МассивФайловКонфигурации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим все файлы корня конфигурации из таблицы, т.к. они были загружены ранее.
	Для Каждого СтрокаФайла Из МассивФайловКонфигурации Цикл
		ТаблицаФайлов.Удалить(СтрокаФайла);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиФайловXML()
	
	ТаблицаФайлов = ПолучитьТаблицуИзмененныхОбъектовНаСервере(Истина, Истина);
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаменитьПутиФайловФормВТаблицеИзмененныхФайлов(ТаблицаФайлов);
	УдалитьФайлыКорняКонфигурацииИзТаблицыИзмененныхФайлов(ТаблицаФайлов);
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаФайлов.Свернуть("ПолноеИмяФайла");
	
	СписокФайловДляЗагрузкиXML = ПолучитьИмяВременногоФайла("txt");
	ДокументТекст = Новый ТекстовыйДокумент;
	
	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл
		ДокументТекст.ДобавитьСтроку(СтрокаФайла.ПолноеИмяФайла);
	КонецЦикла;
	
	ДокументТекст.Записать(СписокФайловДляЗагрузкиXML);
	
	Возврат СписокФайловДляЗагрузкиXML;
	
КонецФункции

Функция ПодготовитьФайлКонфигурацииДляЗагрузкиФайловXML(КаталогЗагрузки = "")
	
	ТаблицаФайлов = ПолучитьТаблицуИзмененныхОбъектовНаСервере(Истина, Истина);
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Если изменен один из файлов корня конфигурации, то будем загружать их все вместе, но отдельно от файлов всех
	// остальных объектов.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Объект", "Конфигурация");
	
	МассивФайловКонфигурации = ТаблицаФайлов.НайтиСтроки(СтруктураОтбора);
	Если МассивФайловКонфигурации.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтруктураОтбора.Вставить("Изменен", Истина);
	
	// Скопируем все файлы корня конфигурации в отдельный каталог.
	КаталогЗагрузки = ПолучитьИмяВременногоФайла("");
	КаталогДобавитьСлэш(КаталогЗагрузки);
	СоздатьКаталог(КаталогЗагрузки);
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*");
	Для Каждого Файл Из МассивФайлов Цикл
		// Каталоги пропускаем, копируем только файлы в каталоге выгрузки.
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаИсточника = Файл.ПолноеИмя;
		ИмяФайлаПриемника = СтрЗаменить(ИмяФайлаИсточника, КаталогВыгрузкиРезультат, КаталогЗагрузки);
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
	КонецЦикла;
	
	// Скопируем также каталог "Ext", содержащий файлы корня конфигурации, из каталога выгрузки файлов XML.
	КаталогВыгрузкиExt = КаталогВыгрузкиРезультат + "Ext\";
	Если апк_ФайлСуществует(КаталогВыгрузкиExt) Тогда
		КаталогЗагрузкиExt = КаталогЗагрузки + "Ext\";
		СоздатьКаталог(КаталогЗагрузкиExt);
		апк_КаталогКопировать(КаталогВыгрузкиExt, КаталогЗагрузкиExt);
	КонецЕсли;
	
	СписокФайловДляЗагрузкиXML = ПолучитьИмяВременногоФайла("txt");
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.ДобавитьСтроку(КаталогЗагрузки + "Configuration.xml");
	
	ДокументТекст.Записать(СписокФайловДляЗагрузкиXML);
	
	Возврат СписокФайловДляЗагрузкиXML;
	
КонецФункции

Функция ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиВХранилище()
	
	ТекстОшибки = "";
	Если ПустаяСтрока(СписокИзмененныхОбъектов) Тогда
		СписокИзмененныхОбъектов = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	
	апк_ФайлУдалить(СписокИзмененныхОбъектов);
	
	ТаблицаИзмененныхОбъектов = ПолучитьТаблицуИзмененныхОбъектовНаСервере(Истина, Истина);
	Если ТаблицаИзмененныхОбъектов.Количество() = 0 Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТаблицаИзмененныхОбъектов.Свернуть("Объект");
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(СписокИзмененныхОбъектов);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента(НСтр("ru='Objects'"));
		ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
		ЗаписьXML.ЗаписатьАтрибут("version", "1.0");
		
		Для Каждого СтрокаТаблицы Из ТаблицаИзмененныхОбъектов Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Object");
			
			ЗаписьXML.ЗаписатьАтрибут("fullName", СтрокаТаблицы.Объект);
			ЗаписьXML.ЗаписатьАтрибут("includeChildObjects", "false");
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
	Исключение
		
		Событие = НСтр("ru='Обработка автоформатирования и локализации.Список измененных объектов'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать файл XML со списком измененных объектов ""%1"" по причине:
			|%2'"), СписокИзмененныхОбъектов, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие,,,, ТекстОшибки);
		
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

Процедура ТаблицаТиповОбъектовИнициализировать()
	
	Если ТаблицаТиповОбъектов <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТиповОбъектов = Новый ТаблицаЗначений;
	ТаблицаТиповОбъектов.Колонки.Добавить("Группа");
	ТаблицаТиповОбъектов.Колонки.Добавить("Имя");
	ТаблицаТиповОбъектов.Колонки.Добавить("ИмяМнФормы");
	ТаблицаТиповОбъектов.Колонки.Добавить("ИмяАнгл");
	ТаблицаТиповОбъектов.Колонки.Добавить("ИмяАнглМнФормы");
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Constant";
	СтрокаТипаОбъекта.Имя = "Константа";
	СтрокаТипаОбъекта.ИмяМнФормы = "Константы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Constants";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Catalog";
	СтрокаТипаОбъекта.Имя = "Справочник";
	СтрокаТипаОбъекта.ИмяМнФормы = "Справочники";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Catalogs";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Document";
	СтрокаТипаОбъекта.Имя = "Документ";
	СтрокаТипаОбъекта.ИмяМнФормы = "Документы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Documents";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DocumentJournal";
	СтрокаТипаОбъекта.Имя = "ЖурналДокументов";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЖурналыДокументов";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DocumentJournals";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Enum";
	СтрокаТипаОбъекта.Имя = "Перечисление";
	СтрокаТипаОбъекта.ИмяМнФормы = "Перечисления";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Enums";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Report";
	СтрокаТипаОбъекта.Имя = "Отчет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Отчеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Reports";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DataProcessor";
	СтрокаТипаОбъекта.Имя = "Обработка";
	СтрокаТипаОбъекта.ИмяМнФормы = "Обработки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DataProcessors";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ChartOfCharacteristicTypes";
	СтрокаТипаОбъекта.Имя = "ПланВидовХарактеристик";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыВидовХарактеристик";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ChartsOfCharacteristicTypes";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ChartOfAccounts";
	СтрокаТипаОбъекта.Имя = "ПланСчетов";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыСчетов";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ChartsOfAccounts";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ChartOfCalculationTypes";
	СтрокаТипаОбъекта.Имя = "ПланВидовРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыВидовРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ChartsOfCalculationTypes";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "InformationRegister";
	СтрокаТипаОбъекта.Имя = "РегистрСведений";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыСведений";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "InformationRegisters";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AccumulationRegister";
	СтрокаТипаОбъекта.Имя = "РегистрНакопления";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыНакопления";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AccumulationRegisters";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AccountingRegister";
	СтрокаТипаОбъекта.Имя = "РегистрБухгалтерии";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыБухгалтерии";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "AccountingRegisters";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "CalculationRegister";
	СтрокаТипаОбъекта.Имя = "РегистрРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегистрыРасчета";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CalculationRegisters";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BusinessProcess";
	СтрокаТипаОбъекта.Имя = "БизнесПроцесс";
	СтрокаТипаОбъекта.ИмяМнФормы = "БизнесПроцессы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "BusinessProcesses";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Task";
	СтрокаТипаОбъекта.Имя = "Задача";
	СтрокаТипаОбъекта.ИмяМнФормы = "Задачи";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Tasks";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Form";
	СтрокаТипаОбъекта.Имя = "Форма";
	СтрокаТипаОбъекта.ИмяМнФормы = "Формы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Forms";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Attribute";
	СтрокаТипаОбъекта.Имя = "Реквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "Реквизиты";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "ExchangePlan";
	СтрокаТипаОбъекта.Имя = "ПланОбмена";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПланыОбмена";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExchangePlans";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Characteristic";
	СтрокаТипаОбъекта.Имя = "Характеристика";
	СтрокаТипаОбъекта.ИмяМнФормы = "Характеристика";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Sequence";
	СтрокаТипаОбъекта.Имя = "Последовательность";
	СтрокаТипаОбъекта.ИмяМнФормы = "Последовательности";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Recalculation";
	СтрокаТипаОбъекта.Имя = "Перерасчет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Перерасчеты";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Dimension";
	СтрокаТипаОбъекта.Имя = "Измерение";
	СтрокаТипаОбъекта.ИмяМнФормы = "Измерения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Resource";
	СтрокаТипаОбъекта.Имя = "Ресурс";
	СтрокаТипаОбъекта.ИмяМнФормы = "Ресурсы";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "TabularSection";
	СтрокаТипаОбъекта.Имя = "ТабличнаяЧасть";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТабличныеЧасти";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Attribute";
	СтрокаТипаОбъекта.Имя = "Реквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "РеквизитыТабличнойЧасти";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Command";
	СтрокаТипаОбъекта.Имя = "Команда";
	СтрокаТипаОбъекта.ИмяМнФормы = "Команды";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Role";
	СтрокаТипаОбъекта.Имя = "Роль";
	СтрокаТипаОбъекта.ИмяМнФормы = "Роли";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Roles";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "SessionParameter";
	СтрокаТипаОбъекта.Имя = "ПараметрСеанса";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПараметрыСеанса";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "SessionParameters";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonModule";
	СтрокаТипаОбъекта.Имя = "ОбщийМодуль";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеМодули";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonModules";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "FilterCriterion";
	СтрокаТипаОбъекта.Имя = "КритерийОтбора";
	СтрокаТипаОбъекта.ИмяМнФормы = "КритерииОтбора";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "FilterCriteria";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "EventSubscription";
	СтрокаТипаОбъекта.Имя = "ПодпискаНаСобытие";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПодпискиНаСобытия";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "EventSubscriptions";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "ScheduledJob";
	СтрокаТипаОбъекта.Имя = "РегламентноеЗадание";
	СтрокаТипаОбъекта.ИмяМнФормы = "РегламентныеЗадания";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ScheduledJobs";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "SettingsStorage";
	СтрокаТипаОбъекта.Имя = "ХранилищеНастроек";
	СтрокаТипаОбъекта.ИмяМнФормы = "ХранилищаНастроек";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "SettingsStorages";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonForm";
	СтрокаТипаОбъекта.Имя = "ОбщаяФорма";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеФормы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonForms";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonCommand";
	СтрокаТипаОбъекта.Имя = "ОбщаяКоманда";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеКоманды";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonCommands";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommandGroup";
	СтрокаТипаОбъекта.Имя = "ГруппаКоманд";
	СтрокаТипаОбъекта.ИмяМнФормы = "ГруппыКоманд";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommandGroups";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Interface";
	СтрокаТипаОбъекта.Имя = "Интерфейс";
	СтрокаТипаОбъекта.ИмяМнФормы = "Интерфейсы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Interfaces";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonTemplate";
	СтрокаТипаОбъекта.Имя = "ОбщийМакет";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеМакеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonTemplates";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonPicture";
	СтрокаТипаОбъекта.Имя = "ОбщаяКартинка";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеКартинки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonPictures";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "XDTOPackage";
	СтрокаТипаОбъекта.Имя = "ПакетXDTO";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПакетыXDTO";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "XDTOPackages";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "WebService";
	СтрокаТипаОбъекта.Имя = "WebСервис";
	СтрокаТипаОбъекта.ИмяМнФормы = "WebСервисы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "WebServices";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "HTTPService";
	СтрокаТипаОбъекта.Имя = "HTTPСервис";
	СтрокаТипаОбъекта.ИмяМнФормы = "HTTPСервисы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "HTTPServices";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Style";
	СтрокаТипаОбъекта.Имя = "Стиль";
	СтрокаТипаОбъекта.ИмяМнФормы = "Стили";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Styles";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "StyleItem";
	СтрокаТипаОбъекта.Имя = "ЭлементСтиля";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЭлементыСтиля";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "StyleItems";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DocumentNumerator";
	СтрокаТипаОбъекта.Имя = "НумераторДокументов";
	СтрокаТипаОбъекта.ИмяМнФормы = "НумераторыДокументов";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AddressingAttribute";
	СтрокаТипаОбъекта.Имя = "РеквизитАдресации";
	СтрокаТипаОбъекта.ИмяМнФормы = "РеквизитыАдресации";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "AccountingFlag";
	СтрокаТипаОбъекта.Имя = "ПризнакУчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПризнакиУчета";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionAccountingFlag";
	СтрокаТипаОбъекта.Имя = "ПризнакУчетаСубконто";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПризнакиУчетаСубконто";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Subsystem";
	СтрокаТипаОбъекта.Имя = "Подсистема";
	СтрокаТипаОбъекта.ИмяМнФормы = "Подсистемы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Subsystems";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "WSReference";
	СтрокаТипаОбъекта.Имя = "WSСсылка";
	СтрокаТипаОбъекта.ИмяМнФормы = "WSСсылки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "WSReferences";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "FunctionalOptionsParameter";
	СтрокаТипаОбъекта.Имя = "ПараметрФункциональныхОпций";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПараметрыФункциональныхОпций";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "FunctionalOptionsParameters";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "FunctionalOption";
	СтрокаТипаОбъекта.Имя = "ФункциональнаяОпция";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "FunctionalOptions";
	СтрокаТипаОбъекта.ИмяМнФормы = "ФункциональныеОпции";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "CommonAttribute";
	СтрокаТипаОбъекта.Имя = "ОбщийРеквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОбщиеРеквизиты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "CommonAttributes";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Template";
	СтрокаТипаОбъекта.Имя = "Макет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Макеты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Templates";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Predefined";
	СтрокаТипаОбъекта.Имя = "Предопределенный";
	СтрокаТипаОбъекта.ИмяМнФормы = "Предопределенные";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Configuration";
	СтрокаТипаОбъекта.Имя = "Конфигурация";
	СтрокаТипаОбъекта.ИмяМнФормы = "Конфигурация";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "Language";
	СтрокаТипаОбъекта.Имя = "Язык";
	СтрокаТипаОбъекта.ИмяМнФормы = "Языки";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "Languages";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "EnumValue";
	СтрокаТипаОбъекта.Имя = "ЗначениеПеречисления";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЗначенияПеречисления";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Column";
	СтрокаТипаОбъекта.Имя = "Графа";
	СтрокаТипаОбъекта.ИмяМнФормы = "Графы";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExternalDataSource";
	СтрокаТипаОбъекта.Имя = "ВнешнийИсточникДанных";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВнешниеИсточникиДанных";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "ExternalDataSources";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Table";
	СтрокаТипаОбъекта.Имя = "Таблица";
	СтрокаТипаОбъекта.ИмяМнФормы = "Таблицы";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Field";
	СтрокаТипаОбъекта.Имя = "Поле";
	СтрокаТипаОбъекта.ИмяМнФормы = "Поля";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Operation";
	СтрокаТипаОбъекта.Имя = "Операция";
	СтрокаТипаОбъекта.ИмяМнФормы = "Операции";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Parameter";
	СтрокаТипаОбъекта.Имя = "Параметр";
	СтрокаТипаОбъекта.ИмяМнФормы = "Параметры";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "URLTemplate";
	СтрокаТипаОбъекта.Имя = "ШаблонURL";
	СтрокаТипаОбъекта.ИмяМнФормы = "ШаблоныURL";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Method";
	СтрокаТипаОбъекта.Имя = "МетодШаблонаURL";
	СтрокаТипаОбъекта.ИмяМнФормы = "МетодыШаблонаURL";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Aggregate";
	СтрокаТипаОбъекта.Имя = "Агрегат";
	СтрокаТипаОбъекта.ИмяМнФормы = "Агрегаты";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "Общие";
	СтрокаТипаОбъекта.ИмяАнгл = "DefinedType";
	СтрокаТипаОбъекта.Имя = "ОпределяемыйТип";
	СтрокаТипаОбъекта.ИмяМнФормы = "ОпределяемыеТипы";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "DefinedTypes";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "StandardTabularSection";
	СтрокаТипаОбъекта.Имя = "СтандартнаяТабличнаяЧасть";
	СтрокаТипаОбъекта.ИмяМнФормы = "СтандартныеТабличныеЧасти";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "StandardTabularSections";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "StandardAttribute";
	СтрокаТипаОбъекта.Имя = "СтандартныйРеквизит";
	СтрокаТипаОбъекта.ИмяМнФормы = "СтандартныеРеквизиты";
	СтрокаТипаОбъекта.ИмяАнглМнФормы = "StandardAttributes";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Ref";
	СтрокаТипаОбъекта.Имя = "Ссылка";
	СтрокаТипаОбъекта.ИмяМнФормы = "Ссылка";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DeletionMark";
	СтрокаТипаОбъекта.Имя = "ПометкаУдаления";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПометкаУдаления";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Predefined";
	СтрокаТипаОбъекта.Имя = "Предопределенный";
	СтрокаТипаОбъекта.ИмяМнФормы = "Предопределенные";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "PredefinedDataName";
	СтрокаТипаОбъекта.Имя = "ИмяПредопределенныхДанных";
	СтрокаТипаОбъекта.ИмяМнФормы = "ИмяПредопределенныхДанных";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Date";
	СтрокаТипаОбъекта.Имя = "Дата";
	СтрокаТипаОбъекта.ИмяМнФормы = "Дата";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Number";
	СтрокаТипаОбъекта.Имя = "Номер";
	СтрокаТипаОбъекта.ИмяМнФормы = "Номер";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Posted";
	СтрокаТипаОбъекта.Имя = "Проведен";
	СтрокаТипаОбъекта.ИмяМнФормы = "Проведен";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "LineNumber";
	СтрокаТипаОбъекта.Имя = "НомерСтроки";
	СтрокаТипаОбъекта.ИмяМнФормы = "НомерСтроки";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Code";
	СтрокаТипаОбъекта.Имя = "Код";
	СтрокаТипаОбъекта.ИмяМнФормы = "Код";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Description";
	СтрокаТипаОбъекта.Имя = "Наименование";
	СтрокаТипаОбъекта.ИмяМнФормы = "Наименование";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Parent";
	СтрокаТипаОбъекта.Имя = "Родитель";
	СтрокаТипаОбъекта.ИмяМнФормы = "Родитель";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Owner";
	СтрокаТипаОбъекта.Имя = "Владелец";
	СтрокаТипаОбъекта.ИмяМнФормы = "Владелец";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "IsFolder";
	СтрокаТипаОбъекта.Имя = "ЭтоГруппа";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЭтоГруппа";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Order";
	СтрокаТипаОбъекта.Имя = "Порядок";
	СтрокаТипаОбъекта.ИмяМнФормы = "Порядок";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ThisNode";
	СтрокаТипаОбъекта.Имя = "ЭтотУзел";
	СтрокаТипаОбъекта.ИмяМнФормы = "ЭтотУзел";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "OffBalance";
	СтрокаТипаОбъекта.Имя = "Забалансовый";
	СтрокаТипаОбъекта.ИмяМнФормы = "Забалансовый";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Executed";
	СтрокаТипаОбъекта.Имя = "Выполнена";
	СтрокаТипаОбъекта.ИмяМнФормы = "Выполнена";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RoutePoint";
	СтрокаТипаОбъекта.Имя = "ТочкаМаршрута";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТочкаМаршрута";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Recorder";
	СтрокаТипаОбъекта.Имя = "Регистратор";
	СтрокаТипаОбъекта.ИмяМнФормы = "Регистратор";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "CalculationType";
	СтрокаТипаОбъекта.Имя = "ВидРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидРасчета";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ActionPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодДействия";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействия";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BegOfActionPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодДействияНачало";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействияНачало";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "EndOfActionPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодДействияКонец";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействияКонец";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BegOfBasePeriod";
	СтрокаТипаОбъекта.Имя = "БазовыйПериодНачало";
	СтрокаТипаОбъекта.ИмяМнФормы = "БазовыйПериодНачало";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "EndOfBasePeriod";
	СтрокаТипаОбъекта.Имя = "БазовыйПериодКонец";
	СтрокаТипаОбъекта.ИмяМнФормы = "БазовыйПериодКонец";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Active";
	СтрокаТипаОбъекта.Имя = "Активность";
	СтрокаТипаОбъекта.ИмяМнФормы = "Активность";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ReversingEntry";
	СтрокаТипаОбъекта.Имя = "Сторно";
	СтрокаТипаОбъекта.ИмяМнФормы = "Сторно";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RegistrationPeriod";
	СтрокаТипаОбъекта.Имя = "ПериодРегистрации";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодРегистрации";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "SentNo";
	СтрокаТипаОбъекта.Имя = "НомерОтправленного";
	СтрокаТипаОбъекта.ИмяМнФормы = "НомерОтправленного";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ReceivedNo";
	СтрокаТипаОбъекта.Имя = "НомерПринятого";
	СтрокаТипаОбъекта.ИмяМнФормы = "НомерПринятого";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Account";
	СтрокаТипаОбъекта.Имя = "Счет";
	СтрокаТипаОбъекта.ИмяМнФормы = "Счет";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RecordType";
	СтрокаТипаОбъекта.Имя = "ВидДвижения";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидДвижения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Period";
	СтрокаТипаОбъекта.Имя = "Период";
	СтрокаТипаОбъекта.ИмяМнФормы = "Период";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Started";
	СтрокаТипаОбъекта.Имя = "Стартован";
	СтрокаТипаОбъекта.ИмяМнФормы = "Стартован";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "HeadTask";
	СтрокаТипаОбъекта.Имя = "ВедущаяЗадача";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВедущаяЗадача";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Completed";
	СтрокаТипаОбъекта.Имя = "Завершен";
	СтрокаТипаОбъекта.ИмяМнФормы = "Завершен";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ActionPeriodIsBasic";
	СтрокаТипаОбъекта.Имя = "ПериодДействияБазовый";
	СтрокаТипаОбъекта.ИмяМнФормы = "ПериодДействияБазовый";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ValueType";
	СтрокаТипаОбъекта.Имя = "ТипЗначения";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТипЗначения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Type";
	СтрокаТипаОбъекта.Имя = "Тип";
	СтрокаТипаОбъекта.ИмяМнФормы = "Тип";// - ЖурналДокументов
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Type";
	СтрокаТипаОбъекта.Имя = "Вид";
	СтрокаТипаОбъекта.ИмяМнФормы = "Вид";// - ПланСчетов
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionTypes";
	СтрокаТипаОбъекта.Имя = "ВидыСубконто";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидыСубконто";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "TurnoversOnly";
	СтрокаТипаОбъекта.Имя = "ТолькоОбороты";
	СтрокаТипаОбъекта.ИмяМнФормы = "ТолькоОбороты";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExtDimensionType";
	СтрокаТипаОбъекта.Имя = "ВидСубконто";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВидСубконто";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "BaseCalculationTypes";
	СтрокаТипаОбъекта.Имя = "БазовыеВидыРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "БазовыеВидыРасчета";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "DisplacingCalculationTypes";
	СтрокаТипаОбъекта.Имя = "ВытесняющиеВидыРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВытесняющиеВидыРасчета";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "LeadingCalculationTypes";
	СтрокаТипаОбъекта.Имя = "ВедущиеВидыРасчета";
	СтрокаТипаОбъекта.ИмяМнФормы = "ВедущиеВидыРасчета";
	
	// Модули
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Module";
	СтрокаТипаОбъекта.Имя = "Модуль";
	СтрокаТипаОбъекта.ИмяМнФормы = "Модуль";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "CommandModule";
	СтрокаТипаОбъекта.Имя = "МодульКоманды";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульКоманды";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ObjectModule";
	СтрокаТипаОбъекта.Имя = "МодульОбъекта";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульОбъекта";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ManagerModule";
	СтрокаТипаОбъекта.Имя = "МодульМенеджера";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульМенеджера";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "RecordSetModule";
	СтрокаТипаОбъекта.Имя = "МодульНабораЗаписей";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульНабораЗаписей";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ValueManagerModule";
	СтрокаТипаОбъекта.Имя = "МодульМенеджераЗначения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульМенеджераЗначения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ApplicationModule";
	СтрокаТипаОбъекта.Имя = "МодульПриложения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульПриложения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ManagedApplicationModule";
	СтрокаТипаОбъекта.Имя = "МодульУправляемогоПриложения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульУправляемогоПриложения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "SessionModule";
	СтрокаТипаОбъекта.Имя = "МодульСеанса";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульСеанса";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "ExternalConnectionModule";
	СтрокаТипаОбъекта.Имя = "МодульВнешнегоСоединения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульВнешнегоСоединения";
	
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "OrdinaryApplicationModule";
	СтрокаТипаОбъекта.Имя = "МодульОбычногоПриложения";
	СтрокаТипаОбъекта.ИмяМнФормы = "МодульОбычногоПриложения";
	
	// Права
	СтрокаТипаОбъекта = ТаблицаТиповОбъектов.Добавить();
	СтрокаТипаОбъекта.Группа = "";
	СтрокаТипаОбъекта.ИмяАнгл = "Rights";
	СтрокаТипаОбъекта.Имя = "Право";
	СтрокаТипаОбъекта.ИмяМнФормы = "Права";
	
	ТаблицаТиповОбъектов.Индексы.Добавить("ИмяАнгл");
	ТаблицаТиповОбъектов.Индексы.Добавить("Имя");
	ТаблицаТиповОбъектов.Индексы.Добавить("ИмяМнФормы");
	
КонецПроцедуры

Функция ПолучитьТипОбъектаПоТаблицеТипов(ЗначениеПоиска, КолонкаПоиска = "ИмяАнгл", КолонкаИмени = "Имя", ЗначениеПоУмолчанию = Неопределено)
	
	СтандартныйТип = ТаблицаТиповОбъектов.Найти(ЗначениеПоиска, КолонкаПоиска);
	Возврат ?(СтандартныйТип = Неопределено,
		?(ЗначениеПоУмолчанию = Неопределено, ЗначениеПоиска, ЗначениеПоУмолчанию),
		СтандартныйТип[КолонкаИмени]);
	
КонецФункции

Функция ПолучитьКлассОбъекта(ПутьОбъекта, Разделитель = ".")
	
	МассивПути = СтрРазделить(ПутьОбъекта, Разделитель, Ложь);
	КоличествоЭлементовПути = МассивПути.Количество();
	
	Если КоличествоЭлементовПути = 0 Тогда
		Возврат "";
	ИначеЕсли КоличествоЭлементовПути <= 2 Тогда
		НомерЭлемента = 0;
	Иначе
		НомерЭлемента = 2;
	КонецЕсли;
	
	Возврат МассивПути[НомерЭлемента];
	
КонецФункции

Функция ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(ФайлВыгрузкиXML, Разделитель = ".", КолонкаИмени = "Имя")
	
	ТаблицаТиповОбъектовИнициализировать();
	
	// Получим имя файла без расширения.
	ИмяОбъекта = ФайлВыгрузкиXML;
	// Удаляем каталог выгрузки из пути объекта.
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, КаталогВыгрузкиРезультат, "");
	// Очищаем каталог "Ext" из пути объекта
	Если СтрНачинаетсяС(ИмяОбъекта, "Ext\") Тогда
		// Для файлов конфигурации, например "Configuration.xml", каталог "Ext" лежит в корне каталога выгрузки,
		// удалим его из начала пути, взяв оставшуюся часть по длине строки "Ext\".
		ИмяОбъекта = Сред(ИмяОбъекта, СтрДлина("Ext\") + 1);
	Иначе
		// Для файлов всех остальных объектов очистим каталог "Ext" заменой на "\".
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "\Ext\", "\");
	КонецЕсли;
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "\", Разделитель);
	ИмяОбъекта = ПолучитьИмяФайлаБезРасширения(ИмяОбъекта);
	
	МассивПутиАнгл = СтрРазделить(ИмяОбъекта, Разделитель, Ложь);
	КоличествоЭлементовПутиАнгл = МассивПутиАнгл.Количество();
	
	// Для файлов конфигурации, лежащих в самом каталоге выгрузки, задаем имя объекта как "Конфигурация" (или "Configuration").
	Если КоличествоЭлементовПутиАнгл < 2 Тогда
		Возврат ПолучитьТипОбъектаПоТаблицеТипов("Конфигурация", "Имя", КолонкаИмени);
	КонецЕсли;
	
	ПутьФактический = "";
	
	// Для общих форм всегда берем 2 элемента пути, т.к. в пути к модулю будет 4 элемента пути, и объект определяется неправильно.
	Если СтрСравнить(МассивПутиАнгл[0], "CommonForms") = 0 Тогда
		КоличествоЭлементов = 2;
	Иначе
		КоличествоЭлементов = ?(КоличествоЭлементовПутиАнгл < 4, 2, 4);
	КонецЕсли;
	
	МассивПути = Новый Массив;
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		
		ЭлементПути = МассивПутиАнгл[Счетчик - 1];
		// Если элемент пути стоит на нечетном месте (нумерация с 1) в имени файла,
		// то ищем его эквивалент на русском языке в единственном числе.
		Если Счетчик % 2 = 1 Тогда
			ЭлементПути = ПолучитьТипОбъектаПоТаблицеТипов(ЭлементПути, "ИмяАнглМнФормы", КолонкаИмени);
		КонецЕсли;
		
		// Четные элементы пути оставляем как есть - это наименования объектов метаданных.
		МассивПути.Добавить(ЭлементПути);
		
	КонецЦикла;
	
	ПутьФактический = СтрСоединить(МассивПути, Разделитель);
	
	Возврат ПутьФактический;
	
КонецФункции

#КонецОбласти

#Область КомандыЗапускаКонфигуратораВПакетномРежиме

// Функция запускает проверяемую конфигурацию в режиме конфигуратора,
// подключается к хранилищу, обновляется из него и обновляет информационную базу.
//
Функция ЗагрузитьКонфигурациюИзХранилища() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /ConfigurationRepositoryF " + ЗаключитьСтрокуВКавычки(КаталогХранилища)
		+ " /ConfigurationRepositoryN " + ЗаключитьСтрокуВКавычки(ПользовательХранилища)
		+ " /ConfigurationRepositoryP " + ЗаключитьСтрокуВКавычки(ПарольХранилища)
		+ " /ConfigurationRepositoryUpdateCfg -revised -force"
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога)
		+ " /DisableStartupDialogs /DisableStartupMessages";
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	ФайлЛога = Новый ТекстовыйДокумент;
	ФайлЛога.Прочитать(ИмяФайлаЛога);
	ТекстЛога = ФайлЛога.ПолучитьТекст();
	
	апк_ФайлУдалить(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора и подключается к хранилищу.
//
Функция ПодключитьКонфигурациюКХранилищу() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /ConfigurationRepositoryF " + ЗаключитьСтрокуВКавычки(КаталогХранилища)
		+ " /ConfigurationRepositoryN " + ЗаключитьСтрокуВКавычки(ПользовательХранилища)
		+ " /ConfigurationRepositoryP " + ЗаключитьСтрокуВКавычки(ПарольХранилища)
		+ " /ConfigurationRepositoryBindCfg -forceBindAlreadyBindedUser -forceReplaceCfg"
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога)
		+ " /DisableStartupDialogs /DisableStartupMessages";
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, Истина, КодВозврата);
	
	// Подключение прошло успешно, возвращаем пустую строку.
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	// Подключение прошло с ошибкой, возвращаем текст ошибки.
	ТекстЛога = апк_ФайлПолучитьТекст(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора и захватывает все объекты в хранилище.
//
Функция ЗахватитьОбъектыКонфигурацииВХранилище() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /ConfigurationRepositoryF " + ЗаключитьСтрокуВКавычки(КаталогХранилища)
		+ " /ConfigurationRepositoryN " + ЗаключитьСтрокуВКавычки(ПользовательХранилища)
		+ " /ConfigurationRepositoryP " + ЗаключитьСтрокуВКавычки(ПарольХранилища)
		+ " /ConfigurationRepositoryLock -revised"
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога)
		+ " /DisableStartupDialogs /DisableStartupMessages";
	
	// Код возврата в данном случае не анализируем, т.к. он будет отличен от 0,
	// даже если хотя бы один объект захватить не удалось.
	ЗапуститьПриложение(КоманднаяСтрока,, Истина);
	
	// Заполняем таблицу захваченных объектов.
	Статус = ЗаполнитьТаблицуЗахваченныхОбъектов(ИмяФайлаЛога);
	
	Возврат Статус;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора, чтобы выгрузить файлы XML.
// Возвращает пустую строку, если выгрузка удачна, иначе лог выгрузки.
//
Функция ВыгрузитьКонфигурациюВФайлыXML() Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	СоздатьКаталог(КаталогВыгрузки);
	СоздатьКаталог(КаталогВыгрузкиРезультат);
	
	// Выгружаем конфигурацию в файлы xml.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"" /DumpConfigToFiles ""%5"" /Out ""%6"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогВыгрузки,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	Статус = ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога);
	Возврат Статус;
	
КонецФункции

// Выполняет частичную загрузку файлов XML.
//
Функция ЗагрузитьКонфигурациюИзФайловXMLПоСпискуФайлов(КаталогЗагрузки, СписокФайловДляЗагрузкиXML)
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	// Загружаем конфигурацию из файлов xml.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"" /LoadConfigFromFiles ""%5"" -listFile ""%6"" /Out ""%7"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогЗагрузки,
		СписокФайловДляЗагрузкиXML,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		апк_ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	Статус = ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога);
	
	Возврат Статус;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора, чтобы загрузить файлы XML.
//
Функция ЗагрузитьКонфигурациюИзФайловXML() Экспорт
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	Статус = ЗагрузитьКореньКонфигурацииИзФайловXML();
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Статус = ЗагрузитьОбъектыКонфигурацииИзФайловXML();
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗагрузитьКореньКонфигурацииИзФайловXML()
	
	// Подготовим отдельно файл конфигурации для загрузки.
	КаталогЗагрузки = "";
	СписокФайловДляЗагрузкиXML = ПодготовитьФайлКонфигурацииДляЗагрузкиФайловXML(КаталогЗагрузки);
	Если ПустаяСтрока(СписокФайловДляЗагрузкиXML) Тогда
		Возврат "";
	КонецЕсли;
	
	Статус = ЗагрузитьКонфигурациюИзФайловXMLПоСпискуФайлов(КаталогЗагрузки, СписокФайловДляЗагрузкиXML);
	
	апк_ФайлУдалить(КаталогЗагрузки);
	апк_ФайлУдалить(СписокФайловДляЗагрузкиXML);
	
	Возврат Статус;
	
КонецФункции

Функция ЗагрузитьОбъектыКонфигурацииИзФайловXML()
	
	// Подготовим файл измененных объектов XML, которые нужно загрузить в конфигурацию.
	СписокФайловДляЗагрузкиXML = ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиФайловXML();
	Если ПустаяСтрока(СписокФайловДляЗагрузкиXML) Тогда
		// Если измененных файлов нет, то вернется пустая строка. Загружать нечего, выходим.
		Возврат "";
	КонецЕсли;
	
	Статус = ЗагрузитьКонфигурациюИзФайловXMLПоСпискуФайлов(КаталогВыгрузкиРезультат, СписокФайловДляЗагрузкиXML);
	
	апк_ФайлУдалить(СписокФайловДляЗагрузкиXML);
	
	Возврат Статус;
	
КонецФункции

Функция ОбновитьКонфигурациюБД() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	КлючСервер = "";
	Если ТипИсточника = 1 Тогда
		КлючСервер = " -Server";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе) 
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /UpdateDBCfg " + КлючСервер
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	ТекстЛога = ПолучитьЛогВыгрузкиФайловКонфигурации(ИмяФайлаЛога);
	
	Возврат ?(СтрНайти(ТекстЛога, Нстр("ru = 'Обновление конфигурации успешно завершено'")) > 0, "", ТекстЛога);
	
КонецФункции

Функция ПоместитьИзмененныеОбъектыВХранилище() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	Статус = ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиВХранилище();
	Если НЕ ПустаяСтрока(Статус) Тогда
		// При создании файла произошла ошибка, возвращаем текст ошибки.
		Возврат Статус;
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СписокИзмененныхОбъектов) Тогда
		// Файла не существует, значит, нет измененных объектов для помещения в хранилище, выходим.
		Возврат "";
	КонецЕсли;
	
	// Поместим только захваченные измененные объекты в хранилище.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"""
		+ " /ConfigurationRepositoryF ""%5"""
		+ " /ConfigurationRepositoryN ""%6"""
		+ " /ConfigurationRepositoryP ""%7"""
		+ " /ConfigurationRepositoryCommit -objects ""%8"" -comment ""%9"""
		+ " /Out ""%10"""
		+ " /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогХранилища,
		ПользовательХранилища,
		ПарольХранилища,
		СписокИзмененныхОбъектов,
		ТекстКомментария,
		ИмяФайлаЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	// Помещение объектов прошло успешно, возвращаем пустую строку.
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	// Помещение объектов прошло с ошибкой, возвращаем текст ошибки.
	ТекстЛога = апк_ФайлПолучитьТекст(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

Функция ОтменитьЗахватОбъектовВХранилище() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	// Отменим захваченные объекты в хранилище.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"""
		+ " /ConfigurationRepositoryF ""%5"""
		+ " /ConfigurationRepositoryN ""%6"""
		+ " /ConfigurationRepositoryP ""%7"""
		+ " /ConfigurationRepositoryUnlock -force"
		+ " /Out ""%8"""
		+ " /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогХранилища,
		ПользовательХранилища,
		ПарольХранилища,
		ИмяФайлаЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	// Отмена захвата объектов прошла успешно, возвращаем пустую строку.
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	// Отмена захвата объектов завершилась с ошибкой, возвращаем текст ошибки.
	ТекстЛога = апк_ФайлПолучитьТекст(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуСтандартовИзМакета() Экспорт
	
	ТаблицаСтандартов = Новый ТаблицаЗначений;
	
	МакетСтандарты = ПолучитьМакет("СтандартыРазработки");
	
	ОбластьСтандартов = МакетСтандарты.ПолучитьОбласть();
	Для НомерКолонки = 1 По ОбластьСтандартов.ШиринаТаблицы Цикл
		ИмяКолонки = ОбластьСтандартов.Область(1, НомерКолонки).Текст;
		ТаблицаСтандартов.Колонки.Добавить(ИмяКолонки);
	КонецЦикла;
	
	Для НомерСтроки = 2 По ОбластьСтандартов.ВысотаТаблицы Цикл
		НовыйСтандарт = ТаблицаСтандартов.Добавить();
		Для НомерКолонки = 1 По ОбластьСтандартов.ШиринаТаблицы Цикл
			ИмяКолонки = ОбластьСтандартов.Область(1, НомерКолонки).Текст;
			НовыйСтандарт[ИмяКолонки] = ОбластьСтандартов.Область(НомерСтроки, НомерКолонки).Текст;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаСтандартов;
	
КонецФункции

// Возвращает "Истина", если ПредыдущийРелиз меньше СледующийРелиз.
//
Функция апк_РелизыПоПорядку(ПредыдущийРелиз, СледующийРелиз)
	
	Если ПустаяСтрока(ПредыдущийРелиз) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПредыдущийРелиз = СледующийРелиз Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивЧиселПредыдущегоРелиза = СтрРазделить(ПредыдущийРелиз, ".", Ложь);
	МассивЧиселСледующегоРелиза = СтрРазделить(СледующийРелиз, ".", Ложь);
	
	КоличествоЧиселПредыдущегоРелиза = МассивЧиселПредыдущегоРелиза.Количество();
	Если КоличествоЧиселПредыдущегоРелиза <> МассивЧиселСледующегоРелиза.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерЭлемента = 0 По КоличествоЧиселПредыдущегоРелиза - 1 Цикл
		ЧислоПредыдущего = Число(МассивЧиселПредыдущегоРелиза[НомерЭлемента]);
		ЧислоСледующего = Число(МассивЧиселСледующегоРелиза[НомерЭлемента]);
		Если ЧислоПредыдущего <> ЧислоСледующего Тогда
			Возврат (ЧислоСледующего > ЧислоПредыдущего);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьПлатформу836() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	
	Если апк_РелизыПоПорядку("8.3.6.0", ВерсияПриложения) Тогда
		Возврат "";
	КонецЕсли;
	
	Синоним = Метаданные().Синоним;
	
	Статус = НСтр("ru='Для запуска внешней обработки ""%1"" необходима версия платформы не меньше, чем 8.3.6.
		|Текущая версия %2'");
	Статус = СтрШаблон(Статус, Синоним, ВерсияПриложения);
	
	Возврат Статус;
	
КонецФункции

Функция ЗаполнитьТаблицуЗахваченныхОбъектов(ФайлЗахваченныхОбъектов, УдалитьФайл = Истина)
	
	ЗахваченныеОбъекты.Очистить();
	
	Если НЕ апк_ФайлСуществует(ФайлЗахваченныхОбъектов) Тогда
		ТекстОшибки = НСтр("ru='Не найден файл захваченных объектов, указанный по пути:'")
			+ Символы.ПС + ФайлЗахваченныхОбъектов;
		Возврат ТекстОшибки;
	КонецЕсли;
	
	// Получаем лог захваченных объектов.
	ТекстФайлаЗахваченныхОбъектов = апк_ФайлПолучитьТекст(ФайлЗахваченныхОбъектов, УдалитьФайл);
	
	// Анализируем лог захвата объектов.
	ТекстНачалоОперации = НСтр("ru='---- Начало операции с хранилищем конфигурации ----'");
	Если СтрНайти(ТекстФайлаЗахваченныхОбъектов, ТекстНачалоОперации) = 0 Тогда
		// Если такой фразы в логе нет, значит, произошла ошибка, возвращаем текст ошибки.
		Возврат ТекстФайлаЗахваченныхОбъектов;
	КонецЕсли;
	
	ТекстОбъектЗахваченУспешно = НСтр("ru='Объект захвачен для редактирования:'");
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.УстановитьТекст(ТекстФайлаЗахваченныхОбъектов);
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТекста = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		// Пытаемся получить объект из строки лога.
		ПозицияПоиска = СтрНайти(СтрокаТекста, ":");
		Если ПозицияПоиска = 0 Тогда
			// Если в строке нет двоеточия, это не строка с объектом, пропускаем.
			Продолжить;
		КонецЕсли;
		
		ПутьОбъекта = Сред(СтрокаТекста, ПозицияПоиска + 1);
		
		// Если объект захвачен другим пользователем, то в конце строки будет имя пользователя в скобках, удаляем.
		ПозицияПоиска = СтрНайти(ПутьОбъекта, "(");
		Если ПозицияПоиска > 0 Тогда
			ПутьОбъекта = Лев(ПутьОбъекта, ПозицияПоиска - 1);
		КонецЕсли;
		
		ПутьОбъекта = СокрЛП(ПутьОбъекта);
		// Если в пути к объекту остались пробелы, значит, это не объект, пропускаем.
		Если СтрНайти(ПутьОбъекта, " ") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектЗахваченУспешно = СтрНачинаетсяС(СтрокаТекста, ТекстОбъектЗахваченУспешно);
		
		// Если в пути к объекту нет точек, тогда это корень конфигурации, переименуем его.
		Если СтрНайти(ПутьОбъекта, ".") = 0 Тогда
			ПутьОбъекта = "Конфигурация";
		КонецЕсли;
		
		НовыйОбъект = ЗахваченныеОбъекты.Добавить();
		НовыйОбъект.Объект = ПутьОбъекта;
		НовыйОбъект.ЗахваченДляРедактирования = ОбъектЗахваченУспешно;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСтатусЗахватаОбъектаВХранилище(ПутьОбъекта)
	
	// Если не указана ни одна настройка, связанная с хранилищем, то предполагаем, что объект по умолчанию захвачен.
	Если ПустаяСтрока(КаталогХранилища)
	   И ПустаяСтрока(СписокИзмененныхОбъектов)
	   И (НЕ ПомещатьИзмененныеОбъектыВХранилище) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗахваченВХранилище = Ложь;
	
	// Иначе определяем статус захвата объекта в таблице захваченных объектов.
	СтрокаЗахваченногоОбъекта = ЗахваченныеОбъекты.Найти(ПутьОбъекта, "Объект");
	Если (СтрокаЗахваченногоОбъекта = Неопределено) Тогда
		ЗахваченВХранилище = ПолучитьСтатусЗахватаРодителяОбъектаВХранилище(ПутьОбъекта);
	Иначе
		ЗахваченВХранилище = СтрокаЗахваченногоОбъекта.ЗахваченДляРедактирования;
	КонецЕсли;
	
	Возврат ЗахваченВХранилище;
	
КонецФункции

Функция ПолучитьСтатусЗахватаРодителяОбъектаВХранилище(ПутьОбъекта)
	
	// Некоторые объекты, например, команды, нельзя захватить в хранилище.
	// Для них получим состояние родительского объекта.
	МассивЭлементовПути = СтрРазделить(ПутьОбъекта, ".", Ложь);
	Если МассивЭлементовПути.Количество() < 2 Тогда
		// У объекта нет родительского объекта, выходим.
		Возврат Ложь;
	КонецЕсли;
	
	НомерПоследнегоЭлемента = МассивЭлементовПути.ВГраница();
	НомерПредпоследнегоЭлемента = НомерПоследнегоЭлемента - 1;
	
	// Получаем наименование предпоследнего элемента.
	ПредпоследнийЭлемент = МассивЭлементовПути[НомерПредпоследнегоЭлемента];
	Если СтрСравнить(ПредпоследнийЭлемент, "Команда") <> 0 Тогда
		// Если не команда, то выходим.
		Возврат Ложь;
	КонецЕсли;
	
	// Удаляем последний и предпоследний элемент пути.
	МассивЭлементовПути.Удалить(НомерПоследнегоЭлемента);
	МассивЭлементовПути.Удалить(НомерПредпоследнегоЭлемента);
	
	ОбъектРодителяПуть = СтрСоединить(МассивЭлементовПути, ".");
	
	СтрокаЗахваченногоОбъекта = ЗахваченныеОбъекты.Найти(ОбъектРодителяПуть, "Объект");
	Возврат ?(СтрокаЗахваченногоОбъекта = Неопределено, Ложь, СтрокаЗахваченногоОбъекта.ЗахваченДляРедактирования);
	
КонецФункции

Функция ПрочитатьПравилаПоддержки(ФайлПравилПоддержки)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПравилПоддержки);
	
	ПараметрыПоддержки = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	ПараметрыПоддержки = СтрРазделить(ПараметрыПоддержки, ",", Ложь);
	
	КоличествоКонфигураций = 0;
	СчетчикКонфигураций = 0;
	КоличествоОбъектов = 0;
	СчетчикОбъектов = 0;
	
	МассивПараметров = Новый Массив;
	
	Если ПараметрыПоддержки.ВГраница() > 2 Тогда
		Попытка
			КоличествоКонфигураций = Число(ПараметрыПоддержки[2]);
		Исключение
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли; 
	Если КоличествоКонфигураций = 0  Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПравилаПоддержки = Новый Соответствие;
	ПравилаПоддержки.Вставить(0, "Не редактируется");
	ПравилаПоддержки.Вставить(1, "Редактируется с сохранением поддержки");
	ПравилаПоддержки.Вставить(2, "Снят с поддержки");
	
	ПравилаПоставки = Новый Соответствие;
	ПравилаПоставки.Вставить(0, "Изменения разрешены");
	ПравилаПоставки.Вставить(1, "Изменения не рекомендуются");
	ПравилаПоставки.Вставить(2, "Изменения запрещены");
	ПравилаПоставки.Вставить(-1, "Включение в конфигурацию не рекомендуется");
	
	Индекс = 3;
	Для СчетчикКонфигураций = 1 По КоличествоКонфигураций Цикл
		
		Поставка = Новый Структура;
		// Начало конфигурации
		Поставка.Вставить("УИД1",ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("Параметр", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("УИД2", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("Версия", СтрЗаменить(ПараметрыПоддержки[Индекс], """", ""));
		Индекс = Индекс + 1;
		Поставка.Вставить("Поставщик", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("КонфигурацияПоставщика", СтрЗаменить(ПараметрыПоддержки[Индекс], """", ""));
		Индекс = Индекс + 1;
		Попытка
			КоличествоОбъектов = Число(ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		МассивОбъектов = Новый Массив;
		Для СчетчикОбъектов = 1 По КоличествоОбъектов Цикл
			Если Индекс + 4 > ПараметрыПоддержки.ВГраница() Тогда
				СчетчикОбъектов = СчетчикОбъектов + 1;
				Прервать;
			КонецЕсли;
			
			НастройкиОбъекта = Новый Структура;
			НастройкиОбъекта.Вставить("ПравилоПоддержки", ПравилаПоддержки.Получить(Число(ПараметрыПоддержки[Индекс])));
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ПравилоПоставки", ПравилаПоставки.Получить(Число(ПараметрыПоддержки[Индекс])));
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ОбъектМетаданных", ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ОбъектПоставщика", ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
			
			МассивОбъектов.Добавить(НастройкиОбъекта);
		КонецЦикла; 
		
		Поставка.Вставить("Объекты", МассивОбъектов);
		
		Индекс = Индекс + 2; // пустые параметры в конце
		
		МассивПараметров.Добавить(Поставка);
	КонецЦикла; 
	
	Возврат МассивПараметров;
	
КонецФункции

Процедура ЗаполнитьПравилаПоддержки() Экспорт
	
	ПравилаПоддержкиОбъектов.Очистить();
	
	ФайлПравилПоддержки = КаталогВыгрузкиРезультат + "Ext\ParentConfigurations.bin";
	
	Если НЕ апк_ФайлСуществует(ФайлПравилПоддержки) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПравилПоддержки = ПрочитатьПравилаПоддержки(ФайлПравилПоддержки);
	Если МассивПравилПоддержки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНеРедактируется = "Не редактируется";
	
	Для Каждого Элемент Из МассивПравилПоддержки Цикл
		
		// Проверяем свойство "Параметр", если он равен 1, то изменения запрещены.
		ИзмененияЗапрещены = (Элемент.Параметр = "1");
		
		Объекты = Элемент.Объекты;
		Для Каждого Объект Из Объекты Цикл
			
			uuidОбъекта = Объект.ОбъектМетаданных;
			
			// Если объекта еще нет в таблице, то добавим его.
			СтрокаТаблицы = ПравилаПоддержкиОбъектов.Найти(uuidОбъекта, "Объект");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ПравилаПоддержкиОбъектов.Добавить();
				СтрокаТаблицы.Объект = uuidОбъекта;
				СтрокаТаблицы.ПравилоПоддержки = ?(ИзмененияЗапрещены, ТекстНеРедактируется, Объект.ПравилоПоддержки);
				
				Продолжить;
			КонецЕсли;
			
			// Если объект уже есть, проверим его правило поддержки.
			Если СтрСравнить(СтрокаТаблицы.ПравилоПоддержки, ТекстНеРедактируется) <> 0 Тогда
				// Если изменения для объекта возможны, то заменяем текущее правило поддержки.
				СтрокаТаблицы.ПравилоПоддержки = Объект.ПравилоПоддержки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеXDTO(ФайлВыгрузкиXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузкиXML);
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьИмяПодчиненногоОбъектаXDTO(ДанныеПодчиненногоОбъекта)
	
	СвойстваПодчиненногоОбъекта = ДанныеПодчиненногоОбъекта.Свойства();
	Если СвойстваПодчиненногоОбъекта.Получить("Properties") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеСвойствПодчиненногоОбъекта = ДанныеПодчиненногоОбъекта.Properties;
	
	СвойстваПодчиненногоОбъекта = ДанныеСвойствПодчиненногоОбъекта.Свойства();
	Если СвойстваПодчиненногоОбъекта.Получить("Name") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДанныеСвойствПодчиненногоОбъекта.Name;
	
КонецФункции

Функция ПолучитьUuidПодчиненногоОбъекта(ПутьОбъектаАнгл, КлассОбъекта)
	
	МассивПутиАнгл = СтрРазделить(ПутьОбъектаАнгл, ".", Ложь);
	КоличествоЭлементовПутиАнгл = МассивПутиАнгл.Количество();
	
	// Если путь объекта короче 4-х элементов, то это не подчиненный объект.
	Если КоличествоЭлементовПутиАнгл < 4 Тогда
		Возврат "";
	КонецЕсли;
	
	КлассРодителяОбъектаМнЧ = МассивПутиАнгл[0];
	ПутьРодителяОбъекта = КлассРодителяОбъектаМнЧ + "\" + МассивПутиАнгл[1];
	
	ФайлВыгрузкиXML = КаталогВыгрузкиРезультат + ПутьРодителяОбъекта + ".xml";
	Если НЕ апк_ФайлСуществует(ФайлВыгрузкиXML) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяОбъекта = МассивПутиАнгл[МассивПутиАнгл.ВГраница()];
	КлассРодителяОбъектаЕдЧ = ПолучитьТипОбъектаПоТаблицеТипов(КлассРодителяОбъектаМнЧ, "ИмяАнглМнФормы", "ИмяАнгл");
	
	Данные = ПолучитьДанныеXDTO(ФайлВыгрузкиXML);
	ДанныеОбъектаРодителя = Данные[КлассРодителяОбъектаЕдЧ];
	
	// Проверяем, что у объекта-родителя указаны подчиненные объекты.
	СвойстваОбъектаРодителя = ДанныеОбъектаРодителя.Свойства();
	Если СвойстваОбъектаРодителя.Получить("ChildObjects") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеПодчиненныхОбъектов = ДанныеОбъектаРодителя["ChildObjects"];
	
	// Проверяем, что среди подчиненных объектов есть нужный класс объекта.
	СвойстваПодчиненныхОбъектов = ДанныеПодчиненныхОбъектов.Свойства();
	Если СвойстваПодчиненныхОбъектов.Получить(КлассОбъекта) = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПодчиненныеОбъектыПоКлассу = ДанныеПодчиненныхОбъектов[КлассОбъекта];
	
	ПодчиненныйОбъект = Неопределено;
	Если ТипЗнч(ПодчиненныеОбъектыПоКлассу) = Тип("ОбъектXDTO") Тогда
		Если СтрСравнить(ПолучитьИмяПодчиненногоОбъектаXDTO(ПодчиненныеОбъектыПоКлассу), ИмяОбъекта) = 0 Тогда
			ПодчиненныйОбъект = ПодчиненныеОбъектыПоКлассу;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПодчиненныеОбъектыПоКлассу) = Тип("СписокXDTO") Тогда
		Для Каждого ПодчиненныйОбъектПоКлассу Из ПодчиненныеОбъектыПоКлассу Цикл
			Если СтрСравнить(ПолучитьИмяПодчиненногоОбъектаXDTO(ПодчиненныйОбъектПоКлассу), ИмяОбъекта) = 0 Тогда
				ПодчиненныйОбъект = ПодчиненныйОбъектПоКлассу;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПодчиненныйОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СвойстваПодчиненногоОбъекта = ПодчиненныйОбъект.Свойства();
	Если СвойстваПодчиненногоОбъекта.Получить("uuid") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПодчиненныйОбъект.uuid;
	
КонецФункции

Функция ПолучитьUuidОбъекта(ПутьОбъектаАнгл, КлассОбъекта)
	
	// XML файла для команды не существует, описание команды содержится в XML файле его родителя.
	Если КлассОбъекта = "Command" Тогда
		Возврат ПолучитьUuidПодчиненногоОбъекта(ПутьОбъектаАнгл, КлассОбъекта);
	КонецЕсли;
	
	ИмяФайла = СтрЗаменить(ПутьОбъектаАнгл, ".", "\");
	ФайлВыгрузкиXML = КаталогВыгрузкиРезультат + ИмяФайла + ".xml";
	
	Если НЕ апк_ФайлСуществует(ФайлВыгрузкиXML) Тогда
		Возврат "";
	КонецЕсли;
	
	Данные = ПолучитьДанныеXDTO(ФайлВыгрузкиXML);
	
	Возврат Данные[КлассОбъекта].uuid;
	
КонецФункции

Процедура ЗаполнитьПравилаПоддержкиДляИзмененныхОбъектов() Экспорт
	
	Если ПравилаПоддержкиОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Если НЕ СтрокаРезультата.Изменен Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаРезультата.ЗахваченВХранилище Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьОбъектаАнглМнЧ = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(СтрокаРезультата.ПолноеИмяФайла,, "ИмяАнглМнФормы");
		КлассОбъектаМнЧ = ПолучитьКлассОбъекта(ПутьОбъектаАнглМнЧ);
		КлассОбъектаЕдЧ = ПолучитьТипОбъектаПоТаблицеТипов(КлассОбъектаМнЧ, "ИмяАнглМнФормы", "ИмяАнгл");
		
		uuidОбъекта = ПолучитьUuidОбъекта(ПутьОбъектаАнглМнЧ, КлассОбъектаЕдЧ);
		
		СтрокаПравилПоддержки = ПравилаПоддержкиОбъектов.Найти(uuidОбъекта, "Объект");
		Если СтрокаПравилПоддержки <> Неопределено Тогда
			СтрокаРезультата.РедактированиеРазрешено = (СтрокаПравилПоддержки.ПравилоПоддержки <> "Не редактируется");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьТаблицуИнструкцийПрепроцессора(Знач ТекстМодуля, ТолькоВерхнегоУровня = Ложь)
	
	ТаблицаИнструкций = Новый ТаблицаЗначений();
	ТаблицаИнструкций.Колонки.Добавить("ТекстИнструкции");
	ТаблицаИнструкций.Колонки.Добавить("ТекстИнструкцииВРег");
	ТаблицаИнструкций.Колонки.Добавить("ПозицияЕсли");
	ТаблицаИнструкций.Колонки.Добавить("ПозицияИначе");
	ТаблицаИнструкций.Колонки.Добавить("ПозицияКонецЕсли");
	
	ДеревоИнструкций = Новый ДеревоЗначений;
	Для Каждого Колонка Из ТаблицаИнструкций.Колонки Цикл
		ДеревоИнструкций.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	ДеревоИнструкций.Колонки.Добавить("ЭтоИнструкция");
	ДеревоИнструкций.Колонки.Добавить("ЭтоИнструкцияВерхнегоУровня");
	
	ШаблонПоиска = "^[ \t]*#[ \t]*(?:Если|Иначе|КонецЕсли).*";
	
	МассивРезультатов = РегулярныеВыраженияНайти(ТекстМодуля, ШаблонПоиска,, Истина, Истина);
	Если МассивРезультатов = Ложь Тогда
		Возврат ТаблицаИнструкций;
	КонецЕсли;
	
	ТекущаяИнструкция = ДеревоИнструкций.Строки.Добавить();
	ТекущаяИнструкция.ЭтоИнструкция = Ложь;
	
	Для Каждого ЭлементМассива Из МассивРезультатов Цикл
		
		ПозицияИнструкции = ЭлементМассива.FirstIndex + 1;
		
		ТекстИнструкции = СокрЛП(ЭлементМассива.Value);
		ТекстИнструкцииВРег = ВРег(ТекстИнструкции);
		ТекстИнструкцииВРег = СтрЗаменить(ТекстИнструкцииВРег, " ", "");
		ТекстИнструкцииВРег = СтрЗаменить(ТекстИнструкцииВРег, Символы.Таб, "");
		
		Если СтрНачинаетсяС(ТекстИнструкцииВРег, ВРег("#Если")) Тогда
			
			НоваяИнструкция = ТекущаяИнструкция.Строки.Добавить();
			НоваяИнструкция.ТекстИнструкции = ТекстИнструкции;
			НоваяИнструкция.ТекстИнструкцииВРег = ТекстИнструкцииВРег;
			НоваяИнструкция.ПозицияЕсли = ПозицияИнструкции;
			НоваяИнструкция.ЭтоИнструкция = Истина;
			НоваяИнструкция.ЭтоИнструкцияВерхнегоУровня = (ТекущаяИнструкция.Родитель = Неопределено);
			
			ТекущаяИнструкция = НоваяИнструкция;
			
		ИначеЕсли ТекстИнструкцииВРег = ВРег("#Иначе") Тогда
			
			ТекущаяИнструкция.ПозицияИначе = ПозицияИнструкции;
			
		ИначеЕсли СтрНачинаетсяС(ТекстИнструкцииВРег, ВРег("#КонецЕсли")) Тогда
			
			ТекущаяИнструкция.ПозицияКонецЕсли = ПозицияИнструкции;
			
			ТекущаяИнструкция = ТекущаяИнструкция.Родитель;
			Если ТекущаяИнструкция = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыОтбора = Новый Структура("ЭтоИнструкция", Истина);
	Если ТолькоВерхнегоУровня Тогда
		ПараметрыОтбора = Новый Структура("ЭтоИнструкцияВерхнегоУровня", Истина);
	КонецЕсли;
	
	МассивСтрокИнструкций = ДеревоИнструкций.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	Для Каждого СтрокаИнструкции Из МассивСтрокИнструкций Цикл
		
		НоваяИнструкция = ТаблицаИнструкций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяИнструкция, СтрокаИнструкции);
		
	КонецЦикла;
	
	Возврат ТаблицаИнструкций;
	
КонецФункции

Функция РегулярныеВыраженияИнициализация()
	
	Если ОбъектРегулярныхВыражений <> Неопределено Тогда
		Возврат ОбъектРегулярныхВыражений;
	КонецЕсли;
	
	ОбъектРегулярныхВыражений = Новый COMОбъект("VBScript.RegExp");
	
	Возврат ОбъектРегулярныхВыражений;
	
КонецФункции

Функция РегулярныеВыраженияНайти(Текст, ШаблонПоиска, ИгнорироватьРегистр = Истина, ПоискВсехВхождений = Ложь,
	МногострочныйТекст = Ложь)
	
	Попытка
		
		ОбъектРегулярныхВыражений = РегулярныеВыраженияИнициализация();
		ОбъектРегулярныхВыражений.Pattern = ШаблонПоиска;
		ОбъектРегулярныхВыражений.IgnoreCase = ИгнорироватьРегистр;
		ОбъектРегулярныхВыражений.Global = ПоискВсехВхождений;
		ОбъектРегулярныхВыражений.Multiline = МногострочныйТекст;
		
		Возврат ОбъектРегулярныхВыражений.Execute(Текст);
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область РаботаСФайламиИКаталогами

Функция ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога)
	
	// Проверяем лог запуска конфигуратора.
	Если НЕ апк_ФайлСуществует(ФайлЛога) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ФайлЛога);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	апк_ФайлУдалить(ФайлЛога);
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьКаталогФайла(ПутьКФайлу) Экспорт
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Путь;
	
КонецФункции

// Получает путь к информационной базе в следующем формате:
// - для серверных баз <Путь к серверу>\<Путь к базе>
// - для файловых баз путь к каталогу где расположена информационная база с "\" в конце.
// Параметры:
//  ПутьКБазе - Строка - путь к базе, который необходимо преобразовать к формату
// Возвращаемое значение: 
//  Тип Строка.
//
Функция ПолучитьПутьКБазе(Знач ПутьКБазе) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПутьКБазе) Тогда 
		Возврат "";
	КонецЕсли;
	
	ПутьКБазе = СокрЛП(ПутьКБазе);
	
	// Если на вход подается строка соединения с файловой базой, то получаем каталог из строки соединения.
	Если СтрНайти(ПутьКБазе, "File=") > 0 Тогда
		СтрокаПодключения = НСтр(ПутьКБазе, "File");
		// Добавляем слэш в конце.
		Возврат КаталогДобавитьСлэш(СтрокаПодключения);
	КонецЕсли;
	
	// Если на вход подается строка соединения с серверной базой, то формируем путь к базе из строки соединения.
	Если СтрНайти(ПутьКБазе, "Srvr=") > 0 Тогда
		Сервер = НСтр(ПутьКБазе, "Srvr");
		ИмяБазы = НСтр(ПутьКБазе, "Ref");
		Возврат Сервер + "\" + ИмяБазы;
	КонецЕсли;
	
	// Проверяем, указан путь к серверной базе или к файловой.
	Если (СтрНайти(ПутьКБазе, ":\") = 0 И СтрНайти(ПутьКБазе, "$\") = 0 И СтрНайти(ПутьКБазе, "\\") = 0) Тогда
		// Если в пути к серверной базе указан слэш в конце, то убираем его.
		Возврат ?(Лев(ПутьКБазе, 1) = "\", Прав(ПутьКБазе, СтрДлина(ПутьКБазе) - 1), ПутьКБазе)
	КонецЕсли;
	
	// Убираем имя файла из конца пути к базе.
	КаталогБазы = ?(СтрНайти(ВРег(ПутьКБазе), "1CV8.1CD") = 0, ПутьКБазе, ПолучитьКаталогФайла(ПутьКБазе));
	// Добавляем слэш в конце каталога файловой базы.
	Возврат КаталогДобавитьСлэш(КаталогБазы);
	
КонецФункции

// Выполняет проверку того, является ли указанная база файловой.
// Параметры:
//  ПутьКБазе - Строка - путь к базе
// Возвращаемое значение:
//  Булево - Истина если база файловая, Ложь если серверная.
//
Функция ЭтоФайловаяБаза(Знач ПутьКБазе) Экспорт
	
	Если Не ЗначениеЗаполнено(ПутьКБазе) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПутьКБазе = ПолучитьПутьКБазе(ПутьКБазе);
	
	Возврат СтрНайти(ПутьКБазе, ":\") ИЛИ СтрНайти(ПутьКБазе, "$\") ИЛИ СтрНайти(ПутьКБазе, "\\");
	
КонецФункции

Функция ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
	
	Возврат ?(ЭтоФайловаяБаза(ПутьКБазе), " /F", " /S") + ЗаключитьСтрокуВКавычки(ПолучитьПутьКБазе(ПутьКБазе));
	
КонецФункции

Функция апк_ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

// Удаляет в попытке указанный файл или каталог.
// Действует аналогично методу УдалитьФайлы().
//
Процедура апк_ФайлУдалить(ИмяФайла, Маска = "")
	
	Если РежимОтладки Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ИмяФайла, Маска);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура апк_КаталогКопировать(Источник, Приемник)
	
	НайденныеФайлы = НайтиФайлы(Источник, "*");
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		ИмяФайлаИсточника = Файл.ПолноеИмя;
		ИмяФайлаПриемника = СтрЗаменить(ИмяФайлаИсточника, Источник, Приемник);
		
		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(ИмяФайлаПриемника);
			апк_КаталогКопировать(ИмяФайлаИсточника, ИмяФайлаПриемника);
		Иначе
			КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкопироватьКаталогВыгрузки(Источник, Приемник) Экспорт
	
	Попытка
		апк_КаталогКопировать(Источник, Приемник);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ОчиститьКаталогиВыгрузки(Маска = "*")
	
	Если РежимОтладки Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(КаталогВыгрузки, Маска);
		УдалитьФайлы(КаталогВыгрузкиРезультат, Маска);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ЗаключитьСтрокуВКавычки(Строка)
	
	Возврат """" + Строка + """";
	
КонецФункции

Функция КаталогДобавитьСлэш(Каталог)
	
	Если НЕ СтрЗаканчиваетсяНа(Каталог, "\") Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

// Получает текст переданного файла.
//
Функция апк_ФайлПолучитьТекст(ПолноеИмяФайла, УдалитьФайл = Истина) Экспорт
	
	// Проверяем существование файла.
	Если НЕ апк_ФайлСуществует(ПолноеИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Получаем текст.
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	Текст = ДокументТекст.ПолучитьТекст();
	
	Если УдалитьФайл Тогда
		апк_ФайлУдалить(ПолноеИмяФайла);
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСДокументомDOM

Функция ДокументDOM(ПутьКФайлу)
	
	ЧтениеXML = Новый ЧтениеXML;
	ПостроительDOM = Новый ПостроительDOM;
	ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат ДокументDOM;
	
КонецФункции

Процедура ЗаписатьДокументDOMВФайл(ДокументDOM, ПолноеИмяФайла)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПолноеИмяФайла);
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);
	
	СтрокаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
	Если СтрокаРезультата <> Неопределено Тогда
		СтрокаРезультата.Изменен = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ВычислитьВыражениеXPath(Выражение, ДокументDOM, ЭлементDOM = Неопределено)
	
	Разыменователь = ДокументDOM.СоздатьРазыменовательПИ();
	
	УзелКонтекста = ?(ЭлементDOM = Неопределено, ДокументDOM, ЭлементDOM);
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(Выражение, УзелКонтекста, Разыменователь);
	
	Возврат РезультатXPath;
	
КонецФункции

Функция ПолучитьЭлементDOMПоВыражениюXPath(Выражение, ДокументDOM, ЭлементDOM = Неопределено)
	
	РезультатXPath = ВычислитьВыражениеXPath(Выражение, ДокументDOM, ЭлементDOM);
	Возврат РезультатXPath.ПолучитьСледующий();
	
КонецФункции

Функция ПолучитьЗначениеЭлементаDOMПоВыражениюXPath(Выражение, ДокументDOM, ЭлементDOM = Неопределено,
	ЗначениеПоУмолчанию = "")
	
	ЭлементDOMРезультат = ПолучитьЭлементDOMПоВыражениюXPath(Выражение, ДокументDOM, ЭлементDOM);
	
	// Если такого выражения нет, то возвращаем значение по умолчанию.
	Если ЭлементDOMРезультат = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ЭлементDOMРезультат.ТекстовоеСодержимое;
	
КонецФункции

Функция ДобавитьДочернийЭлементDOM(ДокументDOM, ЭлементDOMРодителя, ИмяЭлемента, ТекстовоеСодержимое = "")
	
	НовыйЭлементDOM = ДокументDOM.СоздатьЭлемент(ИмяЭлемента);
	НовыйЭлементDOM.ТекстовоеСодержимое = ТекстовоеСодержимое;
	
	ЭлементDOMРодителя.ДобавитьДочерний(НовыйЭлементDOM);
	
	Возврат НовыйЭлементDOM;
	
КонецФункции

Функция ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOM, Префикс = "xmlns", ТипПолучения = "Атрибут")
	
	Если ТипПолучения = "Атрибут" Тогда
		Имя = ЭлементDOM.ПолучитьАтрибут("name");
	ИначеЕсли ТипПолучения = "Узел" Тогда
		Имя = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath(Префикс + ":Name", ДокументDOM, ЭлементDOM);
	Иначе
		Имя = "";
	КонецЕсли;
	
	Если Имя = Неопределено Тогда
		Имя = "";
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

Функция ПолучитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMЭлемента, Префикс = "xmlns")
	
	ВыражениеXPath = СтрШаблон("%1:Title/v8:item/v8:lang[text()='ru']", Префикс);
	ЭлементDOMЯзык = ПолучитьЭлементDOMПоВыражениюXPath(ВыражениеXPath, ДокументDOM, ЭлементDOMЭлемента);
	Если ЭлементDOMЯзык = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЭлементDOMv8item = ЭлементDOMЯзык.РодительскийУзел;
	
	Заголовок = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath("v8:content", ДокументDOM, ЭлементDOMv8item);
	
	Возврат Заголовок;
	
КонецФункции

Функция ПолучитьПодсказкуЭлемента(ДокументDOM, ЭлементDOMЭлемента, Префикс = "xmlns")
	
	ВыражениеXPath = СтрШаблон("%1:ToolTip/v8:item/v8:lang[text()='ru']", Префикс);
	ЭлементDOMЯзык = ПолучитьЭлементDOMПоВыражениюXPath(ВыражениеXPath, ДокументDOM, ЭлементDOMЭлемента);
	Если ЭлементDOMЯзык = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЭлементDOMv8item = ЭлементDOMЯзык.РодительскийУзел;
	
	Подсказка = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath("v8:content", ДокументDOM, ЭлементDOMv8item);
	
	Возврат Подсказка;
	
КонецФункции

Процедура ОчиститьПодсказкуЭлемента(ДокументDOM, ЭлементDOMЭлемента, Префикс = "xmlns")
	
	ВыражениеXPath = СтрШаблон("%1:ToolTip", Префикс);
	ЭлементDOMПодсказка = ПолучитьЭлементDOMПоВыражениюXPath(ВыражениеXPath, ДокументDOM, ЭлементDOMЭлемента);
	Если ЭлементDOMПодсказка <> Неопределено Тогда
		ЭлементDOMПодсказка.ТекстовоеСодержимое = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы, ЗаголовокЭлементаФормы)
	
	ЭлементDOMЗаголовок = ПолучитьЭлементDOMПоВыражениюXPath("xmlns:Title", ДокументDOM, ЭлементDOMЭлементаФормы);
	Если ЭлементDOMЗаголовок = Неопределено Тогда
		ЭлементDOMЗаголовок = ДобавитьДочернийЭлементDOM(ДокументDOM, ЭлементDOMЭлементаФормы, "Title");
	КонецЕсли;
	
	ЭлементDOMv8lang = ПолучитьЭлементDOMПоВыражениюXPath("v8:item/v8:lang[text()='ru']", ДокументDOM, ЭлементDOMЗаголовок);
	Если ЭлементDOMv8lang = Неопределено Тогда
		ЭлементDOMv8item = ДобавитьДочернийЭлементDOM(ДокументDOM, ЭлементDOMЗаголовок, "v8:item");
		ЭлементDOMv8lang = ДобавитьДочернийЭлементDOM(ДокументDOM, ЭлементDOMv8item, "v8:lang", "ru");
	КонецЕсли;
	
	ЭлементDOMv8item = ЭлементDOMv8lang.РодительскийУзел;
	ЭлементDOMv8content = ПолучитьЭлементDOMПоВыражениюXPath("v8:content", ДокументDOM, ЭлементDOMv8item);
	Если ЭлементDOMv8content = Неопределено Тогда
		ЭлементDOMv8content = ДобавитьДочернийЭлементDOM(ДокументDOM, ЭлементDOMv8item, "v8:content", ЗаголовокЭлементаФормы);
	Иначе
		ЭлементDOMv8content.ТекстовоеСодержимое = ЗаголовокЭлементаФормы;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображатьЗаголовокЭлементаФормы(ДокументDOM, ЭлементDOMЭлементаФормы, ЗначениеОтображатьЗаголовок = Ложь)
	
	ЗначениеОтображатьЗаголовокТекст = ?(ЗначениеОтображатьЗаголовок, "true", "false");
	
	ЭлементDOMУстановитьЗаголовок = ПолучитьЭлементDOMПоВыражениюXPath("xmlns:ShowTitle", ДокументDOM, ЭлементDOMЭлементаФормы);
	Если ЭлементDOMУстановитьЗаголовок = Неопределено Тогда
		ЭлементDOMУстановитьЗаголовок = ДобавитьДочернийЭлементDOM(ДокументDOM, ЭлементDOMЭлементаФормы, "ShowTitle", ЗначениеОтображатьЗаголовокТекст);
	Иначе
		ЭлементDOMУстановитьЗаголовок.ТекстовоеСодержимое = ЗначениеОтображатьЗаголовокТекст;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандартам

Функция ПолучитьХранилищеЗначений(Значение)
	
	Возврат Новый ХранилищеЗначения(Значение);
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандартам(ЗначениеФлаговНаФорме = Неопределено) Экспорт
	
	// Если вызов из формы, то заменим текущее значение флагов на выбранное пользователем.
	Если ЗначениеФлаговНаФорме <> Неопределено Тогда
		ЗначениеФлагов = ЗначениеФлаговНаФорме;
	КонецЕсли;
	
	// Если все-таки значение флагов по какой-то причине не заполнено, переопределим по умолчанию.
	Если ЗначениеФлагов = Неопределено Тогда
		ЗначениеФлагов = ПолучитьЗначенияФлаговПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт437 Тогда
		ПривестиКонфигурациюКСтандарту437();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт441 Тогда
		ПривестиКонфигурациюКСтандарту441();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт455 Тогда
		ПривестиКонфигурациюКСтандарту455();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт456 Тогда
		ПривестиКонфигурациюКСтандарту456();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт467 Тогда
		ПривестиКонфигурациюКСтандарту467();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт478 Тогда
		ПривестиКонфигурациюКСтандарту478();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт680 Тогда
		ПривестиКонфигурациюКСтандарту680();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт762 Тогда
		ПривестиКонфигурациюКСтандарту762();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт765 Тогда
		ПривестиКонфигурациюКСтандарту765();
	КонецЕсли;
	
	Если ЗначениеФлагов.Стандарт767 Тогда
		ПривестиКонфигурациюКСтандарту767();
	КонецЕсли;
	
КонецПроцедуры

#Область ПроцедурыИФункцииПриведенияКСтандарту437ОформлениеТекстовЗапросов

Функция ПривестиОбъектКСтандарту437(ПолноеИмяФайла)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.КаноническийВидКлючевыхСловЗапроса Тогда
		ОбъектИзмененПравилом = ПроверкаКаноническогоНаписанияКлючевыхСловЗапроса(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандарту437()
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту437(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту441ОбщиеТребованияКПостроениюКонструкцийВстроенногоЯзыка

Функция ПривестиОбъектКСтандарту441(ПолноеИмяФайла)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.КаноническийВидКлючевыхСловЯзыка Тогда
		ОбъектИзмененПравилом = ПроверкаКаноническогоНаписанияКлючевыхСлов(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандарту441()
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту441(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту455СтруктураМодуля

Функция ПолучитьТаблицуСтандартныхОбластейИзМакета()
	
	ТаблицаСтандартныхОбластей = Новый ТаблицаЗначений;
	ТаблицаСтандартныхОбластей.Колонки.Добавить("Область82");
	ТаблицаСтандартныхОбластей.Колонки.Добавить("Область83");
	ТаблицаСтандартныхОбластей.Колонки.Добавить("МодульФормы");
	ТаблицаСтандартныхОбластей.Колонки.Добавить("ОбщийМодуль");
	ТаблицаСтандартныхОбластей.Колонки.Добавить("МодульОбъекта");
	ТаблицаСтандартныхОбластей.Колонки.Добавить("ОтдельноеИмя");
	
	Макет = ПолучитьМакет("СтандартныеОбласти");
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовки");
	
	Для СтрокаОбласти = 1 По ОбластьМакета.ВысотаТаблицы Цикл
		
		НоваяСтрока = ТаблицаСтандартныхОбластей.Добавить();
		НоваяСтрока.Область82 = ОбластьМакета.Область(СтрокаОбласти, 1).Текст;
		НоваяСтрока.Область83 = ОбластьМакета.Область(СтрокаОбласти, 2).Текст;
		
		НоваяСтрока.МодульФормы = ЗначениеЗаполнено(ОбластьМакета.Область(СтрокаОбласти, 3).Текст);
		НоваяСтрока.ОбщийМодуль = ЗначениеЗаполнено(ОбластьМакета.Область(СтрокаОбласти, 4).Текст);
		НоваяСтрока.МодульОбъекта = ЗначениеЗаполнено(ОбластьМакета.Область(СтрокаОбласти, 5).Текст);
		НоваяСтрока.ОтдельноеИмя = ЗначениеЗаполнено(ОбластьМакета.Область(СтрокаОбласти, 6).Текст);
		
	КонецЦикла;
	
	Возврат ТаблицаСтандартныхОбластей;
	
КонецФункции

Функция ПолучитьПараметрыСтандарта455()
	
	ТаблицаСтандартныхОбластей = ПолучитьТаблицуСтандартныхОбластейИзМакета();
	ХранилищеСтандартныхОбластей = ПолучитьХранилищеЗначений(ТаблицаСтандартныхОбластей);
	
	ПараметрыСтандарта455 = Новый Структура;
	ПараметрыСтандарта455.Вставить("ХранилищеСтандартныхОбластей", ХранилищеСтандартныхОбластей);
	
	Возврат ПараметрыСтандарта455;
	
КонецФункции

Процедура ПривестиОбъектКСтандарту455(ПолноеИмяФайла, ПараметрыСтандарта455)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.ЗаменаОбластейВВидеКомментариев Тогда
		ТаблицаСтандартныхОбластей = ПараметрыСтандарта455.ХранилищеСтандартныхОбластей.Получить();
		ОбъектИзмененПравилом = ЗаменитьОбласти82(ДокументТекст, ПолноеИмяФайла, ТаблицаСтандартныхОбластей);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ЗначениеФлагов.ДобавлениеОбластиОписаниеПеременных Тогда
		ОбъектИзмененПравилом = ДобавитьОбластьОписаниеПеременных(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ЗначениеФлагов.ДобавлениеОбластиИнициализация Тогда
		ОбъектИзмененПравилом = ДобавитьОбластьИнициализация(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ЗначениеФлагов.УдалениеПустыхОбластей Тогда
		ОбъектИзмененПравилом = ПроверкаПустыхОбластей(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиКонфигурациюКСтандарту455()
	
	ПараметрыСтандарта455 = ПолучитьПараметрыСтандарта455();
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту455(ПолноеИмяФайла, ПараметрыСтандарта455);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту456ТекстыМодулей

Процедура ПривестиОбъектКСтандарту456(ПолноеИмяФайла)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.КрайняяЛеваяПозицияОписания Тогда
		ОбъектИзмененПравилом = ПроверкаОператоровСКрайнейЛевойПозиции(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ЗначениеФлагов.ДлинныеКомментарииСБольшойБуквы
	 ИЛИ ЗначениеФлагов.ПробелВНачалеКомментариев Тогда
		ОбъектИзмененПравилом = ПроверкаФорматаКомментария(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ЗначениеФлагов.ПереносКомментариевДлиннее120Символов Тогда
		ОбъектИзмененПравилом = ПроверкаКомментариевНаДопустимуюДлину(ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиКонфигурациюКСтандарту456()
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту456(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту467ОбщиеТребованияККонфигурации

Процедура ПривестиОбъектКонфигурацииКСтандарту467(ФайлКонфигурации)
	
	Если НЕ апк_ФайлСуществует(ФайлКонфигурации) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаФайлаРезультата = Результат.Найти(ФайлКонфигурации, "ПолноеИмяФайла");
	Если СтрокаФайлаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ СтрокаФайлаРезультата.ЗахваченВХранилище) ИЛИ (НЕ СтрокаФайлаРезультата.РедактированиеРазрешено) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументDOM = ДокументDOM(ФайлКонфигурации);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.СортировкаОбъектовВерхнегоУровня Тогда
		ОбъектИзмененПравилом = СортироватьОбъектыМетаданных(ДокументDOM);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьДокументDOMВФайл(ДокументDOM, ФайлКонфигурации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиМодульКСтандарту467(ПолноеИмяФайла)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.УдалениеИзбыточногоОбращенияКОбъекту Тогда
		ОбъектИзмененПравилом = УдалитьИзбыточноеОбращениеКОбъектуВКодеМодуля(ПолноеИмяФайла, ДокументТекст);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиКонфигурациюКСтандарту467()
	
	ФайлКонфигурации = КаталогВыгрузкиРезультат + "Configuration.xml";
	ПривестиОбъектКонфигурацииКСтандарту467(ФайлКонфигурации);
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиМодульКСтандарту467(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту478ПодсказкаИПроверкаЗаполнения

Функция ПолучитьМассивТиповОбъектовИмеющихРеквизиты()
	
	МассивТиповОбъектовИмеющихРеквизиты = Новый Массив;
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("ПланОбмена");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("Справочник");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("Документ");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("ЖурналДокументов");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("Перечисление");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("Отчет");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("Обработка");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("ПланВидовХарактеристик");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("ПланСчетов");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("ПланВидовРасчета");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("РегистрСведений");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("РегистрНакопления");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("РегистрБухгалтерии");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("РегистрРасчета");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("БизнесПроцесс");
	МассивТиповОбъектовИмеющихРеквизиты.Добавить("Задача");
	
	Возврат МассивТиповОбъектовИмеющихРеквизиты;
	
КонецФункции

Функция ПолучитьТаблицуОбъектовИмеющихРеквизиты(ФайлКонфигурации)
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ПолноеИмя");
	
	Если НЕ апк_ФайлСуществует(ФайлКонфигурации) Тогда
		Возврат ТаблицаОбъектов;
	КонецЕсли;
	
	МассивТиповОбъектовИмеющихРеквизиты = ПолучитьМассивТиповОбъектовИмеющихРеквизиты();
	
	ДокументDOM = ДокументDOM(ФайлКонфигурации);
	
	ЭлементDOMПодчиненныеОбъекты = ПолучитьЭлементDOMПоВыражениюXPath("//xmlns:ChildObjects", ДокументDOM);
	Если ЭлементDOMПодчиненныеОбъекты = Неопределено Тогда
		// Если подчиненных объектов нет, выходим.
		Возврат ТаблицаОбъектов;
	КонецЕсли;
	
	ДочерниеУзлы = ЭлементDOMПодчиненныеОбъекты.ДочерниеУзлы;
	Если ДочерниеУзлы.Количество() = 0 Тогда
		// Если подчиненных объектов нет, выходим.
		Возврат ТаблицаОбъектов;
	КонецЕсли;
	
	ТаблицаТиповОбъектовИнициализировать();
	
	Для Каждого ДочернийУзел Из ДочерниеУзлы Цикл
		
		ТипОбъектаАнгл = ДочернийУзел.ИмяЭлемента;
		
		ТипОбъектаРус = ПолучитьТипОбъектаПоТаблицеТипов(ТипОбъектаАнгл,,, "");
		Если МассивТиповОбъектовИмеющихРеквизиты.Найти(ТипОбъектаРус) = Неопределено Тогда
			// Если такого типа нет в массиве типов объектов, имеющих реквизиты, то пропускаем.
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = ДочернийУзел.ТекстовоеСодержимое;
		
		ТипОбъектаАнглМнФормы = ПолучитьТипОбъектаПоТаблицеТипов(ТипОбъектаАнгл,, "ИмяАнглМнФормы", "");
		Если ПустаяСтрока(ТипОбъектаАнглМнФормы) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяФайла = СтрШаблон("%1%2\%3.xml", КаталогВыгрузкиРезультат, ТипОбъектаАнглМнФормы, ИмяОбъекта);
		Если НЕ апк_ФайлСуществует(ПолноеИмяФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОбъекта = ТаблицаОбъектов.Добавить();
		СтрокаОбъекта.ПолноеИмя = ПолноеИмяФайла;
		
	КонецЦикла;
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

Функция ПолучитьТаблицуТиповОбъектовРеквизит()
	
	ТаблицаТиповОбъектовРеквизит = Новый ТаблицаЗначений;
	ТаблицаТиповОбъектовРеквизит.Колонки.Добавить("ТипОбъекта");
	ТаблицаТиповОбъектовРеквизит.Колонки.Добавить("ВыражениеПоиска");
	ТаблицаТиповОбъектовРеквизит.Колонки.Добавить("Префикс");
	ТаблицаТиповОбъектовРеквизит.Колонки.Добавить("ТипПолучения");
	
	// Реквизит или реквизит табличной части.
	НовыйТипРеквизита = ТаблицаТиповОбъектовРеквизит.Добавить();
	НовыйТипРеквизита.ТипОбъекта = "Реквизит";
	НовыйТипРеквизита.ВыражениеПоиска = "//xmlns:ChildObjects/xmlns:Attribute/xmlns:Properties";
	НовыйТипРеквизита.Префикс = "xmlns";
	НовыйТипРеквизита.ТипПолучения = "Узел";
	
	// Стандартный реквизит.
	НовыйТипРеквизита = ТаблицаТиповОбъектовРеквизит.Добавить();
	НовыйТипРеквизита.ТипОбъекта = "СтандартныйРеквизит";
	НовыйТипРеквизита.ВыражениеПоиска = "//xmlns:Properties/xmlns:StandardAttributes/xr:StandardAttribute";
	НовыйТипРеквизита.Префикс = "xr";
	НовыйТипРеквизита.ТипПолучения = "Атрибут";
	
	// Измерение.
	НовыйТипРеквизита = ТаблицаТиповОбъектовРеквизит.Добавить();
	НовыйТипРеквизита.ТипОбъекта = "Измерение";
	НовыйТипРеквизита.ВыражениеПоиска = "//xmlns:ChildObjects/xmlns:Dimension/xmlns:Properties";
	НовыйТипРеквизита.Префикс = "xmlns";
	НовыйТипРеквизита.ТипПолучения = "Узел";
	
	// Ресурс.
	НовыйТипРеквизита = ТаблицаТиповОбъектовРеквизит.Добавить();
	НовыйТипРеквизита.ТипОбъекта = "Ресурс";
	НовыйТипРеквизита.ВыражениеПоиска = "//xmlns:ChildObjects/xmlns:Resource/xmlns:Properties";
	НовыйТипРеквизита.Префикс = "xmlns";
	НовыйТипРеквизита.ТипПолучения = "Узел";
	
	Возврат ТаблицаТиповОбъектовРеквизит;
	
КонецФункции

Функция ПолучитьПараметрыСтандарта478()
	
	ФайлКонфигурации = КаталогВыгрузкиРезультат + "Configuration.xml";
	ТаблицаОбъектовИмеющихРеквизиты = ПолучитьТаблицуОбъектовИмеющихРеквизиты(ФайлКонфигурации);
	
	ТаблицаТиповОбъектовРеквизит = ПолучитьТаблицуТиповОбъектовРеквизит();
	
	// Составим исключения объектов, которые не нужно менять.
	// При загрузке XML файлов этих объектов возникает ошибка, и XML не грузится.
	МассивИсключенийОбъектов = Новый Массив;
	МассивИсключенийОбъектов.Добавить(КаталогВыгрузкиРезультат + "InformationRegisters\НастройкиТранспортаОбменаОбластейДанных.xml");
	МассивИсключенийОбъектов.Добавить(КаталогВыгрузкиРезультат + "InformationRegisters\НастройкиТранспортаОбменаОбластиДанных.xml");
	МассивИсключенийОбъектов.Добавить(КаталогВыгрузкиРезультат + "Documents\ДоверенностьВыданная.xml");
	МассивИсключенийОбъектов.Добавить(КаталогВыгрузкиРезультат + "Documents\КорректировкаПриобретения.xml");
	МассивИсключенийОбъектов.Добавить(КаталогВыгрузкиРезультат + "Documents\КорректировкаРеализации.xml");
	
	ПараметрыСтандарта478 = Новый Структура;
	ПараметрыСтандарта478.Вставить("ТаблицаОбъектовИмеющихРеквизиты", ТаблицаОбъектовИмеющихРеквизиты);
	ПараметрыСтандарта478.Вставить("ТаблицаТиповОбъектовРеквизит", ТаблицаТиповОбъектовРеквизит);
	ПараметрыСтандарта478.Вставить("МассивИсключенийОбъектов", МассивИсключенийОбъектов);
	
	Возврат ПараметрыСтандарта478;
	
КонецФункции

Процедура ПривестиОбъектКСтандарту478(ПолноеИмяФайла, ПараметрыСтандарта478)
	
	ТаблицаТиповОбъектовРеквизит = ПараметрыСтандарта478.ТаблицаТиповОбъектовРеквизит;
	
	ДокументDOM = ДокументDOM(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.ОчисткаПодсказокРеквизитов Тогда
		ОбъектИзмененПравилом = ОчиститьПодсказкиРеквизитов(ДокументDOM, ТаблицаТиповОбъектовРеквизит);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьДокументDOMВФайл(ДокументDOM, ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиКонфигурациюКСтандарту478()
	
	Если ЗначениеФлагов.ОчисткаПодсказокРеквизитов Тогда
		
		ПараметрыСтандарта478 = ПолучитьПараметрыСтандарта478();
		МассивИсключенийОбъектов = ПараметрыСтандарта478.МассивИсключенийОбъектов;
		
		ТаблицаОбъектов = ПараметрыСтандарта478.ТаблицаОбъектовИмеющихРеквизиты;
		Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
			
			ПолноеИмяФайла = СтрокаОбъекта.ПолноеИмя;
			СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
			
			Если СтрокаФайлаРезультата = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивИсключенийОбъектов.Найти(ПолноеИмяФайла) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
				ПривестиОбъектКСтандарту478(ПолноеИмяФайла, ПараметрыСтандарта478);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту680ПоддержкаТолстогоКлиентаУправляемоеПриложениеКлиентСервер

Функция ПривестиОбъектКСтандарту680(ПолноеИмяФайла)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.ЗаключениеКодаВИнструкциюПрепроцессора Тогда
		ОбъектИзмененПравилом = ЗаключитьМодульВИнструкциюПрепроцессора(ДокументТекст, ПолноеИмяФайла);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла);
	КонецЕсли;
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандарту680()
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту680(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту762ЛокализацияДинамическихСписков

Функция ПривестиОбъектКСтандарту762(ПолноеИмяФайла)
	
	ДокументDOM = ДокументDOM(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.ЗаполнениеЗаголовковКолонокДинамическогоСписка Тогда
		ОбъектИзмененПравилом = ЗаполнитьЗаголовкиПолейДинамическогоСписка(ДокументDOM);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьДокументDOMВФайл(ДокументDOM, ПолноеИмяФайла);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандарту762()
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "Form.xml", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту762(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту765ЛокализацияЭлементовФорм

Процедура ДобавитьИсключениеВТаблицуИсключенийЗаголовковЭлементовФорм(ТаблицаИсключений, Наименование, Заголовок)
	
	НовоеИсключение = ТаблицаИсключений.Добавить();
	НовоеИсключение.Наименование = Наименование;
	НовоеИсключение.Заголовок = Заголовок;
	
КонецПроцедуры

Функция ПолучитьТаблицуИсключенийЗаголовковЭлементовФорм()
	
	ТаблицаИсключений = Новый ТаблицаЗначений;
	ТаблицаИсключений.Колонки.Добавить("Наименование");
	ТаблицаИсключений.Колонки.Добавить("Заголовок");
	
	ДобавитьИсключениеВТаблицуИсключенийЗаголовковЭлементовФорм(ТаблицаИсключений, "ФНСРоссии", "ФНС России");
	ДобавитьИсключениеВТаблицуИсключенийЗаголовковЭлементовФорм(ТаблицаИсключений, "ГруппаПользовательскихНастроек", "Группа пользовательских настроек");
	
	Возврат ТаблицаИсключений;
	
КонецФункции

Функция ПолучитьПараметрыСтандарта765()
	
	ТаблицаИсключенийЗаголовковЭлементовФорм = ПолучитьТаблицуИсключенийЗаголовковЭлементовФорм();
	ХранилищеИсключенийЗаголовковЭлементовФорм = ПолучитьХранилищеЗначений(ТаблицаИсключенийЗаголовковЭлементовФорм);
	
	ПараметрыСтандарта765 = Новый Структура;
	ПараметрыСтандарта765.Вставить("ХранилищеИсключенийЗаголовковЭлементовФорм", ХранилищеИсключенийЗаголовковЭлементовФорм);
	
	Возврат ПараметрыСтандарта765;
	
КонецФункции

Функция ПривестиОбъектКСтандарту765(ПолноеИмяФайла, ПараметрыСтандарта765)
	
	ТаблицаИсключенийЗаголовковЭлементовФорм = ПараметрыСтандарта765.ХранилищеИсключенийЗаголовковЭлементовФорм.Получить();
	
	ДокументDOM = ДокументDOM(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.ОчисткаПодсказокГруппФорм Тогда
		ОбъектИзмененПравилом = ОчиститьПодсказкиГруппФормы(ДокументDOM);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ЗначениеФлагов.ЗаполнениеЗаголовковГруппИТаблицФорм Тогда
		ОбъектИзмененПравилом = ЗаполнитьЗаголовкиТаблицИГруппФормы(ДокументDOM, ТаблицаИсключенийЗаголовковЭлементовФорм);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьДокументDOMВФайл(ДокументDOM, ПолноеИмяФайла);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандарту765()
	
	ПараметрыСтандарта765 = ПолучитьПараметрыСтандарта765();
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузкиРезультат, "Form.xml", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту765(ПолноеИмяФайла, ПараметрыСтандарта765);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииПриведенияКСтандарту767ЛокализацияРегламентныхЗаданий

Функция ПривестиОбъектКСтандарту767(ПолноеИмяФайла)
	
	ДокументDOM = ДокументDOM(ПолноеИмяФайла);
	
	ОбъектИзменен = Ложь;
	
	Если ЗначениеФлагов.ОчисткаНаименованийПредопределенныхРегламентныхЗаданий Тогда
		ОбъектИзмененПравилом = ОчиститьНаименованиеПредопределенногоРегламентногоЗадания(ДокументDOM);
		ОбъектИзменен = ОбъектИзменен ИЛИ ОбъектИзмененПравилом;
	КонецЕсли;
	
	Если ОбъектИзменен Тогда
		ЗаписатьДокументDOMВФайл(ДокументDOM, ПолноеИмяФайла);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ПривестиКонфигурациюКСтандарту767()
	
	КаталогРегламентныхЗаданий = КаталогВыгрузкиРезультат + "ScheduledJobs\";
	Если НЕ апк_ФайлСуществует(КаталогРегламентныхЗаданий) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = НайтиФайлы(КаталогРегламентныхЗаданий, "*.xml");
	Для Каждого Файл Из МассивФайлов Цикл
		
		ПолноеИмяФайла = Файл.ПолноеИмя;
		СтрокаФайлаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
		
		Если СтрокаФайлаРезультата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаФайлаРезультата.ЗахваченВХранилище И СтрокаФайлаРезультата.РедактированиеРазрешено Тогда
			ПривестиОбъектКСтандарту767(ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область АвтоформатированиеКодаМодулей

// Функция получает комментарий из строки.
// Например, строка <Строка; // Комментарий>:
//  Ложь - с символом комментария <// Комментарий>
//  Истина - без символа комментария <Комментарий>.
//
Функция ПолучитьКомментарийИзСтроки(СтрокаМодуля, БезСимволаКомментария = Истина) 
	
	// Например, URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/"; - не проверяем на комментарий.
	СтрокаСКомментарием = СтрЗаменить(СтрокаМодуля, "://", "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>");
	СтрокаКомментария = "";
	ПозицияКомментария = СтрНайти(СтрокаСКомментарием, "//");
	
	// есть комментарий
	Если ПозицияКомментария = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ПозицияКавычек = СтрНайти(СтрокаСКомментарием, """");
	// Проверяем есть ли вначале строки символ "|".
	ПервыйСимвол = Сред(СокрЛП(СтрокаСКомментарием), 1, 1);
	
	// Нет кавычек, оставляем весь комментарий.
	// Кавычки после комментария, оставляем весь комментарий.
	Если (ПозицияКавычек = 0 ИЛИ ПозицияКавычек > ПозицияКомментария) И ПервыйСимвол <> "|" Тогда
		
		Если БезСимволаКомментария Тогда
			СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария + 2);
		Иначе
			СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария);
		КонецЕсли;
		
	ИначеЕсли ПервыйСимвол = "|" Тогда
		
		КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаСКомментарием, ПозицияКомментария), """");
		
		// Строка открывается и закрывается до комментария, оставляем весь комментарий.
		Если КоличествоКавычекДоКомментария % 2 <> 0 Тогда
			Если БезСимволаКомментария Тогда
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария + 2);
			Иначе
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаСКомментарием, ПозицияКомментария), """");
		
		// Строка открывается и закрывается до комментария, оставляем весь комментарий.
		Если КоличествоКавычекДоКомментария % 2 = 0 Тогда 
			Если БезСимволаКомментария Тогда
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария + 2);
			Иначе
				СтрокаКомментария = Сред(СтрокаСКомментарием, ПозицияКомментария);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Цикл по символам начиная с ПозицияКомментария, искать первый символ <> "/".
	Если СтрДлина(СтрокаКомментария) <> 1 И БезСимволаКомментария И НЕ ПустаяСтрока(СтрокаКомментария) Тогда
		Для НомерСимвола = 1 По СтрДлина(СтрокаКомментария) Цикл
			ТекущийСимвол = Сред(СтрокаКомментария, НомерСимвола, 1);
			Если (НЕ ПустаяСтрока(СокрЛ(ТекущийСимвол)) И ТекущийСимвол <> "/") ИЛИ НомерСимвола = СтрДлина(СтрокаКомментария) Тогда
				СтрокаКомментария = СокрЛ(Сред(СтрокаКомментария, НомерСимвола));
				Прервать;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСКомментарием = СтрЗаменить(СтрокаКомментария, "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>", "://");
	
	Возврат СтрокаСКомментарием;
	
КонецФункции

Функция апк_ПолучитьРазделителиСлов()
	
	РазделителиСлов = Новый Соответствие;
	РазделителиСлов.Вставить("ЕСЛИ", 				Истина);
	РазделителиСлов.Вставить("#ЕСЛИ", 				Истина);
	РазделителиСлов.Вставить("ИНАЧЕЕСЛИ", 			Истина);
	РазделителиСлов.Вставить("КОНЕЦЕСЛИ", 			Истина);
	РазделителиСлов.Вставить("#КОНЕЦЕСЛИ", 			Истина);
	РазделителиСлов.Вставить("ТОГДА", 				Истина);
	РазделителиСлов.Вставить("И", 					Истина);
	РазделителиСлов.Вставить("ИЛИ", 				Истина);
	РазделителиСлов.Вставить("НЕ", 					Истина);
	РазделителиСлов.Вставить("ИЗ", 					Истина);
	РазделителиСлов.Вставить("КАЖДОГО", 			Истина);
	РазделителиСлов.Вставить("ДЛЯ", 				Истина);
	РазделителиСлов.Вставить("ЦИКЛ", 				Истина);
	РазделителиСлов.Вставить("ПОКА", 				Истина);
	РазделителиСлов.Вставить("ПРОЦЕДУРА", 			Истина);
	РазделителиСлов.Вставить("ФУНКЦИЯ", 			Истина);
	РазделителиСлов.Вставить("КОНЕЦПРОЦЕДУРЫ", 		Истина);
	РазделителиСлов.Вставить("КОНЕЦФУНКЦИИ", 		Истина);
	РазделителиСлов.Вставить("ЭКСПОРТ", 			Истина);
	РазделителиСлов.Вставить("ПЕРЕМ", 				Истина);
	РазделителиСлов.Вставить("ЗНАЧ", 				Истина);
	РазделителиСлов.Вставить("НОВЫЙ", 				Истина);
	РазделителиСлов.Вставить("ПЕРЕЙТИ", 			Истина);
	РазделителиСлов.Вставить("ВЫЗВАТЬИСКЛЮЧЕНИЕ", 	Истина);
	РазделителиСлов.Вставить("ПОПЫТКА", 			Истина);
	РазделителиСлов.Вставить("ИСКЛЮЧЕНИЕ", 			Истина);
	РазделителиСлов.Вставить("КОНЕЦПОПЫТКИ", 		Истина);
	РазделителиСлов.Вставить("ДОБАВИТЬОБРАБОТЧИК", 	Истина);
	РазделителиСлов.Вставить("УДАЛИТЬОБРАБОТЧИК", 	Истина);
	РазделителиСлов.Вставить("ВОЗВРАТ", 			Истина);
	РазделителиСлов.Вставить("НЕОПРЕДЕЛЕНО", 		Истина);
	РазделителиСлов.Вставить("НЕОПРЕДЕЛЕНО;", 		Истина);
	РазделителиСлов.Вставить("НЕОПРЕДЕЛЕНО,", 		Истина);
	РазделителиСлов.Вставить("<", 					Истина);
	РазделителиСлов.Вставить(">", 					Истина);
	РазделителиСлов.Вставить("=", 					Истина);
	РазделителиСлов.Вставить("+", 					Истина);
	РазделителиСлов.Вставить("*", 					Истина);
	РазделителиСлов.Вставить("/", 					Истина);
	РазделителиСлов.Вставить("%", 					Истина);
	РазделителиСлов.Вставить(".", 					Истина);
	РазделителиСлов.Вставить(",", 					Истина);
	РазделителиСлов.Вставить(";", 					Истина);
	РазделителиСлов.Вставить("(", 					Истина);
	РазделителиСлов.Вставить(")", 					Истина);
	
	Возврат РазделителиСлов;
	
КонецФункции

Функция апк_ПолучитьСтрокиТекстаЗапроса()
	
	СтрокиЗапроса = Новый Массив;
	СтрокиЗапроса.Добавить("ВЫБРАТЬ");
	СтрокиЗапроса.Добавить("ВЫБРАТЬ ПЕРВЫЕ");
	СтрокиЗапроса.Добавить("ВЫБРАТЬ *");
	СтрокиЗапроса.Добавить("|ИЗ");
	СтрокиЗапроса.Добавить("|ГДЕ");
	СтрокиЗапроса.Добавить(" ГДЕ ");
	СтрокиЗапроса.Добавить("|{ГДЕ");
	СтрокиЗапроса.Добавить("ГДЕ ЛОЖЬ");
	СтрокиЗапроса.Добавить("|ПОМЕСТИТЬ");
	СтрокиЗапроса.Добавить("|ВЫРАЗИТЬ");
	СтрокиЗапроса.Добавить("ВЫБОР КОГДА");
	СтрокиЗапроса.Добавить("ТОГДА");
	СтрокиЗапроса.Добавить("ИНДЕКСИРОВАТЬ ПО");
	СтрокиЗапроса.Добавить("УПОРЯДОЧИТЬ ПО");
	СтрокиЗапроса.Добавить("СГРУППИРОВАТЬ ПО");
	СтрокиЗапроса.Добавить("ИМЕЮЩИЕ");
	СтрокиЗапроса.Добавить("ОБЪЕДИНИТЬ");
	СтрокиЗапроса.Добавить("ОБЪЕДИНИТЬ ВСЕ");
	СтрокиЗапроса.Добавить("УНИЧТОЖИТЬ");
	СтрокиЗапроса.Добавить("NULL");
	СтрокиЗапроса.Добавить(" КАК");
	СтрокиЗапроса.Добавить("КАК ");
	СтрокиЗапроса.Добавить("ВОЗР");
	СтрокиЗапроса.Добавить("Возр");
	СтрокиЗапроса.Добавить("возр");
	СтрокиЗапроса.Добавить("УБЫВ");
	СтрокиЗапроса.Добавить("Убыв");
	СтрокиЗапроса.Добавить("ИТОГИ ПО");
	СтрокиЗапроса.Добавить("В (");
	СтрокиЗапроса.Добавить("В(");
	СтрокиЗапроса.Добавить("В ИЕРАРХИИ");
	СтрокиЗапроса.Добавить("ПЕРВЫЕ");
	СтрокиЗапроса.Добавить("ПОДОБНО");
	СтрокиЗапроса.Добавить("ПОМЕСТИТЬ");
	СтрокиЗапроса.Добавить("СОЕДИНЕНИЕ");
	СтрокиЗапроса.Добавить("НЕОПРЕДЕЛЕНО");
	СтрокиЗапроса.Добавить("ЗНАЧЕНИЕ");
	СтрокиЗапроса.Добавить("СУММА(");
	СтрокиЗапроса.Добавить("МЕЖДУ");
	СтрокиЗапроса.Добавить("НЕ ");
	СтрокиЗапроса.Добавить("И (");
	СтрокиЗапроса.Добавить("|	И");
	СтрокиЗапроса.Добавить("|И ");
	СтрокиЗапроса.Добавить(" И ");
	СтрокиЗапроса.Добавить("И &");
	СтрокиЗапроса.Добавить(" = &");
	СтрокиЗапроса.Добавить("ИЛИ");
	СтрокиЗапроса.Добавить(" ИЛИ ");
	СтрокиЗапроса.Добавить(" ИЛИ НЕ ");
	СтрокиЗапроса.Добавить(".ЭтоГруппа");
	СтрокиЗапроса.Добавить(".Ссылка");
	
	Возврат СтрокиЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуСлужебныхСлов()
	
	ТаблицаСлужебныхСлов = Новый ТаблицаЗначений;
	ТаблицаСлужебныхСлов.Колонки.Добавить("Имя");
	ТаблицаСлужебныхСлов.Колонки.Добавить("Положение");
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ТОГДА";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ЦИКЛ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ИНАЧЕ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦФУНКЦИИ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦПРОЦЕДУРЫ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ЭКСПОРТ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦПОПЫТКИ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПРОДОЛЖИТЬ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПРЕРВАТЬ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ФУНКЦИЯ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПРОЦЕДУРА";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ЕСЛИ ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "КОНЕЦЕСЛИ";
	НоваяСтрока.Положение = "Конец";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ДЛЯ ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПЕРЕМ ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПОПЫТКА";
	НоваяСтрока.Положение = "Строка";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ИНАЧЕЕСЛИ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ПОКА ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ИСКЛЮЧЕНИЕ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "ВОЗВРАТ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#ОБЛАСТЬ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#КОНЕЦОБЛАСТИ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "|";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#ЕСЛИ";
	НоваяСтрока.Положение = "Начало";
	
	НоваяСтрока = ТаблицаСлужебныхСлов.Добавить();
	НоваяСтрока.Имя = "#КОНЕЦЕСЛИ";
	НоваяСтрока.Положение = "Начало";
	
	Возврат ТаблицаСлужебныхСлов;
	
КонецФункции

// Функция возвращает Истину, если переданная строка содержит описание области, иначе - Ложь.
// Пример: Для строк "СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ", "СтандартныеПодсистемы", "Конец СтандартныеПодсистемы"
// функция возвращает значение Истина.
//
Функция СтрокаСодержитОписаниеОбласти(Строка)
	
	СокрСтрока = СтрЗаменить(Строка, Символы.Таб, " ");
	ПозицияФразы = СтрНайти(ВРег(СокрСтрока), "КОНЕЦ ");
	Если ПозицияФразы > 0 И ПустаяСтрока(Сред(СокрСтрока, 1, ПозицияФразы - 1)) Тогда
		СокрСтрока = Сред(СокрСтрока, ПозицияФразы + 5);
	КонецЕсли;
	
	СтрокаБезПробелов = СтрЗаменить(СокрСтрока, " ", "");
	СтрокаБезПробеловИТочек = СтрЗаменить(СтрокаБезПробелов, ".", "");
	Если НЕ апк_СловоСодержитТолькоКириллицу(СтрокаБезПробеловИТочек) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СокрСтрока = СокрЛП(СокрСтрока);
	
	Если СтрНайти(СокрСтрока, " ") = 0 ИЛИ СтрокаВВерхнемРегистре(СокрСтрока) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает Истину, если в строка представляет из себя закомментированный код
// иначе, (это комментарий) возвращает Ложь.
// На вход подается строка модуля без комментария.
//
Функция ЭтоКод(Знач СтрокаМодуля)
	
	Если ПустаяСтрока(СтрокаМодуля) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если Лев(СокрЛ(СтрокаМодуля), 1) = "|" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(ВРег(СтрокаМодуля), "НСТР(") > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивСимволовКода = Новый Массив;
	МассивСимволовКода.Добавить("<");
	МассивСимволовКода.Добавить(">");
	МассивСимволовКода.Добавить("=");
	
	МассивФразКомментария = Новый Массив;
	МассивФразКомментария.Добавить("ПРИМЕР:");
	МассивФразКомментария.Добавить("НАПРИМЕР,");
	МассивФразКомментария.Добавить("СМ.");
	МассивФразКомментария.Добавить("КАВЫЧКИ.");
	МассивФразКомментария.Добавить(": КАВЫЧКИ");
	МассивФразКомментария.Добавить(".<");
	МассивФразКомментария.Добавить(">.");
	МассивФразКомментария.Добавить("->");
	МассивФразКомментария.Добавить("**");
	МассивФразКомментария.Добавить("{HTTP");
	
	РазделителиСлов = апк_ПолучитьРазделителиСлов();
	СтрокаРазделителейОкончанияСлов = ",.;*/%+-><)(";
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("<xs:");
	МассивИсключений.Добавить("</xs:");
	МассивИсключений.Добавить("<?xml");
	
	ВесКода = 0;
	
	Если Лев(СтрокаМодуля, 1) = " " Тогда
		ВесКода = ВесКода - 3;
	ИначеЕсли Лев(СтрокаМодуля, 1) = Символы.Таб Тогда 
		ВесКода = ВесКода + 3;
	ИначеЕсли Лев(СтрокаМодуля, 1) = "-" Тогда 
		ВесКода = ВесКода - 3;
	Иначе
		ВесКода = ВесКода + 1;
	КонецЕсли;
	
	СтрокиЗапроса = апк_ПолучитьСтрокиТекстаЗапроса();
	Для Каждого СтрокаЗапроса Из СтрокиЗапроса Цикл 
		ПозицияСимволаЗапроса = СтрНайти(СтрокаМодуля, СтрокаЗапроса);
		Если ПозицияСимволаЗапроса = 0 Тогда 
			Продолжить;
		ИначеЕсли ПозицияСимволаЗапроса = 1 Тогда 
			ВесКода = ВесКода + 5;
		Иначе
			ВесКода = ВесКода + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрЧислоВхождений(СтрокаМодуля, """") % 2 <> 0 Тогда
		ВесКода = ВесКода + 3;
	КонецЕсли;
	
	Строка = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ");
	
	// Удаляем все, что находится в кавычках.
	ПозицияКавычки = СтрНайти(Строка, """");
	Пока ПозицияКавычки > 0 Цикл
		ПозицияЗакрывающейКавычки = СтрНайти(Сред(Строка, ПозицияКавычки + 1), """") + ПозицияКавычки;
		Если ПозицияЗакрывающейКавычки = 0 Тогда 
			Прервать;
		КонецЕсли;
		Строка = Лев(Строка, ПозицияКавычки - 1) + "Кавычки" + Сред(Строка, ПозицияЗакрывающейКавычки + 1);
		ПозицияКавычки = СтрНайти(Строка, """");
	КонецЦикла;
	
	МассивСлов = апк_СтрРазделить(Строка, " ", Ложь);
	МассивСловВВерхнем = апк_СтрРазделить(ВРег(Строка), " ", Ложь);
	
	Если МассивСловВВерхнем.Количество() > 1 Тогда
		Если МассивСловВВерхнем[0] = "ДЛЯ" Тогда
			Возврат (МассивСловВВерхнем.Найти("ЦИКЛ") <> Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СимволКода Из МассивИсключений Цикл
		ПозицияИсключения = СтрНайти(ВРег(Строка), ВРег(СимволКода));
		Если ПозицияИсключения > 0 И ПустаяСтрока(Сред(Строка, 1, ПозицияИсключения - 1)) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Счетчик = 0 По МассивСлов.Количество() - 2 Цикл
		
		Если РазделителиСлов[МассивСловВВерхнем[Счетчик]] = Неопределено 
			И РазделителиСлов[МассивСловВВерхнем[Счетчик + 1]] = Неопределено
			И СтрНайти(СтрокаРазделителейОкончанияСлов, Прав(МассивСловВВерхнем[Счетчик], 1)) = 0 Тогда
			
			ВесКода = ВесКода - 3;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаВРег = ВРег(СокрЛП(Строка));
	ТаблицаСлужебныхСлов = ПолучитьТаблицуСлужебныхСлов();
	Для Каждого СтрокаСлужебноеСлово Из ТаблицаСлужебныхСлов Цикл 
		СлужебноеСлово = СтрокаСлужебноеСлово.Имя;
		Если СтрокаСлужебноеСлово.Положение = "Начало" Тогда
			Если Лев(СтрокаВРег, СтрДлина(СлужебноеСлово)) = СлужебноеСлово Тогда
				ВесКода = ВесКода + 5;
			КонецЕсли;
		ИначеЕсли СтрокаСлужебноеСлово.Положение = "Конец" Тогда 
			Если Прав(СтрокаВРег, СтрДлина(СлужебноеСлово)) = СлужебноеСлово Тогда
				ВесКода = ВесКода + 5;
			КонецЕсли;
		ИначеЕсли СтрокаСлужебноеСлово.Положение = "Строка" Тогда 
			Если СтрокаВРег = СлужебноеСлово Тогда
				ВесКода = ВесКода + 5;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСлов.Количество() = 1 И ВесКода < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВсеСловаСЗаглавнойБуквы = Истина;
	Для Каждого Слово Из МассивСлов Цикл
		
		Слово = СокрЛП(Слово);
		ПервыйСимвол = Лев(Слово, 1);
		
		Если ПервыйСимвол = "&" Тогда 
			ВесКода = ВесКода + 1;
		ИначеЕсли НЕ (СтрокаВВерхнемРегистре(ПервыйСимвол) И НЕ СтрокаВВерхнемРегистре(Слово)) 
			И (апк_СловоСодержитТолькоЛатиницу(ПервыйСимвол) ИЛИ апк_СловоСодержитТолькоКириллицу(ПервыйСимвол)) Тогда
			
			ВесКода = ВесКода - 2;
			ВсеСловаСЗаглавнойБуквы = Ложь;
		КонецЕсли;
		
		ПозицияСкобки = СтрНайти(Слово, "(");
		СимволПередСкобкой = Сред(Слово, ПозицияСкобки - 1, 1);
		Если ПозицияСкобки > 0 
			И (апк_СловоСодержитТолькоЛатиницу(СимволПередСкобкой)
			ИЛИ апк_СловоСодержитТолькоКириллицу(СимволПередСкобкой) 
			ИЛИ апк_ЭтоЧисло(СимволПередСкобкой)) Тогда
			
			ВесКода = ВесКода + 1;
			
		ИначеЕсли ПозицияСкобки > 0 Тогда 
			
			ВесКода = ВесКода - 1;
			
		КонецЕсли;
		
		ПозицияТочки = СтрНайти(Слово, ".");
		СимволПослеТочки = Сред(Слово, ПозицияТочки + 1, 1);
		СловоПослеТочки = Сред(Слово, ПозицияТочки + 1);
		СловоДоТочки = Лев(Слово, ПозицияТочки - 1);
		Пока ПозицияТочки > 0 Цикл
			Если (апк_СловоСодержитТолькоЛатиницу(СимволПослеТочки)
				ИЛИ апк_СловоСодержитТолькоКириллицу(СимволПослеТочки) 
				ИЛИ апк_ЭтоЧисло(СимволПослеТочки) 
				ИЛИ СимволПослеТочки = "_") Тогда
				
				Если апк_ЭтоЧисло(СловоДоТочки) Тогда
					ВесКода = ВесКода - 3;
				Иначе
					ВесКода = ВесКода + 1;
				КонецЕсли;
			Иначе
				ВесКода = ВесКода - 1;
			КонецЕсли;
			
			ПозицияТочки = СтрНайти(СловоПослеТочки, ".");
			СловоПослеТочки = Сред(СловоПослеТочки, ПозицияТочки + 1);
			СимволПослеТочки = Сред(СловоПослеТочки, ПозицияТочки + 1, 1);
		КонецЦикла;
		
		Для Каждого СимволКода Из МассивСимволовКода Цикл
			Если СтрНайти(Слово, СимволКода) > 0 Тогда
				ВесКода = ВесКода + 1;
			КонецЕсли;
		КонецЦикла;
		
		ПозицияДвоеточия = СтрНайти(Слово, ":");
		СимволПередДвоеточием = Сред(Слово, ПозицияДвоеточия - 1, 1);
		Если ПозицияДвоеточия > 0 
			И (апк_СловоСодержитТолькоЛатиницу(СимволПередДвоеточием)
			ИЛИ апк_СловоСодержитТолькоКириллицу(СимволПередДвоеточием) 
			ИЛИ апк_ЭтоЧисло(СимволПередДвоеточием))Тогда
			
			ВесКода = ВесКода - 2;
		КонецЕсли;
		
		ПозицияЗвездочка = СтрНайти(Слово, "*");
		ПозицияВыбрать = СтрНайти(Врег(Слово), "ВЫБРАТЬ");
		Если ПозицияЗвездочка > 0 И ПозицияВыбрать = 0 Тогда
			ВесКода = ВесКода - 2;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СимволКода Из МассивФразКомментария Цикл
		Если СтрНайти(ВРег(Строка), СимволКода) > 0 Тогда
			ВесКода = ВесКода - 5;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСловаСЗаглавнойБуквы И МассивСлов.Количество() > 1 Тогда
		ВесКода = ВесКода + 2;
	КонецЕсли;
	
	Если МассивСлов.Количество() = 1 Тогда
		ВесКода = ВесКода - 2;
	КонецЕсли;
	
	Если Прав(СокрП(Строка), 1) = "." Тогда
		ВесКода = ВесКода - 5;
	КонецЕсли;
	
	Если СтрНайти(Строка, "...") > 0 Тогда
		ВесКода = ВесКода - 2;
	КонецЕсли;
	
	Если Лев(Строка, 1) = "=" Тогда
		ВесКода = ВесКода - 3;
	КонецЕсли;
	
	Если Прав(СтрокаВРег, 1) = ";" Тогда
		ВесКода = ВесКода + 1;
	КонецЕсли;
	
	Если Прав(СтрокаВРег, 1) = "-" Тогда
		ВесКода = ВесКода - 1;
	КонецЕсли;
	
	Если СтрокаСодержитОписаниеОбласти(СокрЛП(СтрокаМодуля)) Тогда
		ВесКода = ВесКода + 5;
	КонецЕсли;
	
	Если СтрокаМодуля = ВРег(СтрокаМодуля) Тогда
		ВесКода = ВесКода - 3;
	КонецЕсли;
	
	ЕстьСтрелка = (СтрНайти(СтрокаМодуля, "->") > 0);
	ЕстьТире = ЕстьСтрелка ИЛИ (СтрНайти(СтрокаМодуля, "-") > 0);
	ЕстьРавно = (СтрНайти(СтрокаМодуля, "=") > 0);
	ПервыйСимвол = Лев(СтрокаМодуля, 1);
	ПервыйСимволСокрЛ = Лев(СокрЛ(СтрокаМодуля), 1);
	ПоследнийСимвол = Прав(СокрП(СтрокаМодуля), 1);
	Если ЕстьТире И ЕстьРавно И (НЕ ЕстьСтрелка) Тогда 
		ВесКода = ВесКода + 10;
	ИначеЕсли (ПервыйСимволСокрЛ = "-") И (ПоследнийСимвол <> ";") Тогда 
		ВесКода = ВесКода - 10;
	ИначеЕсли (СтрЧислоВхождений(СтрокаМодуля, "-") >= 2) И (ПоследнийСимвол <> ";") Тогда 
		ВесКода = ВесКода - 10;
	ИначеЕсли (СтрНайти(СтрокаМодуля, ", ") > 0)
			И (СтрНайти(СтрокаМодуля, ";") = 0)
			И (СтрНайти(СтрокаМодуля, "(") = 0)
			И (СтрНайти(СтрокаМодуля, ")") = 0)
			И (СтрНайти(СтрокаМодуля, "+") = 0)
			И (СтрНайти(СтрокаМодуля, "=") = 0) Тогда 
			
			ВесКода = ВесКода - 10;
	КонецЕсли;
	
	Возврат ВесКода >= 0;
	
КонецФункции

// Получает массив строк из переданной строки по разделителю.
//
// Параметры:
//   Строка - переданная строка со значениями.
//   Разделитель - символ для разделения значений списка.
//   ВключатьПустые - флаг указывающий, что будут включены пустые значения.
//
// Возвращаемое значение:
//   Массив
//
Функция апк_СтрРазделить(Знач Строка, Разделитель = ";", ВключатьПустые = Истина)
	
	МассивСлов = Новый Массив;
	Строка = СокрЛП(Строка);
	Если СтрНайти(Строка, Разделитель) = 0 Тогда
		Если НЕ ПустаяСтрока(Строка) Тогда 
			МассивСлов.Добавить(Строка);
		КонецЕсли;
		Возврат МассивСлов;
	КонецЕсли;
	
	Строка = СтрЗаменить(Строка, Разделитель, Символы.ПС);
	ВсегоСтрок = СтрЧислоСтрок(Строка);
	
	Для НомерСтроки = 1 По ВсегоСтрок Цикл
		
		ТекущаяСтрока = СокрЛП(СтрПолучитьСтроку(Строка, НомерСтроки));
		Если ПустаяСтрока(ТекущаяСтрока) И (НомерСтроки = ВсегоСтрок) Тогда 
			Прервать;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекущаяСтрока) И (НЕ ВключатьПустые) Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивСлов.Добавить(ТекущаяСтрока);
	КонецЦикла;
	
	Возврат МассивСлов;
	
КонецФункции

// Возвращает Истину, если слово состоит только из кириллических букв
// иначе (латинские буквы, цифры, любые символы) возвращает Ложь.
//
Функция апк_СловоСодержитТолькоКириллицу(Слово)
	
	Если Слово = "" Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	РусскийАлфавит = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя";
	ВсегоБукв = СтрДлина(Слово);
	
	Для Счетчик = 1 По ВсегоБукв Цикл 
		
		Буква = НРег(Сред(Слово, Счетчик, 1));
		Если СтрНайти(РусскийАлфавит, Буква) = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истину, если слово состоит только из латинских букв
// иначе (кириллические буквы, цифры, любые символы) возвращает Ложь.
//
Функция апк_СловоСодержитТолькоЛатиницу(Слово)
	
	Если Слово = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АнглийскийАлфавитНижнийРегистр = "qwertyuiopasdfghjklzxcvbnm";
	СловоНижнийРегистр = НРег(Слово);
	КоличествоБуквСлова = СтрДлина(Слово);
	
	Для Счетчик = 1 По КоличествоБуквСлова Цикл
		
		БукваНижнегоРегистра = Сред(СловоНижнийРегистр, Счетчик, 1);
		
		Если СтрНайти(АнглийскийАлфавитНижнийРегистр, БукваНижнегоРегистра) = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истину, если переданный параметр - Число.
//
Функция апк_ЭтоЧисло(Строка)
	
	МассивЗнаковИсключений = Новый Массив;
	МассивЗнаковИсключений.Добавить(".");
	МассивЗнаковИсключений.Добавить("+");
	МассивЗнаковИсключений.Добавить("-");
	
	Если МассивЗнаковИсключений.Найти(Строка) <> Неопределено
		ИЛИ Строка = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Число = Число(Строка);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбластьИспользованиеМодальностиОткрыта(Строка, ОбластьОткрыта)
	
	// Если текст "ИспользованиеМодальности" не найден, то возвращаем текущее состояние области.
	Если СтрНайти(Строка, ВРег("ИспользованиеМодальности")) = 0 Тогда
		Возврат ОбластьОткрыта;
	КонецЕсли;
	
	// Иначе возвращаем Истина, если слово "Конец" не найдено.
	// И возвращаем Ложь, если слово "Конец" найдено, т.е. область закрылась.
	Возврат (СтрНайти(Строка, ВРег("Конец")) = 0);
	
КонецФункции

Функция СтрокаВВерхнемРегистре(Строка)
		
	Если Строка = """" ИЛИ Строка = "{" ИЛИ Строка = "(" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВРег(Строка) = Строка;
	
КонецФункции

Функция апк_СтрЗаменить(Знач Текст, ТекстЗамены, НомерСимволаНачало, НомерСимволаКонец)
	
	ТекстДо = Лев(Текст, НомерСимволаНачало - 1);
	ТекстПосле = Сред(Текст, НомерСимволаКонец + 1);
	
	СтрокаПробелов = "";
	Для Счетчик = НомерСимволаНачало По НомерСимволаКонец Цикл
		СтрокаПробелов = СтрокаПробелов + ТекстЗамены;
	КонецЦикла;
	
	Возврат ТекстДо + СтрокаПробелов + ТекстПосле;
	
КонецФункции

Функция ПолучитьНомерСтрокиМодуля(ТекстМодуля, НомерСимвола)
	
	ТекстДоСимвола = Лев(ТекстМодуля, НомерСимвола);
	НомерСтроки = СтрЧислоСтрок(ТекстДоСимвола);
	
	Возврат НомерСтроки;
	
КонецФункции

Функция ПолучитьТаблицуЭталоновКлючевыхСлов()
	
	МассивЭталонов = Новый Массив;
	МассивЭталонов.Добавить("Если");
	МассивЭталонов.Добавить("Тогда");
	МассивЭталонов.Добавить("Иначе");
	МассивЭталонов.Добавить("ИначеЕсли");
	МассивЭталонов.Добавить("КонецЕсли");
	МассивЭталонов.Добавить("Для");
	МассивЭталонов.Добавить("Каждого");
	МассивЭталонов.Добавить("Цикл");
	МассивЭталонов.Добавить("КонецЦикла");
	МассивЭталонов.Добавить("Выполнить");
	МассивЭталонов.Добавить("По");
	МассивЭталонов.Добавить("Прервать");
	МассивЭталонов.Добавить("Продолжить");
	МассивЭталонов.Добавить("Из");
	МассивЭталонов.Добавить("Новый");
	МассивЭталонов.Добавить("Перейти");
	МассивЭталонов.Добавить("Перем");
	МассивЭталонов.Добавить("Пока");
	МассивЭталонов.Добавить("Попытка");
	МассивЭталонов.Добавить("Исключение");
	МассивЭталонов.Добавить("КонецПопытки");
	МассивЭталонов.Добавить("ВызватьИсключение");
	МассивЭталонов.Добавить("Процедура");
	МассивЭталонов.Добавить("КонецПроцедуры");
	МассивЭталонов.Добавить("Функция");
	МассивЭталонов.Добавить("КонецФункции");
	МассивЭталонов.Добавить("Возврат");
	МассивЭталонов.Добавить("ДобавитьОбработчик");
	МассивЭталонов.Добавить("УдалитьОбработчик");
	МассивЭталонов.Добавить("И");
	МассивЭталонов.Добавить("ИЛИ");
	МассивЭталонов.Добавить("НЕ");
	МассивЭталонов.Добавить("Или");
	МассивЭталонов.Добавить("Не");
	МассивЭталонов.Добавить("каждого");
	
	ТаблицаКлючевыхСлов = Новый ТаблицаЗначений;
	ТаблицаКлючевыхСлов.Колонки.Добавить("Эталон");
	ТаблицаКлючевыхСлов.Колонки.Добавить("ДлинаЭталона");
	ТаблицаКлючевыхСлов.Колонки.Добавить("СловоДляПоиска");
	
	Для Каждого Эталон Из МассивЭталонов Цикл
		СтрокаТаблицы = ТаблицаКлючевыхСлов.Добавить();
		СтрокаТаблицы.Эталон = Эталон;
		СтрокаТаблицы.ДлинаЭталона = СтрДлина(Эталон);
		СтрокаТаблицы.СловоДляПоиска = " " + ВРег(Эталон) + " ";
	КонецЦикла;
	
	ТаблицаКлючевыхСлов.Индексы.Добавить("Эталон");
	
	Возврат ТаблицаКлючевыхСлов;
	
КонецФункции

Функция ПроверкаКаноническогоНаписанияКлючевыхСлов(ДокументТекст)
	
	// Получаем таблицу ключевых слов.
	Если ТаблицаКлючевыхСлов = Неопределено Тогда
		ТаблицаКлючевыхСлов = ПолучитьТаблицуЭталоновКлючевыхСлов();
	КонецЕсли;
	
	ФайлИзменен = Ложь;
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	
	// Заменяем в тексте модуля все лишнее на пробелы.
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, """""", "  ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "(", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, ")", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, ";", " ");
	
	ДокументТекстБуфер = Новый ТекстовыйДокумент;
	ДокументТекстБуфер.УстановитьТекст(ТекстМодуля);
	
	ОбластьОткрыта = Ложь;
	
	// Проверяем каждую строку до начала комментария.
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаМодуля = ДокументТекстБуфер.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаМодуля) Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьОткрыта = ОбластьИспользованиеМодальностиОткрыта(СтрокаМодуля, ОбластьОткрыта);
		Если ОбластьОткрыта Тогда
			Продолжить;
		КонецЕсли;
		
		// Если вся строка - это комментарий, то пропускаем.
		СтрокаМодуляСокрЛ = СокрЛ(СтрокаМодуля);
		Если СтрНачинаетсяС(СтрокаМодуляСокрЛ, "//") Тогда
			Продолжить;
		КонецЕсли;
		
		// Если строка начинается с "|", значит, это текст в кавычках, заменяем на кавычку.
		Если СтрНачинаетсяС(СтрокаМодуляСокрЛ, "|") Тогда
			ПозицияСимвола = СтрНайти(СтрокаМодуля, "|");
			СтрокаМодуля = апк_СтрЗаменить(СтрокаМодуля, """", ПозицияСимвола, ПозицияСимвола);
		КонецЕсли;
		
		ДлинаСтроки = СтрДлина(СтрокаМодуля);
		
		// Заменяем весь текст в кавычках на пробелы.
		Пока Истина Цикл
			
			ПозицияКавычекНачало = СтрНайти(СтрокаМодуля, """");
			Если ПозицияКавычекНачало = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ПозицияКавычекКонец = 0;
			
			// Если кавычка не в конце строки, то ищем закрывающую.
			Если ПозицияКавычекНачало < ДлинаСтроки Тогда
				ПозицияКавычекКонец = СтрНайти(СтрокаМодуля, """",, ПозицияКавычекНачало + 1);
			КонецЕсли;
			
			Если ПозицияКавычекКонец = 0 Тогда
				// Если закрывающая кавычка не найдена, то берем конец строки.
				ПозицияКавычекКонец = ДлинаСтроки;
			КонецЕсли;
			
			// Заменяем на пробелы весь текст в кавычках.
			СтрокаМодуля = апк_СтрЗаменить(СтрокаМодуля, " ", ПозицияКавычекНачало, ПозицияКавычекКонец);
			
		КонецЦикла;
		
		// Ищем комментарий в строке после текста кода.
		ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
		Если ПозицияКомментария > 0 Тогда
			// Удаляем все до конца строки.
			СтрокаМодуля = апк_СтрЗаменить(СтрокаМодуля, " ", ПозицияКомментария, СтрДлина(СтрокаМодуля));
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаМодуля) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИзменена = Ложь;
		СтрокаМодуляИсправленная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		// Добавляем пробелы в начале и конце, чтобы поиск сработал корректно (например, "Процедура" пишется сначала строки)
		// и совпадал номер символа в строках.
		СтрокаМодуля = " " + СтрокаМодуля + " ";
		СтрокаМодуляИсправленная = " " + СтрокаМодуляИсправленная + " ";
		
		// Проверяем правильное написание каждого ключевого слова.
		Для Каждого СтрокаТаблицы Из ТаблицаКлючевыхСлов Цикл
			
			Эталон = СтрокаТаблицы.Эталон;
			ДлинаЭталона = СтрокаТаблицы.ДлинаЭталона;
			СловоДляПоиска = СтрокаТаблицы.СловоДляПоиска;
			
			// Ищем вхождение ключевого слова в строке модуля.
			ПозицияПоиска = 0;
			Пока Истина Цикл
				
				ПозицияПоиска = СтрНайти(СтрокаМодуля, СловоДляПоиска,, ПозицияПоиска + 1);
				Если ПозицияПоиска = 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Определяем написание из исходной строки.
				ПозицияСловаНачало = ПозицияПоиска + 1;
				КлючевоеСловоИсходное = Сред(СтрокаМодуляИсправленная, ПозицияСловаНачало, ДлинаЭталона);
				
				// Ищем исходное ключевое слово среди эталонов.
				// Нужен именно поиск, а не сравнение с текущим эталоном,
				// т.к. некоторые слова могут быть написаны в нескольких вариантах,
				// например, "Каждого" и "каждого".
				Если ТаблицаКлючевыхСлов.Найти(КлючевоеСловоИсходное, "Эталон") <> Неопределено Тогда
					// Если нашли, пропускаем.
					Продолжить;
				КонецЕсли;
				
				// Иначе меняем исходное ключевое слово на эталон.
				СтрокаДо = Лев(СтрокаМодуляИсправленная, ПозицияПоиска);
				СтрокаПосле = Сред(СтрокаМодуляИсправленная, ПозицияСловаНачало + ДлинаЭталона);
				
				СтрокаМодуляИсправленная = СтрокаДо + Эталон + СтрокаПосле;
				
				СтрокаИзменена = Истина;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если СтрокаИзменена Тогда
			// Удаляем пробелы в начале и конце.
			СтрокаМодуляИсправленная = Сред(СтрокаМодуляИсправленная, 2, СтрДлина(СтрокаМодуляИсправленная) - 2);
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, СтрокаМодуляИсправленная);
			ФайлИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПолучитьМассивКлючевыхСловЗапроса()
	
	// Набор операторов для поиска кода, написанного на языке запросов.
	ОператорыЗапроса = Новый Массив;
	ОператорыЗапроса.Добавить("ВЫБРАТЬ");
	ОператорыЗапроса.Добавить("СГРУППИРОВАТЬ");
	ОператорыЗапроса.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	ОператорыЗапроса.Добавить("ИТОГИ");
	ОператорыЗапроса.Добавить("УПОРЯДОЧИТЬ");
	ОператорыЗапроса.Добавить("ПОМЕСТИТЬ");
	ОператорыЗапроса.Добавить("ОБЪЕДИНИТЬ");
	
	Возврат ОператорыЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуЭталоновКлючевыхСловЗапроса()
	
	// Составляем набор эталонов.
	МассивЭталонов = Новый Массив;
	МассивЭталонов.Добавить("ВЫБРАТЬ");
	МассивЭталонов.Добавить("ГДЕ");
	МассивЭталонов.Добавить("ИЗ");
	МассивЭталонов.Добавить("КАК");
	МассивЭталонов.Добавить("ПО");
	МассивЭталонов.Добавить("ОБЪЕДИНИТЬ");
	МассивЭталонов.Добавить("ВСЕ");
	МассивЭталонов.Добавить("ПОМЕСТИТЬ");
	МассивЭталонов.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	МассивЭталонов.Добавить("ИЕРАРХИЯ");
	МассивЭталонов.Добавить("ВЫБОР");
	МассивЭталонов.Добавить("ТОГДА");
	МассивЭталонов.Добавить("КОГДА");
	МассивЭталонов.Добавить("ЕСЛИ");
	МассивЭталонов.Добавить("КОНЕЦ");
	МассивЭталонов.Добавить("ИНАЧЕ");
	МассивЭталонов.Добавить("МЕЖДУ");
	МассивЭталонов.Добавить("В");
	МассивЭталонов.Добавить("ИЕРАРХИИ");
	МассивЭталонов.Добавить("ПОДОБНО");
	МассивЭталонов.Добавить("ИМЕЮЩИЕ");
	МассивЭталонов.Добавить("УПОРЯДОЧИТЬ");
	МассивЭталонов.Добавить("ИСТИНА");
	МассивЭталонов.Добавить("ЛОЖЬ");
	МассивЭталонов.Добавить("ПЕРВЫЕ");
	МассивЭталонов.Добавить("РАЗРЕШЕННЫЕ");
	МассивЭталонов.Добавить("ВЫРАЗИТЬ");
	МассивЭталонов.Добавить("ИТОГИ");
	МассивЭталонов.Добавить("ПОЛНОЕ");
	МассивЭталонов.Добавить("СОЕДИНЕНИЕ");
	МассивЭталонов.Добавить("ЛЕВОЕ");
	МассивЭталонов.Добавить("ПРАВОЕ");
	МассивЭталонов.Добавить("ВНУТРЕННЕЕ");
	МассивЭталонов.Добавить("РАЗЛИЧНЫЕ");
	МассивЭталонов.Добавить("УБЫВ");
	МассивЭталонов.Добавить("ВОЗР");
	МассивЭталонов.Добавить("СГРУППИРОВАТЬ");
	МассивЭталонов.Добавить("ОБЩИЕ");
	МассивЭталонов.Добавить("НЕ");
	МассивЭталонов.Добавить("И");
	МассивЭталонов.Добавить("ИЛИ");
	МассивЭталонов.Добавить("ЕСТЬ");
	МассивЭталонов.Добавить("NULL");
	МассивЭталонов.Добавить("ЕСТЬNULL");
	
	ТаблицаКлючевыхСловЗапроса = Новый ТаблицаЗначений;
	ТаблицаКлючевыхСловЗапроса.Колонки.Добавить("Эталон");
	ТаблицаКлючевыхСловЗапроса.Колонки.Добавить("ДлинаЭталона");
	ТаблицаКлючевыхСловЗапроса.Колонки.Добавить("СловоДляПоиска");
	
	Для Каждого Эталон Из МассивЭталонов Цикл
		СтрокаТаблицы = ТаблицаКлючевыхСловЗапроса.Добавить();
		СтрокаТаблицы.Эталон = Эталон;
		СтрокаТаблицы.ДлинаЭталона = СтрДлина(Эталон);
		СтрокаТаблицы.СловоДляПоиска = " " + ВРег(Эталон) + " ";
	КонецЦикла;
	
	ТаблицаКлючевыхСловЗапроса.Индексы.Добавить("Эталон");
	
	Возврат ТаблицаКлючевыхСловЗапроса;
	
КонецФункции

Функция ПолучитьМассивИсключенийСловЗапроса()
	
	// Набор строк-исключений, точно не встречающихся в запросах.
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("RU");
	МассивИсключений.Добавить("EN");
	
	Возврат МассивИсключений;
	
КонецФункции

Функция апк_СтрНайтиКавычки(ТекстМодуля, ПозицияНачала = 1)
	
	ПозицияПоиска = ПозицияНачала - 1;
	Пока Истина Цикл
		
		ПозицияПоиска = СтрНайти(ТекстМодуля, """",, ПозицияПоиска + 1);
		Если ПозицияПоиска = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияПоиска);
		СтрокаМодуля = СтрПолучитьСтроку(ТекстМодуля, НомерСтроки);
		
		СтрокаМодуляБезКомментария = УдалитьКомментарийИзСтроки(СтрокаМодуля);
		Если ПустаяСтрока(СтрокаМодуляБезКомментария) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрокаМодуляБезКомментария, """") > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПозицияПоиска;
	
КонецФункции

Функция ПроверкаКаноническогоНаписанияКлючевыхСловЗапроса(ДокументТекст)
	
	// Получаем массив ключевых слов запроса, по которым определяем, что это текст запроса.
	Если МассивКлючевыхСловЗапроса = Неопределено Тогда
		МассивКлючевыхСловЗапроса = ПолучитьМассивКлючевыхСловЗапроса();
	КонецЕсли;
	
	// Получаем таблицу ключевых слов запроса, которые необходимо заменить.
	Если ТаблицаКлючевыхСловЗапроса = Неопределено Тогда
		ТаблицаКлючевыхСловЗапроса = ПолучитьТаблицуЭталоновКлючевыхСловЗапроса();
	КонецЕсли;
	
	// Получаем массив слов, которые точно не встречаются в запросах.
	Если МассивИсключенийСловЗапроса = Неопределено Тогда
		МассивИсключенийСловЗапроса = ПолучитьМассивИсключенийСловЗапроса();
	КонецЕсли;
	
	ТекстКавычки = """";
	ТекстДвойныеКавычки = ТекстКавычки + ТекстКавычки;
	ТекстДвойныеКавычкиЗамена = "~~"; // берем такие знаки, чтобы сохранить длину замены.
	
	ФайлИзменен = Ложь;
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	
	// Заменяем в тексте модуля все лишнее на пробелы.
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстДвойныеКавычки, ТекстДвойныеКавычкиЗамена);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "(", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, ")", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "{", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "}", " ");
	
	ДокументТекстБуфер = Новый ТекстовыйДокумент;
	
	ПозицияКавычекДляЗамены = 1;
	ПозицияКавычекКонец = 0;
	Пока Истина Цикл
		
		// Ищем открывающие кавычки.
		ПозицияКавычекНачало = апк_СтрНайтиКавычки(ТекстМодуля, ПозицияКавычекКонец + 1);
		Если ПозицияКавычекНачало = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Ищем закрывающие кавычки.
		ПозицияКавычекКонец = апк_СтрНайтиКавычки(ТекстМодуля, ПозицияКавычекНачало + 1);
		Если ПозицияКавычекКонец = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаМеждуКавычками = Сред(ТекстМодуля, ПозицияКавычекНачало + 1, ПозицияКавычекКонец - ПозицияКавычекНачало - 1);
		СтрокаМеждуКавычками = СтрЗаменить(СтрокаМеждуКавычками, Символы.ПС, " ");
		СтрокаМеждуКавычками = СокрЛП(СтрокаМеждуКавычками);
		
		// Если в строке нет пробелов, это идентификатор, пропускаем.
		Если СтрНайти(СтрокаМеждуКавычками, " ") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем исключения.
		НайденоСловоИсключение = Ложь;
		Для Каждого СловоИсключение Из МассивИсключенийСловЗапроса Цикл
			Если СтрНайти(СтрокаМеждуКавычками, СловоИсключение) > 0 Тогда
				НайденоСловоИсключение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСловоИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМеждуКавычкамиБуфер = СтрШаблон(" %1 ", СтрокаМеждуКавычками);
		СтрокаМеждуКавычкамиБуфер = СтрЗаменить(СтрокаМеждуКавычкамиБуфер, "|", " ");
		СтрокаМеждуКавычкамиБуфер = СтрЗаменить(СтрокаМеждуКавычкамиБуфер, Символы.ПС, " ");
		
		// Проверяем, является ли найденный текст запросом по ключевым словам.
		НайденоКлючевоеСловоЗапроса = Ложь;
		Для Каждого КлючевоеСловоЗапроса Из МассивКлючевыхСловЗапроса Цикл
			Если СтрНайти(СтрокаМеждуКавычками, КлючевоеСловоЗапроса) > 0 Тогда
				НайденоКлючевоеСловоЗапроса = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ НайденоКлючевоеСловоЗапроса Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиНачало = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияКавычекНачало);
		НомерСтрокиКонец = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияКавычекКонец);
		
		// Заменяем все пробелами в первой строке до первой кавычки, чтобы не проверить лишнее.
		ПозицияПереноса = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияКавычекНачало);
		ТекстМодуля = апк_СтрЗаменить(ТекстМодуля, " ", ПозицияПереноса + 1, ПозицияКавычекНачало);
		
		ДокументТекстБуфер.УстановитьТекст(ТекстМодуля);
		
		Для НомерСтроки = НомерСтрокиНачало По НомерСтрокиКонец Цикл
			
			СтрокаМодуля = ДокументТекстБуфер.ПолучитьСтроку(НомерСтроки);
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если вся строка - это комментарий, то пропускаем.
			СтрокаМодуляСокрЛ = СокрЛ(СтрокаМодуля);
			Если СтрНачинаетсяС(СтрокаМодуляСокрЛ, "//") Тогда
				Продолжить;
			КонецЕсли;
			
			ДлинаСтроки = СтрДлина(СтрокаМодуля);
			
			// Заменяем весь текст в двойных кавычках на пробелы.
			Пока Истина Цикл
				
				ПозицияДвойныхКавычекНачало = СтрНайти(СтрокаМодуля, ТекстДвойныеКавычкиЗамена);
				Если ПозицияДвойныхКавычекНачало = 0 Тогда
					Прервать;
				КонецЕсли;
				
				ПозицияДвойныхКавычекКонец = 0;
				
				// Если кавычка не в конце строки, то ищем закрывающую.
				Если ПозицияДвойныхКавычекНачало < ДлинаСтроки Тогда
					ПозицияДвойныхКавычекКонец = СтрНайти(СтрокаМодуля, ТекстДвойныеКавычкиЗамена,, ПозицияДвойныхКавычекНачало + 1);
				КонецЕсли;
				
				Если ПозицияДвойныхКавычекКонец = 0 Тогда
					// Если закрывающая кавычка не найдена, то берем конец строки.
					ПозицияДвойныхКавычекКонец = ДлинаСтроки;
				КонецЕсли;
				
				// Заменяем на пробелы весь текст в кавычках.
				СтрокаМодуля = апк_СтрЗаменить(СтрокаМодуля, " ", ПозицияДвойныхКавычекНачало, ПозицияДвойныхКавычекКонец);
				
			КонецЦикла;
			
			// Заменяем кавычки на пробелы.
			СтрокаМодуля = СтрЗаменить(СтрокаМодуля, ТекстКавычки, " ");
			СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "|", " ");
			
			// Ищем комментарий в строке после текста кода запроса.
			ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
			Если ПозицияКомментария > 0 Тогда
				// Удаляем все до конца строки.
				СтрокаМодуля = апк_СтрЗаменить(СтрокаМодуля, " ", ПозицияКомментария, СтрДлина(СтрокаМодуля));
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаИзменена = Ложь;
			СтрокаМодуляИсправленная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
			
			// Добавляем пробелы в начале и конце, чтобы поиск сработал корректно и совпадал номер символа в строках.
			СтрокаМодуля = " " + СтрокаМодуля + " ";
			СтрокаМодуляИсправленная = " " + СтрокаМодуляИсправленная + " ";
			
			// Проверяем правильное написание каждого ключевого слова запроса.
			Для Каждого СтрокаТаблицы Из ТаблицаКлючевыхСловЗапроса Цикл
				
				Эталон = СтрокаТаблицы.Эталон;
				ДлинаЭталона = СтрокаТаблицы.ДлинаЭталона;
				СловоДляПоиска = СтрокаТаблицы.СловоДляПоиска;
				
				// Ищем вхождение ключевого слова запроса в строке модуля.
				ПозицияПоиска = 0;
				Пока Истина Цикл
					
					ПозицияПоиска = СтрНайти(СтрокаМодуля, СловоДляПоиска,, ПозицияПоиска + 1);
					Если ПозицияПоиска = 0 Тогда
						Прервать;
					КонецЕсли;
					
					// Определяем написание из исходной строки.
					ПозицияСловаНачало = ПозицияПоиска + 1;
					КлючевоеСловоИсходное = Сред(СтрокаМодуляИсправленная, ПозицияСловаНачало, ДлинаЭталона);
					
					// Сравниваем исходное ключевое слово запроса с эталоном.
					Если Эталон = КлючевоеСловоИсходное Тогда
						Продолжить;
					КонецЕсли;
					
					// Иначе меняем исходное ключевое слово запроса на эталон.
					СтрокаДо = Лев(СтрокаМодуляИсправленная, ПозицияПоиска);
					СтрокаПосле = Сред(СтрокаМодуляИсправленная, ПозицияСловаНачало + ДлинаЭталона);
					
					СтрокаМодуляИсправленная = СтрокаДо + Эталон + СтрокаПосле;
					
					СтрокаИзменена = Истина;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если СтрокаИзменена Тогда
				// Удаляем пробелы в начале и конце.
				СтрокаМодуляИсправленная = Сред(СтрокаМодуляИсправленная, 2, СтрДлина(СтрокаМодуляИсправленная) - 2);
				ДокументТекст.ЗаменитьСтроку(НомерСтроки, СтрокаМодуляИсправленная);
				ФайлИзменен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПроверкаФорматаКомментария(ДокументТекст)
	
	ФайлИзменен = Ложь;
	
	МассивСтрокИсключений = Новый Массив;
	МассивСтрокИсключений.Добавить("_Демо начало примера");
	МассивСтрокИсключений.Добавить("_Демо конец примера");
	
	// Служебные теги не обрабатываем, только добавляем в начало пробел, если его нет.
	Если МассивСлужебныхТегов = Неопределено Тогда
		МассивСлужебныхТегов = ПолучитьМассивСлужебныхТегов();
	КонецЕсли;
	
	СтрокаСимволовОкончанияКомментария = ".!?:;…-";
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	МногострочныйКомментарий = "";
	НомерСтрокиНачалаКомментария = 0;
	НадоПроверитьКомментарий = Ложь;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Если НадоПроверитьКомментарий Тогда
			
			НадоПроверитьКомментарий = Ложь;
			
			// Комментарий кончился, проверяем накопленный многострочный комментарий.
			Если НЕ ПустаяСтрока(МногострочныйКомментарий) Тогда 
				
				МногострочныйКомментарий = СокрЛП(МногострочныйКомментарий);
				
				// Определяем, является ли комментарий длинным, по критериям:
				//   однострочный комментарий - длинный, если его длина больше 80 символов;
				//   многострочный комментарий - длинный, если хотя бы 1 его строка длиннее 30-ти символов.
				КоличествоСтрокКомментария = СтрЧислоСтрок(МногострочныйКомментарий);
				Если КоличествоСтрокКомментария = 1 Тогда 
					ЭтоДлинныйКомментарий = СтрДлина(МногострочныйКомментарий) > 80;
				Иначе 
					ЭтоДлинныйКомментарий = Ложь;
					Для Счетчик = 1 По КоличествоСтрокКомментария Цикл
						СтрокаМногострочногоКомментария = СтрПолучитьСтроку(МногострочныйКомментарий, Счетчик);
						Если СтрДлина(СтрокаМногострочногоКомментария) > 30 Тогда 
							ЭтоДлинныйКомментарий = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если ЗначениеФлагов.ДлинныеКомментарииСБольшойБуквы И ЭтоДлинныйКомментарий Тогда
					
					// Длинный комментарий должен начинаться с большой буквы.
					ПервыйСимвол = Лев(МногострочныйКомментарий, 1);
					Если ВРег(ПервыйСимвол) <> ПервыйСимвол Тогда
						// Проверим, что комментарий не начался в предыдущей строке.
						ПредыдущаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтрокиНачалаКомментария - 1);
						ПредыдущаяСтрока = СокрЛ(ПредыдущаяСтрока);
						
						Если СтрНайти(ПредыдущаяСтрока, "//") = 0 Тогда 
							
							ИсходнаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтрокиНачалаКомментария);
							ПозицияКомментария = СтрНайти(ИсходнаяСтрока, "//");
							Если ПозицияКомментария > 0 Тогда 
								
								НоваяСтрока = ИсходнаяСтрока;
								
								ДлинаСтроки = СтрДлина(ИсходнаяСтрока);
								Для Счетчик = 1 По ДлинаСтроки Цикл 
									Символ = Сред(ИсходнаяСтрока, Счетчик, 1);
									Если Символ <> ВРег(Символ) Тогда 
										НоваяСтрока = Лев(ИсходнаяСтрока, Счетчик - 1);
										НоваяСтрока = НоваяСтрока + ВРег(Символ);
										НоваяСтрока = НоваяСтрока + Сред(ИсходнаяСтрока, Счетчик + 1);
										Прервать;
									КонецЕсли;
								КонецЦикла;
								
								ДокументТекст.ЗаменитьСтроку(НомерСтрокиНачалаКомментария, НоваяСтрока);
								
								ФайлИзменен = Истина;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				МногострочныйКомментарий = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда 
			НадоПроверитьКомментарий = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуляИсходная = СокрЛП(СтрокаМодуляИсходная);
		
		// Если это не комментарий, тогда пропускаем.
		Если Лев(СтрокаМодуляИсходная, 2) <> "//" Тогда 
			НадоПроверитьКомментарий = Истина;
			Продолжить;
		КонецЕсли;
		
		Строка = СтрокаМодуляИсходная;
		
		// Если после удаления символов "//" строка пустая, то пропускаем.
		Строка = СтрЗаменить(Строка, "/", "");
		Если ПустаяСтрока(Строка) Тогда 
			НадоПроверитьКомментарий = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаСокрЛ = СокрЛ(Строка);
		
		ЭтоСлужебныйТег = Ложь;
		Для Каждого СлужебныйТег Из МассивСлужебныхТегов Цикл
			Если СтрНачинаетсяС(СтрокаСокрЛ, СлужебныйТег) Тогда
				ЭтоСлужебныйТег = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ЭтоСлужебныйТег Тогда
			// Добавляем пробел, если его нет, и пропускаем.
			Если СтрокаСокрЛ = Строка Тогда
				Если ЗначениеФлагов.ПробелВНачалеКомментариев Тогда
					ДобавитьПробелПослеЗнакаКомментария(ДокументТекст, НомерСтроки);
					ФайлИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Если строка состоит только из символов верхнего регистра, то это, например, объявление области, пропускаем.
		Если ВРег(Строка) = Строка Тогда 
			// Пропускаем, если до этого комментарий пустой.
			// Возможно, перечисление параметров, тогда пропускать не нужно.
			Если ПустаяСтрока(МногострочныйКомментарий) Тогда 
				Продолжить;
			КонецЕсли;
			
			// Проверим следующую строку.
			СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
			СледующаяСтрока = СтрЗаменить(СледующаяСтрока, "/", "");
			Если ПустаяСтрока(СледующаяСтрока) Тогда 
				МногострочныйКомментарий = "";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоИсключение = ЭтоКод(Строка);
		
		// Проверяем пробел (таб) в начале строки.
		Если СтрокаСокрЛ = Строка Тогда
			// Закомментированный код проверять не нужно.
			Если НЕ ЭтоИсключение Тогда
				Если ЗначениеФлагов.ПробелВНачалеКомментариев Тогда
					ДобавитьПробелПослеЗнакаКомментария(ДокументТекст, НомерСтроки);
					ФайлИзменен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		НадоПроверитьКомментарий = Ложь;
		
		// Отдельно проверяем описание области.
		Если НЕ ЭтоИсключение Тогда
			ЭтоИсключение = СтрокаСодержитОписаниеОбласти(СокрЛП(Строка));
		КонецЕсли;
		
		// Проверяем исключения из массива.
		Если НЕ ЭтоИсключение Тогда 
			Для Каждого СтрокаИсключения Из МассивСтрокИсключений Цикл 
				Если СтрНайти(Строка, СтрокаИсключения) > 0 Тогда 
					ЭтоИсключение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Для комментариев вида:
		// Обработка входящих сообщений с типом {http://www.1c.ru/1cFresh/ApplicationExtensions/Management/a.b.c.d}InstallExtension
		// Делаем исключение по вхождению в комментарий гиперссылки "http://www.".
		// Если до конца строки пробелов нет, это исключение.
		Если НЕ ЭтоИсключение Тогда 
			ПозицияГиперссылки = СтрНайти(СтрокаМодуляИсходная, "http://www.");
			Если ПозицияГиперссылки > 0 Тогда 
				СтрокаГиперссылки = Сред(СтрокаМодуляИсходная, ПозицияГиперссылки);
				ЭтоИсключение = (СтрНайти(СтрокаГиперссылки, " ") = 0);
			КонецЕсли;
		КонецЕсли;
		
		// Если это исключение, проверяем следующую строку.
		Если ЭтоИсключение Тогда 
			СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
			
			// Если следующая строка не содержит комментарий, то пропускаем.
			СледующаяСтрока = СокрЛ(СледующаяСтрока);
			Если Лев(СледующаяСтрока, 2) <> "//" Тогда 
				МногострочныйКомментарий = "";
				Продолжить;
			КонецЕсли;
			
			// Если следующая строка пустая, то пропускаем.
			СледующаяСтрока = СтрЗаменить(СледующаяСтрока, "/", "");
			Если ПустаяСтрока(СледующаяСтрока) Тогда 
				МногострочныйКомментарий = "";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(МногострочныйКомментарий) Тогда 
			НомерСтрокиНачалаКомментария = НомерСтроки;
		КонецЕсли;
		
		МногострочныйКомментарий = МногострочныйКомментарий + Строка + Символы.ПС;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПолучитьОтступПослеЗнакаКомментария(Знач СтрокаМодуля)
	
	СтрокаМодуля = СокрЛ(СтрокаМодуля);
	
	Если Лев(СтрокаМодуля, 2) <> "//" Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "/", "");
	
	Если ПустаяСтрока(СтрокаМодуля) Тогда 
		Возврат "";
	КонецЕсли;
	
	СтрокаМодуляСокрЛ = СокрЛ(СтрокаМодуля);
	ДлинаОтступа = СтрДлина(СтрокаМодуля) - СтрДлина(СтрокаМодуляСокрЛ);
	
	Отступ = Сред(СтрокаМодуля, 1, ДлинаОтступа);
	
	Возврат Отступ;
	
КонецФункции

Функция ПолучитьОтступДоЗнакаКомментария(Знач СтрокаМодуля)
	
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	ОтступДоЗнакаКомментария = Лев(СтрокаМодуля, ПозицияКомментария - 1);
	
	Возврат ОтступДоЗнакаКомментария;
	
КонецФункции

// Объединяет комментарий текущей строки с комментарием следующей строки.
// Если результирующий комментарий меньше 120 символов,
// то заменяет текущую строку в документе новой получившейся строкой и удаляет следующую строку из документа.
//
Процедура ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки)
	
	СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
	
	// В следующей строке нет комментария, не объединяем.
	Если СтрНайти(СледующаяСтрока, "//") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Пустые комментарии не переносим.
	Если СокрЛП(СледующаяСтрока) = "//" Тогда
		Возврат;
	КонецЕсли;
	
	// Комментарий в следующей строке расположен после кода, не объединяем.
	СледующаяСтрокаОтступДоКомментария = ПолучитьОтступДоЗнакаКомментария(СледующаяСтрока);
	Если НЕ ПустаяСтрока(СледующаяСтрокаОтступДоКомментария) Тогда
		Возврат;
	КонецЕсли;
	
	СледующаяСтрокаОтступПослеКомментария = ПолучитьОтступПослеЗнакаКомментария(СледующаяСтрока);
	
	ТекущаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки);
	ТекущаяСтрокаОтступПослеКомментария = ПолучитьОтступПослеЗнакаКомментария(ТекущаяСтрока);
	
	// Если отступ после знака комментария в следующей строке меньше, чем в текущей, не объединяем.
	Если СледующаяСтрокаОтступПослеКомментария < ТекущаяСтрокаОтступПослеКомментария Тогда
		Возврат;
	КонецЕсли;
	
	КомментарийСледующейСтроки = ПолучитьКомментарийИзСтроки(СледующаяСтрока, Истина);
	КомментарийСледующейСтроки = СокрЛП(КомментарийСледующейСтроки);
	
	// Если следующая строка содержит описание параметра, не объединяем.
	Если КомментарийСодержитОписаниеПараметра(КомментарийСледующейСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивСлужебныхТегов = Неопределено Тогда
		МассивСлужебныхТегов = ПолучитьМассивСлужебныхТегов();
	КонецЕсли;
	
	// Если следующая строка является служебным тегом (// ++ УТКА), то не объединяем.
	Для Каждого СлужебныйТег Из МассивСлужебныхТегов Цикл
		Если СтрНачинаетсяС(КомментарийСледующейСтроки, СлужебныйТег) Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	НоваяСтрока = СокрП(ТекущаяСтрока) + " " + КомментарийСледующейСтроки;
	
	ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
	ДокументТекст.УдалитьСтроку(НомерСтроки + 1);
	
КонецПроцедуры

Процедура ДобавитьПробелПослеЗнакаКомментария(ДокументТекст, НомерСтроки)
	
	ИсходнаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки);
	ПозицияКомментария = СтрНайти(ИсходнаяСтрока, "//");
	Если ПозицияКомментария = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПослеКомментария = Сред(ИсходнаяСтрока, ПозицияКомментария + 2);
	НоваяСтрока = Лев(ИсходнаяСтрока, ПозицияКомментария - 1) + "// " + СтрокаПослеКомментария;
	ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
	
КонецПроцедуры

Функция КомментарийСодержитОписаниеПараметра(Знач Комментарий)
	
	Комментарий = ВРег(Комментарий);
	Комментарий = СтрЗаменить(Комментарий, Символы.Таб, " ");
	
	// Иногда в параметре указывают его обязательность, удалим этот текст из комментария.
	Комментарий = СтрЗаменить(Комментарий, ВРег("(обязательный)"), "");
	Комментарий = СтрЗаменить(Комментарий, ВРег("(необязательный)"), "");
	
	// Иногда параметр начинается с тире, поэтому в цикле.
	Пока Истина Цикл 
		
		ПозицияТире = СтрНайти(Комментарий, " - ");
		Если ПозицияТире = 0 Тогда 
			Возврат Ложь;
		КонецЕсли;
		
		// Выделяем наименование параметра до тире.
		Параметр = Лев(Комментарий, ПозицияТире);
		Параметр = СтрЗаменить(Параметр, "/", "");
		// Иногда параметр начинается со звездочки, удаляем.
		Параметр = СтрЗаменить(Параметр, "*", "");
		// Иногда параметр начинается с тире, удаляем.
		Параметр = СтрЗаменить(Параметр, "-", "");
		
		// Если до тире пустая строка, ищем следующее тире.
		Если ПустаяСтрока(Параметр) Тогда 
			Комментарий = Сред(Комментарий, ПозицияТире + 3);
			Продолжить;
		КонецЕсли;
		
		// Удаляем все пробелы вокруг параметра.
		Параметр = СокрЛП(Параметр);
		
		// Если в параметре есть пробелы, то это не параметр.
		Возврат СтрНайти(Параметр, " ") = 0;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьМассивСлужебныхТегов()
	
	// Примеры служебных тегов:
	// ++ УТКА
	// -- НЕ УТ
	МассивСлужебныхТегов = Новый Массив;
	МассивСлужебныхТегов.Добавить("--");
	МассивСлужебныхТегов.Добавить("++");
	
	Возврат МассивСлужебныхТегов;
	
КонецФункции

Функция ПроверкаКомментариевНаДопустимуюДлину(ДокументТекст)
	
	ФайлИзменен = Ложь;
	НомерСтроки = 0;
	
	Пока НомерСтроки < ДокументТекст.КоличествоСтрок() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуля = СокрП(СтрокаМодуляИсходная);
		ДлинаСтроки = СтрДлина(СтрокаМодуля);
		// Пропускаем строки менее 120 символов.
		Если ДлинаСтроки <= КоличествоСимволовДляПереносаКомментария Тогда 
			Продолжить;
		КонецЕсли;
		
		Комментарий = ПолучитьКомментарийИзСтроки(СтрокаМодуля, Ложь);
		Комментарий = СокрП(Комментарий);
		
		// Пропускаем строки, не содержащие комментарий.
		Если ПустаяСтрока(Комментарий) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем строки, содержащие таб.
		Если СтрНайти(Комментарий, Символы.Таб) > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Пропускаем строки с гиперссылками.
		Если СтрНайти(Комментарий, "{http://") > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Пропускаем комментарии, не содержащие ни одного пробела после 120 символов.
		Если СтрНайти(Сред(Комментарий, 121), " ") = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Получаем номер первого символа отличного от "/".
		КомментарийСокрЛ = СокрЛ(Комментарий);
		ДлинаКомментарияСокрЛ = СтрДлина(КомментарийСокрЛ);
		Для НомерСимвола = 3 По ДлинаКомментарияСокрЛ + 1 Цикл 
			Символ = Сред(КомментарийСокрЛ, НомерСимвола, 1);
			Если Символ <> "/" Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем комментарий без первых знаков комментария.
		КомментарийБезЗнаковКомментария = Сред(КомментарийСокрЛ, НомерСимвола);
		
		// В строке только знаки комментария, пропускаем.
		Если ПустаяСтрока(КомментарийБезЗнаковКомментария) Тогда 
			Продолжить;
		КонецЕсли;
		КомментарийБезЗнаковКомментария = СокрЛ(КомментарийБезЗнаковКомментария);
		
		// Если комментарий начинается со слов "процедура" или "функция" и содержит скобку "(", 
		// то считаем его кодом, пропускаем.
		Если (СтрНайти(КомментарийБезЗнаковКомментария, "(") > 0)
		   И ((ВРег(Лев(КомментарийБезЗнаковКомментария, СтрДлина("Процедура"))) = ВРег("Процедура"))
		  ИЛИ (ВРег(Лев(КомментарийБезЗнаковКомментария, СтрДлина("Функция"))) = ВРег("Функция"))) Тогда
			Продолжить;
		КонецЕсли;
		
		// Получим отступ до знака комментария.
		ОтступДоЗнакаКомментария = ПолучитьОтступДоЗнакаКомментария(СтрокаМодуля);
		
		// Если отступ до знака комментария не пустой (комментарий написан в строке кода), 
		// то такие строки пропускаем, т.к. не понятно, как делать перенос.
		Если НЕ ПустаяСтрока(ОтступДоЗнакаКомментария) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Получим отступ после знака комментария.
		ОтступПослеЗнакаКомментария = ПолучитьОтступПослеЗнакаКомментария(Комментарий);
		
		// Если отступ после знака комментария отсутствует, и строка заканчивается на ";", считаем, что это код.
		Если (ОтступПослеЗнакаКомментария = "") И (Прав(СтрокаМодуля, 1) = ";") Тогда 
			Продолжить;
		КонецЕсли;
		
		ДлинаОтступаПослеЗнакаКомментария = СтрДлина(ОтступПослеЗнакаКомментария);
		
		// Получим, что необходимо оставить в той же строке, а что перенести.
		НомерСимволаДляПереноса = 0;
		// 121-м символом может быть пробел, тогда на нем и надо перенести.
		Для НомерСимволаСКонца = 1 По КоличествоСимволовДляПереносаКомментария + 1 Цикл
			НомерСимвола = КоличествоСимволовДляПереносаКомментария + 1 - НомерСимволаСКонца + 1;
			Символ = Сред(СтрокаМодуля, НомерСимвола, 1);
			Если Символ = " " Тогда 
				НомерСимволаДляПереноса = НомерСимвола;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекущаяСтрока = Лев(СтрокаМодуля, НомерСимволаДляПереноса - 1);
		ПереносимаяСтрока = Сред(СтрокаМодуля, НомерСимволаДляПереноса + 1);
		
		// Если в текущей строке нет значимых символов, то пропускаем.
		Если ПустаяСтрока(СтрЗаменить(ТекущаяСтрока, "/", "")) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Если в текущей строке нет определения параметра, то следующую строку сдвигаем с тем же отступом.
		Если НЕ КомментарийСодержитОписаниеПараметра(КомментарийБезЗнаковКомментария) Тогда 
			
			НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступПослеЗнакаКомментария;
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
			
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
			ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
			
			ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
			
			ФайлИзменен = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		// Если в текущей строке есть описание параметра, проверим отступ в следующей строке.
		СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
		
		// Если в следующей строке нет табов, то проверяем ее отступ.
		Если СтрНайти(СледующаяСтрока, Символы.Таб) = 0 Тогда 
			
			ОтступКомментарияСледующейСтроки = ПолучитьОтступПослеЗнакаКомментария(СледующаяСтрока);
			ДлинаОтступаКомментарияСледующейСтроки = СтрДлина(ОтступКомментарияСледующейСтроки);
			
			// Если в следующей строке после определения параметра есть большой отступ,
			Если ДлинаОтступаКомментарияСледующейСтроки > ДлинаОтступаПослеЗнакаКомментария Тогда 
				// тогда сдвигаем новую строку на этот отступ.
				НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступКомментарияСледующейСтроки;
				НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
				
				ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
				ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
				
				ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
				
				ФайлИзменен = Истина;
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если в следующей строке отступ такой же или меньше, то определяем новый отступ.
		// Для этого определяем, сколько тире в текущей строке, которая уже меньше 120 символов.
		КоличествоТире = СтрЧислоВхождений(ТекущаяСтрока, " - ");
		Если КоличествоТире = 0 Тогда 
			// Если тире нет, то переносим с таким отступом + 4 пробела.
			НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступДоЗнакаКомментария + "    ";
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
			
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
			ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
			
			ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
			
			ФайлИзменен = Истина;
			
			Продолжить;
			
		КонецЕсли;
		
		// Тире есть, определяем позицию тире:
		// если тире одно, то его позицию; если их больше, то позицию второго тире.
		Если КоличествоТире = 1 Тогда 
			ПозицияТире = СтрНайти(ТекущаяСтрока, " - ");
		Иначе
			ПозицияТире = СтрНайти(ТекущаяСтрока, " - ");
			ТекущаяСтрокаВтороеТире = Сред(ТекущаяСтрока, ПозицияТире + 3);
			
			СтрокаДоТире = Лев(ТекущаяСтрока, ПозицияТире);
			СтрокаДоТире = СтрЗаменить(СтрокаДоТире, "/", "");
			
			ПозицияТире = ПозицияТире + СтрНайти(ТекущаяСтрокаВтороеТире, " - ") + 2;
			
			// Иногда описание параметра начинается с тире, тогда надо определять позицию 3-го тире.
			Если (КоличествоТире >= 3) И (ПустаяСтрока(СтрокаДоТире)) Тогда 
				ТекущаяСтрокаТретьеТире = Сред(ТекущаяСтрока, ПозицияТире + 3);
				ПозицияТире = ПозицияТире + СтрНайти(ТекущаяСтрокаТретьеТире, " - ") + 2;
			КонецЕсли;
		КонецЕсли;
		
		// Определяем номер значимого символа после тире.
		ДлинаСтроки = СтрДлина(ТекущаяСтрока);
		Для НомерСимвола = ПозицияТире + 3 По ДлинаСтроки Цикл 
			Символ = Сред(ТекущаяСтрока, НомерСимвола, 1);
			Если Символ <> " " Тогда 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Подготовим новый отступ - заменим все символы, кроме "/" на пробелы.
		НовыйОтступ = "";
		СимволыБезЗамены = " /" + Символы.Таб;
		Для Счетчик = 1 По НомерСимвола - 1 Цикл 
			Символ = Сред(ТекущаяСтрока, Счетчик, 1);
			Если СтрНайти(СимволыБезЗамены, Символ) > 0 Тогда 
				НовыйОтступ = НовыйОтступ + Символ;
			Иначе
				НовыйОтступ = НовыйОтступ + " ";
			КонецЕсли;
		КонецЦикла;
		
		// Если переносимый текст полностью укладывается в 120 символов (без еще одного переноса), то переносим по тире.
		Если СтрДлина(НовыйОтступ) + СтрДлина(ПереносимаяСтрока) <= КоличествоСимволовДляПереносаКомментария Тогда 
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
		Иначе
			// Если не укладывается, то новый отступ = текущему + 4 пробела слева.
			НовыйОтступ = ОтступДоЗнакаКомментария + "//" + ОтступПослеЗнакаКомментария + "    ";
			НоваяСтрока = НовыйОтступ + ПереносимаяСтрока;
		КонецЕсли;
		
		ДокументТекст.ЗаменитьСтроку(НомерСтроки, ТекущаяСтрока);
		ДокументТекст.ВставитьСтроку(НомерСтроки + 1, НоваяСтрока);
		
		ОбъединитьКомментарииСтрок(ДокументТекст, НомерСтроки + 1);
		
		ФайлИзменен = Истина;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Процедура ЗаписатьИзмененияВФайл(ДокументТекст, ПолноеИмяФайла)
	
	СтрокаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
	Если СтрокаРезультата <> Неопределено Тогда
		СтрокаРезультата.Изменен = Истина;
	КонецЕсли;
	
	ДокументТекст.Записать(ПолноеИмяФайла);
	
КонецПроцедуры

// Процедура вызывается в том случае, когда невозможно исправить ошибку
// Параметры:
//  Объект - обрабатываемый модуль
//  Описание - описание ошибки
//  Строка - номер строки с ошибкой.
//
Процедура ОбработатьИсключение(ПолноеИмяФайла, Описание, Строка)
	
	СтрокаРезультата = Результат.Найти(ПолноеИмяФайла, "ПолноеИмяФайла");
	Если СтрокаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРезультата.Изменен = Истина;
	СтрокаРезультата.СчетчикПропущенных = СтрокаРезультата.СчетчикПропущенных + 1;
	СтрокаРезультата.Пропущено = Нстр("ru ='Пропущено мест: '") + СтрокаРезультата.СчетчикПропущенных;
	
	Если СтрокаРезультата.СчетчикПропущенных > 1 Тогда
		СтрокаРезультата.УточнениеИсключения = СтрокаРезультата.УточнениеИсключения + Символы.ПС;
	КонецЕсли;
	
	СтрокаРезультата.УточнениеИсключения = СтрокаРезультата.УточнениеИсключения 
		+ Строка(СтрокаРезультата.СчетчикПропущенных) + ". Строка " + Строка(Строка) + " - " + Описание;
	
КонецПроцедуры

Функция ЗаменитьОбласти82(ДокументТекст, ПолноеИмяФайла, ТаблицаОбластейВерхнегоУровня)
	
	ШаблонОбластей82 = "///////////////////////////////////////////////////////////////////////////////";
	
	МодульИзменен = Ложь;
	
	Если СтрНайти(ДокументТекст.ПолучитьТекст(), ШаблонОбластей82) = 0 Тогда 
		Возврат МодульИзменен;
	КонецЕсли;
	
	ПутьФайла = СтрЗаменить(ПолноеИмяФайла, КаталогВыгрузкиРезультат, "");
	Если СтрНачинаетсяС(ПутьФайла, "CommonModules\") Тогда
		ИмяКолонки = "ОбщийМодуль";
	ИначеЕсли СтрЗаканчиваетсяНа(ПутьФайла, "\Ext\Form\Module.bsl") Тогда
		ИмяКолонки = "МодульФормы";
	Иначе
		ИмяКолонки = "МодульОбъекта";
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ОтдельноеИмя," + ИмяКолонки, Ложь, Истина);
	ТаблицаОбластейВерхнегоУровняМодуля = ТаблицаОбластейВерхнегоУровня.Скопировать(СтруктураОтбора);
	
	СтруктураОтбора.ОтдельноеИмя = Истина;
	ТаблицаОбластейВерхнегоУровняМодуляСОтдельнымИменем = ТаблицаОбластейВерхнегоУровня.Скопировать(СтруктураОтбора);
	
	ТаблицаСтрокМодуля = Новый ТаблицаЗначений;
	ТаблицаСтрокМодуля.Колонки.Добавить("Строка");
	
	СтекИнструкций = Новый ТаблицаЗначений;
	СтекИнструкций.Колонки.Добавить("Ссылка");
	СтекИнструкций.Колонки.Добавить("Инструкция");
	
	ОшибкаНевернаяПоследовательность = НСтр("ru='Неверная последовательность инструкций препроцессору'");
	
	Для НомерСтроки = 1 По ДокументТекст.КоличествоСтрок() Цикл
		
		Строка = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		СтрокаТаблицыМодуля = ТаблицаСтрокМодуля.Добавить();
		
		Если СтрНайти(Строка, ШаблонОбластей82) = 1 Тогда
			СледующаяСтрока = ДокументТекст.ПолучитьСтроку(НомерСтроки + 1);
			
			Если СтрНайти(СледующаяСтрока, "//") = 1 Тогда
				
				ИмяОбласти = СокрЛП(СтрЗаменить(СледующаяСтрока, "// ", ""));
				ЭтоОбластьВерхнегоУровня = (ТаблицаОбластейВерхнегоУровняМодуля.Найти(ИмяОбласти, "Область82") <> Неопределено);
				
				Если ЭтоОбластьВерхнегоУровня Тогда
					ИмяОбласти = НормализоватьИмяОбласти(ИмяОбласти);
				Иначе
					
					Для Каждого СтрокаТаблицыОтбласть Из ТаблицаОбластейВерхнегоУровняМодуляСОтдельнымИменем Цикл
						Если СтрНайти(ИмяОбласти, СтрокаТаблицыОтбласть.Область82) = 1 Тогда
							ИмяОбласти = СтрокаТаблицыОтбласть.Область83 + НормализоватьИмяОбласти(Сред(ИмяОбласти, СтрДлина(СтрокаТаблицыОтбласть.Область82) + 1));
							ЭтоОбластьВерхнегоУровня = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				Если ЭтоОбластьВерхнегоУровня Тогда
					
					Строка = "#Область "+ ИмяОбласти;
					МодульИзменен = Истина;
					СтрокаТаблицыОткрытойОбластиВерхнегоУровня = СтекИнструкций.Найти("область_ву", "Инструкция");
					
					Если СтрокаТаблицыОткрытойОбластиВерхнегоУровня <> Неопределено Тогда
						ИндексСтрокиИнструкции = СтекИнструкций.Индекс(СтрокаТаблицыОткрытойОбластиВерхнегоУровня);
						
						Если ИндексСтрокиИнструкции = 0 Тогда
							Строка = "#КонецОбласти" + Символы.ПС + Символы.ПС + Строка;
						Иначе
							ТаблицаСтрокМодуля.Вставить(ТаблицаСтрокМодуля.Индекс(СтекИнструкций[ИндексСтрокиИнструкции - 1].Ссылка)).Строка = "#КонецОбласти" + Символы.ПС;
						КонецЕсли;
						
						СтекИнструкций.Удалить(ИндексСтрокиИнструкции);
					КонецЕсли;
					
					СтрокаТаблицыИнструкция = СтекИнструкций.Вставить(0);
					СтрокаТаблицыИнструкция.Ссылка = СтрокаТаблицыМодуля;
					СтрокаТаблицыИнструкция.Инструкция = "область_ву";
					
				Иначе
					Строка = Строка + Символы.ПС + СледующаяСтрока;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЕсли;
			
		ИначеЕсли Лев(СокрЛ(Строка), 1) = "#" Тогда
			
			СокращеннаяСтрока = НРег(СокрЛ(Сред(СокрЛ(Строка), 2)));
			
			Если Лев(СокращеннаяСтрока, 7) = "область" Тогда
				
				СтрокаТаблицыОткрытойОбластиВерхнегоУровня=СтекИнструкций.Найти("область_ву", "Инструкция");
				
				Если СтрокаТаблицыОткрытойОбластиВерхнегоУровня <> Неопределено Тогда
					
					ИмяОбласти = СокрЛП(Сред(СокращеннаяСтрока, 8));
					ОбластьВерхнегоУровня = Ложь;
					
					Для Каждого СтрокаВерхнегоУровняМодуля Из ТаблицаОбластейВерхнегоУровняМодуля Цикл
						
						Если ИмяОбласти = НРег(СтрокаВерхнегоУровняМодуля.Область83) Тогда
							ОбластьВерхнегоУровня = Истина;
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					Если Не ОбластьВерхнегоУровня Тогда
						
						Для Каждого СтрокаВерхнегоУровняМодуля Из ТаблицаОбластейВерхнегоУровняМодуляСОтдельнымИменем Цикл
							
							Если СтрНайти(ИмяОбласти, НРег(СтрокаВерхнегоУровняМодуля.Область83)) = 1 Тогда
								ОбластьВерхнегоУровня = Истина;
								Прервать;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
					Если ОбластьВерхнегоУровня Тогда
						ИндексСтрокиИнструкции = СтекИнструкций.Индекс(СтрокаТаблицыОткрытойОбластиВерхнегоУровня);
						
						Если ИндексСтрокиИнструкции = 0 Тогда
							Строка = "#КонецОбласти" + Символы.ПС + Символы.ПС + Строка;
						Иначе
							ТаблицаСтрокМодуля.Вставить(ТаблицаСтрокМодуля.Индекс(СтекИнструкций[ИндексСтрокиИнструкции - 1].Ссылка)).Строка = "#КонецОбласти" + Символы.ПС;
						КонецЕсли;
						
						СтекИнструкций.Удалить(ИндексСтрокиИнструкции);
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТаблицыИнструкция = СтекИнструкций.Вставить(0);
				СтрокаТаблицыИнструкция.Ссылка = СтрокаТаблицыМодуля;
				СтрокаТаблицыИнструкция.Инструкция = "область";
				
			ИначеЕсли Лев(СокращеннаяСтрока, 12) = "конецобласти" Тогда
				
				Если (СтекИнструкций.Количество() <> 0) И (СтекИнструкций[0].Инструкция = "область_ву") Тогда
					
					Для ъ = 0 По СтекИнструкций.Количество() - 1 Цикл
						СтрокаТаблицыИнструкция = СтекИнструкций[0];
						
						Если СтрокаТаблицыИнструкция.Инструкция = "область_ву" Тогда
							
							Строка = "#КонецОбласти" + Символы.ПС + Символы.ПС + Строка;
							СтекИнструкций.Удалить(0);
							
						Иначе
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если (СтекИнструкций.Количество() = 0) Или (СтекИнструкций[0].Инструкция <> "область") Тогда
					
					ОбработатьИсключение(ПолноеИмяФайла, ОшибкаНевернаяПоследовательность, НомерСтроки);
					Возврат Ложь;
					
				КонецЕсли;
				
				СтекИнструкций.Удалить(0);
				
			ИначеЕсли Лев(СокращеннаяСтрока, 4) = "если" Тогда
				
				СтрокаТаблицыИнструкция = СтекИнструкций.Вставить(0);
				СтрокаТаблицыИнструкция.Ссылка = СтрокаТаблицыМодуля;
				СтрокаТаблицыИнструкция.Инструкция = "если";
				
			ИначеЕсли Лев(СокращеннаяСтрока, 5) = "иначе" Или Лев(СокращеннаяСтрока, 9) = "конецесли" Тогда
				
				Для ъ = 0 По СтекИнструкций.Количество() - 1 Цикл
					СтрокаТаблицыИнструкция = СтекИнструкций[0];
					
					Если СтрокаТаблицыИнструкция.Инструкция = "область_ву" Тогда
						
						Строка = "#КонецОбласти" + Символы.ПС + Символы.ПС + Строка;
						СтекИнструкций.Удалить(0);
						
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если (СтекИнструкций.Количество() = 0) Или (СтекИнструкций[0].Инструкция <> "если") Тогда
					
					ОбработатьИсключение(ПолноеИмяФайла, ОшибкаНевернаяПоследовательность, НомерСтроки);
					Возврат Ложь;
					
				КонецЕсли;
				
				Если Лев(СокращеннаяСтрока, 9) = "конецесли" Тогда
					СтекИнструкций.Удалить(0);
				КонецЕсли;
			Иначе
				
				ТекстИсключения = НСтр("ru='Неизвестная инструкция препроцессору: %Строка%'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%Строка%", Строка);
				ОбработатьИсключение(ПолноеИмяФайла, ТекстИсключения, НомерСтроки);
				
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицыМодуля.Строка = Строка;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыИнструкция Из СтекИнструкций Цикл
		
		Если СтрокаТаблицыИнструкция.Инструкция = "область_ву" Тогда
			ТаблицаСтрокМодуля.Добавить().Строка = Символы.ПС + "#КонецОбласти";
		Иначе
			ОбработатьИсключение(ПолноеИмяФайла, ОшибкаНевернаяПоследовательность, НомерСтроки);
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МодульИзменен Тогда
		
		ДокументТекст.Очистить();
		Для Каждого СтрокаТаблицыМодуля Из ТаблицаСтрокМодуля Цикл
			ДокументТекст.ДобавитьСтроку(СтрокаТаблицыМодуля.Строка);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МодульИзменен;
	
КонецФункции

Функция НормализоватьИмяОбласти(Знач ИмяОбласти)
	
	ДоступныеСимволыИмениОбласти = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя" + "qwertyuiopasdfghjklzxcvbnm" + "0123456789";
	ИмяОбластиРезультат = "";
	ИмяОбласти = СокрЛП(ИмяОбласти);
	
	Если ИмяОбласти = ВРег(ИмяОбласти) Тогда
		ИмяОбласти = ТРег(ИмяОбласти);
	КонецЕсли;
	
	Для ъ = 1 По СтрДлина(ИмяОбласти) Цикл
		
		Символ = Сред(ИмяОбласти, ъ, 1);
		Если СтрНайти(ДоступныеСимволыИмениОбласти, НРег(Символ)) = 0 Тогда
			Символ = "";
		ИначеЕсли Символ = ВРег(Символ) Тогда
			Символ = " " + Символ;
		КонецЕсли;
		
		ИмяОбластиРезультат = ИмяОбластиРезультат + Символ;
		
	КонецЦикла;
	
	Возврат СтрЗаменить(ТРег(ИмяОбластиРезультат), " ", "");
	
КонецФункции

// Функция добавляет область "ОписаниеПеременных".
// 
Функция ДобавитьОбластьОписаниеПеременных(ДокументТекст)
	
	НаименованиеОбласти = "#Область ОписаниеПеременных";
	НаименованиеОбластиВРег = ВРег(НаименованиеОбласти);
	НаименованиеОбластиВРег = СтрЗаменить(НаименованиеОбластиВРег, " ", "");
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, "");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, " ", "");
	
	// Проверяем наличие области в модуле, если есть, выходим.
	Если СтрНайти(ТекстМодуля, НаименованиеОбластиВРег + Символы.ПС) > 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем раздел объявления переменных, если нет, то выходим.
	ТекстПерем = ВРег("Перем");
	Если СтрНайти(ТекстМодуля, ТекстПерем) = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
#Область ПроверкаСуществующейОбластиОписанияПеременных
	
	// Проверим существующие области инициализации.
	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("Область");
	ТаблицаОбластей.Колонки.Добавить("Найдена");
	ТаблицаОбластей.Колонки.Добавить("НомерСтроки");
	
	ТаблицаОбластей.Добавить().Область = "#Область СостояниеОбъекта";
	ТаблицаОбластей.Добавить().Область = "#Область ЛокальныеПеременные";
	ТаблицаОбластей.Добавить().Область = "#Область ВнутреннееСостояние";
	ТаблицаОбластей.Добавить().Область = "#Область ОбъявлениеПеременных";
	
	ТаблицаОбластей.ЗаполнитьЗначения(Ложь, "Найдена");
	ТаблицаОбластей.ЗаполнитьЗначения(0, "НомерСтроки");
	
	Для Каждого СтрокаОбласти Из ТаблицаОбластей Цикл 
		
		ОбластьИнициализации = СтрокаОбласти.Область;
		ОбластьИнициализации = СтрЗаменить(ОбластьИнициализации, " ", "");
		ОбластьИнициализации = ВРег(ОбластьИнициализации);
		
		// Если не найдена, продолжаем.
		НомерСимвола = СтрНайти(ТекстМодуля, ОбластьИнициализации + Символы.ПС);
		Если НомерСимвола = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Получаем номер строки.
		ТекстДоСимвола = Лев(ТекстМодуля, НомерСимвола);
		НомерСтроки = СтрЧислоСтрок(ТекстДоСимвола);
		
		СтрокаОбласти.Найдена = Истина;
		СтрокаОбласти.НомерСтроки = НомерСтроки;
		
	КонецЦикла;
	
	// Если найдена только 1 область из таблицы, то заменяем ее и выходим.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Найдена", Истина);
	
	МассивОбластей = ТаблицаОбластей.НайтиСтроки(СтруктураОтбора);
	Если МассивОбластей.Количество() = 1 Тогда 
		НомерСтроки = МассивОбластей[0].НомерСтроки;
		ДокументТекст.ЗаменитьСтроку(НомерСтроки, НаименованиеОбласти);
		
		Возврат Истина;
	КонецЕсли;
	
#КонецОбласти
	
#Область ДобавлениеОбластиОписаниеПеременных
	
	ТекстПерем = ВРег("Перем ");
	ТекстОбласть = ВРег("#Область ");
	ТекстКонецОбласти = ВРег("#КонецОбласти ");
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	ОбластьОткрыта = Ложь;
	НайденоОписаниеПеременных = Ложь;
	МногострочноеОпределениеПеременных = Ложь;
	
	СтруктураНомераСтрок = Новый Структура;
	СтруктураНомераСтрок.Вставить("НачалоОписания", 0);
	СтруктураНомераСтрок.Вставить("ДирективаПеременной", 0);
	СтруктураНомераСтрок.Вставить("ДирективаМетода", 0);
	СтруктураНомераСтрок.Вставить("ПервыйКомментарий", 0);
	СтруктураНомераСтрок.Вставить("НачалоМетода", 0);
	СтруктураНомераСтрок.Вставить("ПерваяОбласть", 0);
	СтруктураНомераСтрок.Вставить("ПоследняяОбласть", 0);
	
	СтруктураНомераСтрок.Вставить("ПустаяСтрокаПередПеременной", 0);
	СтруктураНомераСтрок.Вставить("ПустаяСтрокаПослеПеременной", 0);
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл 
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда 
			// Описание переменных найдено, запоминаем первую пустую строку.
			Если НайденоОписаниеПеременных Тогда 
				Если СтруктураНомераСтрок.ПустаяСтрокаПослеПеременной = 0 Тогда 
					// Номер строки увеличен на 1, чтобы вставлять конец область ниже пустой строки.
					СтруктураНомераСтрок.ПустаяСтрокаПослеПеременной = НомерСтроки + 1;
				КонецЕсли;
			Иначе
				// Номер строки увеличен на 1, чтобы вставлять область ниже пустой строки.
				СтруктураНомераСтрок.ПустаяСтрокаПередПеременной = НомерСтроки + 1;
				// Если не было переменных и появилась пустая строка, то сбрасываем номер строки с комментарием.
				СтруктураНомераСтрок.ПервыйКомментарий = 0;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ");
		// Добавляем пробел в конец строки, чтобы искать конструкции с пробелом, например, "Перем ".
		// Иначе это может быть, например, наименование переменной "Переменная1" на следующей строке.
		СтрокаМодуля = СтрокаМодуля + " ";
		
		// Над переменной могут быть директивы.
		Если Лев(СтрокаМодуля, 1) = "&" Тогда 
			// Если описание переменных уже было, то вероятнее всего это директива от следующего метода.
			Если НайденоОписаниеПеременных Тогда 
				СтруктураНомераСтрок.ДирективаМетода = НомерСтроки;
			КонецЕсли;
			
			// Если директив еще не было, то запоминаем номер строки первой директивы.
			Если СтруктураНомераСтрок.ДирективаПеременной = 0 Тогда 
				СтруктураНомераСтрок.ДирективаПеременной = НомерСтроки;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Если строка начинается с описания переменной, запоминаем.
		Если Лев(СтрокаМодуля, СтрДлина(ТекстПерем)) = ТекстПерем Тогда 
			// Если переменных еще не было, то запоминаем номер строки начала описания.
			Если НЕ НайденоОписаниеПеременных Тогда
				СтруктураНомераСтрок.НачалоОписания = НомерСтроки;
				НайденоОписаниеПеременных = Истина;
			КонецЕсли;
			
			// Если в строке нет ";", то это многострочное описание переменных.
			Если СтрНайти(СтрокаМодуля, ";") = 0 Тогда 
				МногострочноеОпределениеПеременных = Истина;
			КонецЕсли;
			
			// Если найдена очередная переменная, сбрасываем пустую строку после предыдущей переменной.
			СтруктураНомераСтрок.ПустаяСтрокаПослеПеременной = 0;
			
			Продолжить;
		КонецЕсли;
		
		// Запоминаем номера строк комментариев.
		Если Лев(СтрокаМодуля, 2) = "//" Тогда
			// Запоминаем номер строки комментария, относящегося к самой первой переменной.
			// Если после комментария идет пустая строка, то номер строки первого комментария сбрасывается (в начале цикла).
			Если СтруктураНомераСтрок.ПервыйКомментарий = 0 Тогда 
				СтруктураНомераСтрок.ПервыйКомментарий = НомерСтроки;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Области обрабатываем, инструкции препроцессору пропускаем.
		Если Лев(СтрокаМодуля, 1) = "#" Тогда 
			// Если это область, установим некоторые значения.
			Если Лев(СтрокаМодуля, СтрДлина(ТекстОбласть)) = ТекстОбласть Тогда 
				// Запомним, что область открыта.
				Если НЕ НайденоОписаниеПеременных Тогда 
					ОбластьОткрыта = Истина;
				КонецЕсли;
				
				// Если переменных не было, и началась область, запомним.
				Если СтруктураНомераСтрок.ПерваяОбласть = 0 Тогда 
					СтруктураНомераСтрок.ПерваяОбласть = НомерСтроки;
				КонецЕсли;
				
				// Запоминаем номер строки области.
				СтруктураНомераСтрок.ПоследняяОбласть = НомерСтроки;
			КонецЕсли;
			
			// Если это конец области, закроем область.
			Если Лев(СтрокаМодуля, СтрДлина(ТекстКонецОбласти)) = ТекстКонецОбласти Тогда 
				ОбластьОткрыта = Ложь;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Если это многострочное определение переменных, то проверим, что оно закончилось.
		Если МногострочноеОпределениеПеременных Тогда 
			Если СтрНайти(СтрокаМодуля, ";") > 0 Тогда 
				МногострочноеОпределениеПеременных = Ложь;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Встретили начало метода или код, тогда выходим из цикла.
		СтруктураНомераСтрок.НачалоМетода = НомерСтроки;
		Прервать;
		
	КонецЦикла;
	
	// Не найдено описание переменных в начале модуля, выходим.
	Если НЕ НайденоОписаниеПеременных Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Если в области есть переменные и методы, то это ошибка, не обрабатываем.
	Если ОбластьОткрыта Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураНомераСтрок Цикл 
		Если Элемент.Значение = 0 Тогда 
			СтруктураНомераСтрок.Вставить(Элемент.Ключ, КоличествоСтрок + 1);
		КонецЕсли;
	КонецЦикла;
	
	// Вычисляем номер строки начала описания. 
	// Выбираем между началом области переменных, комментарием и директивой перед первой переменной и первой областью.
	НомерСтрокиНачалаОбласти = Мин(
		СтруктураНомераСтрок.НачалоОписания,
		СтруктураНомераСтрок.ПустаяСтрокаПередПеременной,
		СтруктураНомераСтрок.ПервыйКомментарий,
		СтруктураНомераСтрок.ДирективаПеременной,
		СтруктураНомераСтрок.ПерваяОбласть);
	
	// Вычисляем номер строки конца описания. 
	// Выбираем между пустой строкой и областью после последней переменной, директивой и началом метода.
	НомерСтрокиКонцаОбласти = Мин(
		СтруктураНомераСтрок.ПустаяСтрокаПослеПеременной, 
		СтруктураНомераСтрок.ПоследняяОбласть,
		СтруктураНомераСтрок.ДирективаМетода, 
		СтруктураНомераСтрок.НачалоМетода);
	
	ТекстКонецОбласти = "#КонецОбласти";
	
	ДокументТекст.ВставитьСтроку(НомерСтрокиКонцаОбласти, ТекстКонецОбласти);
	ДокументТекст.ВставитьСтроку(НомерСтрокиКонцаОбласти + 1, "");
	
	ДокументТекст.ВставитьСтроку(НомерСтрокиНачалаОбласти, НаименованиеОбласти);
	ДокументТекст.ВставитьСтроку(НомерСтрокиНачалаОбласти + 1, "");
	
#КонецОбласти
	
	Возврат Истина;
	
КонецФункции

// Функция добавляет область "Инициализация".
// 
Функция ДобавитьОбластьИнициализация(ДокументТекст)
	
	НаименованиеОбласти = "#Область Инициализация";
	НаименованиеОбластиВРег = ВРег(НаименованиеОбласти);
	НаименованиеОбластиВРег = СтрЗаменить(НаименованиеОбластиВРег, " ", "");
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, "");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, " ", "");
	
	// Проверяем наличие области в модуле, если есть, выходим.
	Если СтрНайти(ТекстМодуля, НаименованиеОбластиВРег + Символы.ПС) > 0 Тогда 
		Возврат Ложь;
	КонецЕсли;
	
#Область ПроверкаСуществующейОбластиИнициализации
	
	// Проверим существующие области инициализации.
	МассивОбластейИнициализации = Новый Массив;
	МассивОбластейИнициализации.Добавить("#Область ОператорыОсновнойПрограммы");
	МассивОбластейИнициализации.Добавить("#Область НачальнаяИнициализация");
	МассивОбластейИнициализации.Добавить("#Область Инициализации");
	МассивОбластейИнициализации.Добавить("#Область ИнициализацияОбъекта");
	
	НайденаСуществующаяОбласть = Ложь;
	
	Для Каждого ЭлементОбласти Из МассивОбластейИнициализации Цикл 
		
		ОбластьИнициализации = ЭлементОбласти;
		ОбластьИнициализации = СтрЗаменить(ОбластьИнициализации, " ", "");
		ОбластьИнициализации = ВРег(ОбластьИнициализации);
		
		// Если не найдена, продолжаем.
		НомерСимвола = СтрНайти(ТекстМодуля, ОбластьИнициализации);
		Если НомерСимвола = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Если нашли область, проверяем, что это действительно область, т.е. выделена в отдельную строку.
		ТекстДоСимвола = Лев(ТекстМодуля, НомерСимвола);
		НомерСтроки = СтрЧислоСтрок(ТекстДоСимвола);
		
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, " ", "");
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, "");
		
		Если ОбластьИнициализации = СтрокаМодуля Тогда 
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, НаименованиеОбласти);
			НайденаСуществующаяОбласть = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденаСуществующаяОбласть Тогда 
		Возврат Истина;
	КонецЕсли;
	
#КонецОбласти
	
#Область ДобавлениеОбластиИнициализация
	
	ТекстПерем = ВРег("Перем ");
	ТекстКонецПроцедуры = ВРег("КонецПроцедуры");
	ТекстКонецФункции = ВРег("КонецФункции");
	ТекстОбласть = ВРег("#Область ");
	ТекстКонецОбласти = ВРег("#КонецОбласти ");
	
	// Здесь перечисляем операторы по одной строке, которые допустимо писать вне области "#Инициализация".
	МассивИсключенийОператоров = Новый Массив;
	
	// Этот вызов исключения должен быть написан в конце каждого модуля объекта в виде кода с инструкцией препроцессора,
	// область "#Инициализация" при этом добавлять не обязательно.
	//#Иначе
	//ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
	//#КонецЕсли
	МассивИсключенийОператоров.Добавить("ВызватьИсключение НСтр(""ru = 'Недопустимый вызов объекта на клиенте.'"");");
	
	ИндексИсключения = -1;
	Для Каждого ИсключениеОператора Из МассивИсключенийОператоров Цикл
		
		// Уберем лишние символы.
		ИсключениеОператора = ВРег(ИсключениеОператора);
		ИсключениеОператора = СтрЗаменить(ИсключениеОператора, " ", "");
		ИсключениеОператора = СтрЗаменить(ИсключениеОператора, Символы.Таб, "");
		ИсключениеОператора = СтрЗаменить(ИсключениеОператора, ";", "");
		
		ИндексИсключения = ИндексИсключения + 1;
		МассивИсключенийОператоров[ИндексИсключения] = ИсключениеОператора;
		
	КонецЦикла;
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	ОбластьОткрыта = Ложь;
	НайденыОператоры = Ложь;
	СчетчикОбластей = 0;
	
	СтруктураНомераСтрок = Новый Структура;
	СтруктураНомераСтрок.Вставить("НачалоОператоров", 0);
	СтруктураНомераСтрок.Вставить("КонецОператоров", 0);
	СтруктураНомераСтрок.Вставить("ПервыйКомментарий", 0);
	
	СтруктураНомераСтрок.Вставить("НачалоОбласти", 0);
	
	Для НомерСтрокиСНачала = 1 По КоличествоСтрок Цикл 
		
		НомерСтроки = КоличествоСтрок - НомерСтрокиСНачала + 1;
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, " ");
		// Добавляем пробел в конец строки, чтобы искать конструкции с пробелом, например, "Перем ".
		// Иначе это может быть, например, наименование переменной "Переменная1" на следующей строке.
		СтрокаМодуля = СтрокаМодуля + " ";
		
		// Если встретилось описание переменной, то прерываем.
		Если СтрНачинаетсяС(СтрокаМодуля, ТекстПерем) Тогда 
			Прервать;
		КонецЕсли;
		
		// Обрабатываем комментарий.
		Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			// Если операторы найдены, запоминаем самый первый комментарий.
			Если НайденыОператоры Тогда 
				СтруктураНомераСтрок.ПервыйКомментарий = НомерСтроки;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// Области обрабатываем, инструкции препроцессору пропускаем.
		Если СтрНачинаетсяС(СтрокаМодуля, "#") Тогда 
			// Т.к. строки обрабатываются с конца, если это начало области, то уменьшим счетчик областей.
			Если СтрНачинаетсяС(СтрокаМодуля, ТекстОбласть) Тогда 
				СчетчикОбластей = СчетчикОбластей - 1;
				СтруктураНомераСтрок.НачалоОбласти = НомерСтроки;
				
				Если СчетчикОбластей = 0 Тогда 
					ОбластьОткрыта = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Если это конец области, то увеличим счетчик областей.
			Если СтрНачинаетсяС(СтрокаМодуля, ТекстКонецОбласти) Тогда 
				СчетчикОбластей = СчетчикОбластей + 1;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СтрокаМодуля, ТекстКонецПроцедуры)
		 ИЛИ СтрНачинаетсяС(СтрокаМодуля, ТекстКонецФункции) Тогда
			Прервать;
		КонецЕсли;
		
		// Проверяем среди исключений операторов.
		ЭтоИсключениеОператора = Ложь;
		СтрокаМодуляДляПроверкиИсключения = СтрокаМодуля;
		СтрокаМодуляДляПроверкиИсключения = СтрЗаменить(СтрокаМодуляДляПроверкиИсключения, " ", "");
		СтрокаМодуляДляПроверкиИсключения = СтрЗаменить(СтрокаМодуляДляПроверкиИсключения, ";", "");
		
		Для Каждого ИсключениеОператора Из МассивИсключенийОператоров Цикл
			Если ИсключениеОператора = СтрокаМодуляДляПроверкиИсключения Тогда
				ЭтоИсключениеОператора = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭтоИсключениеОператора Тогда
			Продолжить;
		КонецЕсли;
		
		// Встретили код, тогда запоминаем номер строки.
		Если НЕ НайденыОператоры Тогда
			НайденыОператоры = Истина;
			СтруктураНомераСтрок.КонецОператоров = НомерСтроки;
		КонецЕсли;
		
		СтруктураНомераСтрок.НачалоОператоров = НомерСтроки;
		ОбластьОткрыта = (СчетчикОбластей <> 0);
		
	КонецЦикла;
	
	// Не найдены операторы в конце модуля, выходим.
	Если НЕ НайденыОператоры Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	// Если в области есть операторы и методы, то это ошибка, не обрабатываем.
	Если ОбластьОткрыта Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из СтруктураНомераСтрок Цикл 
		Если Элемент.Значение = 0 Тогда 
			СтруктураНомераСтрок.Вставить(Элемент.Ключ, КоличествоСтрок + 1);
		КонецЕсли;
	КонецЦикла;
	
	// Вычисляем номер строки начала операторов. 
	НомерСтрокиНачалаОбласти = Мин(
		СтруктураНомераСтрок.НачалоОператоров, 
		СтруктураНомераСтрок.НачалоОбласти,
		СтруктураНомераСтрок.ПервыйКомментарий);
	
	// Вычисляем номер строки конца операторов. 
	НомерСтрокиКонцаОбласти = СтруктураНомераСтрок.КонецОператоров;
	
	ТекстКонецОбласти = "#КонецОбласти";
	
	ДокументТекст.ВставитьСтроку(НомерСтрокиКонцаОбласти + 1, "");
	ДокументТекст.ВставитьСтроку(НомерСтрокиКонцаОбласти + 2, ТекстКонецОбласти);
	
	ДокументТекст.ВставитьСтроку(НомерСтрокиНачалаОбласти, НаименованиеОбласти);
	ДокументТекст.ВставитьСтроку(НомерСтрокиНачалаОбласти + 1, "");
	
#КонецОбласти
	
#Область УдалениеОбластиИнициализацияВВидеКомментария
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, "");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, " ", "");
	
	МассивКомментариев = Новый Массив;
	МассивКомментариев.Добавить("// Операторы основной программы");
	МассивКомментариев.Добавить("// Раздел инициализации");
	
	Для Каждого ЭлементМассива Из МассивКомментариев Цикл 
		
		СтрокаКомментария = ВРег(ЭлементМассива);
		СтрокаКомментария = СтрЗаменить(СтрокаКомментария, " ", "");
		
		НомерСимвола = СтрНайти(ТекстМодуля, СтрокаКомментария);
		Если НомерСимвола = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		// Если нашли комментарий, проверяем его.
		ТекстДоСимвола = Лев(ТекстМодуля, НомерСимвола);
		НомерСтроки = СтрЧислоСтрок(ТекстДоСимвола);
		
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		СтрокаМодуля = ВРег(СтрокаМодуля);
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, " ", "");
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, "");
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, ".", "");
		
		Если СтрокаКомментария <> СтрокаМодуля Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументТекст.УдалитьСтроку(НомерСтроки);
		НомерСтроки = НомерСтроки - 1;
		
		// Проверим предыдущую строку, если она состоит только их символов "/", тогда удалим ее.
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "/", "");
		Если НЕ ПустаяСтрока(СтрокаМодуля) Тогда 
			Продолжить;
		КонецЕсли;
		
		ДокументТекст.УдалитьСтроку(НомерСтроки);
		
		// Как правило остается несколько пустых строк подряд, оставим только одну пустую строку.
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		Если НЕ ПустаяСтрока(СтрокаМодуля) Тогда 
			Продолжить;
		КонецЕсли;
		
		Пока Истина Цикл 
			
			НомерСтроки = НомерСтроки - 1;
			СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
			
			Если НЕ ПустаяСтрока(СтрокаМодуля) Тогда 
				Прервать;
			КонецЕсли;
			
			ДокументТекст.УдалитьСтроку(НомерСтроки);
			
		КонецЦикла;
		
	КонецЦикла;
	
#КонецОбласти
	
	Возврат Истина;
	
КонецФункции

Функция ПроверкаОператоровСКрайнейЛевойПозиции(ДокументТекст)
	
	ФайлИзменен = Ложь;
	
	МассивОператоров = Новый Массив;
	МассивОператоров.Добавить(ВРег("КонецПроцедуры"));
	МассивОператоров.Добавить(ВРег("КонецФункции"));
	МассивОператоров.Добавить(ВРег("Процедура"));
	МассивОператоров.Добавить(ВРег("Функция"));
	
	МассивДирективИнструкций = Новый Массив;
	МассивДирективИнструкций.Добавить("#");
	МассивДирективИнструкций.Добавить("&");
	
	ТекстПерем = ВРег("Перем");
	ТекстКонецОбласти = ВРег("КонецОбласти");
	
	ЗакончилсяБлокПеременных = Ложь;
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	ПозицияНеВнутриМетода = Истина;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		// Пропускаем пустые строки.
		Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем комментарии.
		СтрокаМодуля = СокрЛП(СтрокаМодуляИсходная);
		Если Лев(СтрокаМодуля, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем операторы "Процедура", "КонецПроцедуры", "Функция", "КонецФункции".
		СтрокаМодуля = ВРег(СтрокаМодуляИсходная);
		УбратьСимволыВНачалеСтроки = Ложь;
		ВхождениеНайдено = Ложь;
		
		Для Каждого ТекущийОператор Из МассивОператоров Цикл
			
			ПозицияОператора = СтрНайти(СтрокаМодуля, ТекущийОператор);
			
			// Если текста оператора нет в строке, пропускаем.
			Если ПозицияОператора = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ФлагКонецМетода = (Лев(ТекущийОператор, 5) = "КОНЕЦ");
			
			// Проверяем первый символ после текста оператора.
			СимволПослеОператора = Сред(СтрокаМодуля, ПозицияОператора + СтрДлина(ТекущийОператор), 1);
			
			// Если строка не пустая, то это вхождение текста не является оператором.
			// Для операторов "КонецФункции" и "КонецПроцедуры" следующим символом может быть ";".
			Если ФлагКонецМетода Тогда
				Если НЕ ПустаяСтрока(СимволПослеОператора) И СимволПослеОператора <> ";" Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Если НЕ ПустаяСтрока(СимволПослеОператора) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// Проверяем строку перед текстом оператора.
			СтрокаДо = Лев(СтрокаМодуля, ПозицияОператора - 1);
			
			// Если строка не пустая, то это вхождение текста не является оператором.
			Если НЕ ПустаяСтрока(СтрокаДо) Тогда
				Продолжить;
			КонецЕсли;
			
			
			// Если строка начинается с оператора, сдвигать влево не нужно.
			Если ПозицияОператора > 1 Тогда
				УбратьСимволыВНачалеСтроки = Истина;
			КонецЕсли;
			
			// Проставляем флаг того, что мы находимся внутри функции для корректного сдвига областей.
			Если ФлагКонецМетода Тогда
				ПозицияНеВнутриМетода = Истина;
			Иначе
				ПозицияНеВнутриМетода = Ложь;
			КонецЕсли;
			
			ЗакончилсяБлокПеременных = Истина;
			ВхождениеНайдено = Истина;
			Прервать;
			
		КонецЦикла;
		
		Если УбратьСимволыВНачалеСтроки Тогда
			НоваяСтрока = СокрЛ(СтрокаМодуляИсходная);
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
			ФайлИзменен = Истина;
			Продолжить;
		КонецЕсли;
		
		Если ВхождениеНайдено Тогда
			Продолжить;
		КонецЕсли;
		
		
		// Проверяем объявление переменных модуля Перем.
		Если НЕ ЗакончилсяБлокПеременных Тогда
			
			УбратьСимволыВНачалеСтроки = Ложь;
			ВхождениеНайдено = Ложь;
			
			ПозицияОператора = СтрНайти(СтрокаМодуля, ТекстПерем);
			
			Если ПозицияОператора = 1 Тогда
				
				// Если строка начинается с оператора Перем, ничего менять не нужно.
				ВхождениеНайдено = Истина;
				
			ИначеЕсли ПозицияОператора > 1 Тогда
				
				// Проверяем строку перед текстом оператора и символ после.
				СтрокаДо = Лев(СтрокаМодуля, ПозицияОператора - 1);
				СимволПослеОператора = Сред(СтрокаМодуля, ПозицияОператора + СтрДлина(ТекстПерем), 1);
				
				// Если строка до текста оператора пустая и первый символ после него незначащий, то это вхождение оператора.
				Если ПустаяСтрока(СтрокаДо) Тогда
					ВхождениеНайдено = Истина;
					Если ПустаяСтрока(СимволПослеОператора) Тогда
						УбратьСимволыВНачалеСтроки = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если УбратьСимволыВНачалеСтроки Тогда
				НоваяСтрока = СокрЛ(СтрокаМодуляИсходная);
				ДокументТекст.ЗаменитьСтроку(НомерСтроки, НоваяСтрока);
				ФайлИзменен = Истина;
				Продолжить;
			КонецЕсли;
			
			Если ВхождениеНайдено Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		
		// Проверяем директивы компилятора (&НаКлиенте, &НаСервере и т.д.)
		// и инструкции препроцессора (#Область, #КонецОбласти).
		ИзмененнаяСтрока = СтрокаМодуляИсходная;
		СтрокаИзменена = Ложь;
		
		Для Каждого ТекущийСимвол Из МассивДирективИнструкций Цикл
			
			ПозицияСимвола = СтрНайти(СтрокаМодуля, ТекущийСимвол);
			
			// Если символа нет в строке, пропускаем.
			Если ПозицияСимвола = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем строку перед текстом оператора.
			СтрокаДо = Лев(СтрокаМодуля, ПозицияСимвола - 1);
			// Если строка не пустая, то это вхождение текста не является директивой или инструкцией.
			Если НЕ ПустаяСтрока(СтрокаДо) Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем незначащие символы после искомого текста.
			ПозицияТекущегоСимвола = ПозицияСимвола + 1;
			НуженСдвигВлево = Ложь;
			
			Пока Истина Цикл
				
				// Если дошли до конца строки, выходим из цикла.
				Если ПозицияТекущегоСимвола > СтрДлина(СтрокаМодуля) Тогда
					Прервать;
				КонецЕсли;
				
				СимволВСтроке = Сред(СтрокаМодуля, ПозицияТекущегоСимвола, 1);
				ПозицияТекущегоСимвола = ПозицияТекущегоСимвола + 1;
				
				// Если встретили значащий символ или дошли до конца строки, прерываем цикл.
				Если НЕ ПустаяСтрока(СимволВСтроке) Тогда
					Прервать;
				КонецЕсли;
				
				ИзмененнаяСтрока = СтрокаДо + ТекущийСимвол + Прав(ИзмененнаяСтрока, СтрДлина(ИзмененнаяСтрока) - 2 - СтрДлина(СтрокаДо));
				
				СтрокаИзменена = Истина;
				
			КонецЦикла;
			
			// Убираем незначащие символы слева, если это необходимо.
			Если ПозицияСимвола > 1 Тогда
				
				Если ТекущийСимвол = "#" Тогда
					
					НуженСдвигВлево = ПозицияНеВнутриМетода;
					
				ИначеЕсли ТекущийСимвол = "&" Тогда
					
					НуженСдвигВлево = Истина;
					
				КонецЕсли;
				
				Если НуженСдвигВлево Тогда
					ИзмененнаяСтрока = СокрЛ(ИзмененнаяСтрока);
					СтрокаИзменена = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаИзменена Тогда
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, ИзмененнаяСтрока);
			ФайлИзменен = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция УдалитьПустыеОбласти(ДокументТекст)
	
	ФайлИзменен = Ложь;
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	Если КоличествоСтрок = 0 Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	ДеревоОбластей = Новый ДеревоЗначений;
	ДеревоОбластей.Колонки.Добавить("ЭтоОбласть");
	ДеревоОбластей.Колонки.Добавить("НомерСтрокиНачало");
	ДеревоОбластей.Колонки.Добавить("НомерСтрокиКонец");
	
	ТекстОбласть = ВРег("#Область");
	ТекстКонецОбласти = ВРег("#КонецОбласти");
	
	ТекущаяОбласть = ДеревоОбластей.Строки.Добавить();
	ТекущаяОбласть.ЭтоОбласть = Ложь;
	ТекущаяОбласть.НомерСтрокиНачало = 0;
	ТекущаяОбласть.НомерСтрокиКонец = 0;
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		// Пропускаем пустые строки.
		Если ПустаяСтрока(СтрокаМодуля) Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропускаем комментарии.
		СтрокаМодуля = СокрЛ(СтрокаМодуля);
		Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, " ", "");
		СтрокаМодуля = СтрЗаменить(СтрокаМодуля, Символы.Таб, "");
		СтрокаМодуля = ВРег(СтрокаМодуля);
		
		// Проверяем, что находится в начале строки.
		Если СтрНачинаетсяС(СтрокаМодуля, ТекстОбласть) Тогда
			// Если область, то добавляем строку в дерево областей.
			ТекущаяОбласть = ТекущаяОбласть.Строки.Добавить();
			ТекущаяОбласть.ЭтоОбласть = Истина;
			ТекущаяОбласть.НомерСтрокиНачало = НомерСтроки;
		ИначеЕсли СтрНачинаетсяС(СтрокаМодуля, ТекстКонецОбласти) Тогда
			// Если конец области, то закрываем текущую область в дереве областей.
			ТекущаяОбласть.НомерСтрокиКонец = НомерСтроки;
			
			// Переопределеяем текущую область как родителя области.
			СтрокаРодителя = ТекущаяОбласть.Родитель;
			Если СтрокаРодителя <> Неопределено Тогда
				// Устанавливаем родителя, если это не корень дерева значений.
				ТекущаяОбласть = СтрокаРодителя;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДеревоОбластей.Строки.Количество() = 0 Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Получим таблицу областей из дерева значений.
	ТаблицаОбластей = Новый ТаблицаЗначений;
	ТаблицаОбластей.Колонки.Добавить("НомерСтрокиНачало");
	ТаблицаОбластей.Колонки.Добавить("НомерСтрокиКонец");
	
	// Заполним массив всеми строками дерева значений.
	ПараметрыОтбора = Новый Структура("ЭтоОбласть", Истина);
	МассивСтрокОбластей = ДеревоОбластей.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
	
	// Заполним таблицу областей по массиву строк дерева значений.
	Для Каждого СтрокаОбласти Из МассивСтрокОбластей Цикл
		НоваяОбласть = ТаблицаОбластей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяОбласть, СтрокаОбласти);
		
		Если НЕ ЗначениеЗаполнено(НоваяОбласть.НомерСтрокиКонец) Тогда
			НоваяОбласть.НомерСтрокиКонец = КоличествоСтрок;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим колонку - флаг пустоты области.
	ТаблицаОбластей.Колонки.Добавить("ОбластьПустая");
	
	// Заполним колонку "ОбластьПустая" по тексту документа.
	Для Каждого СтрокаОбласти Из ТаблицаОбластей Цикл
		
		НомерСтрокиНачало = СтрокаОбласти.НомерСтрокиНачало;
		НомерСтрокиКонец = СтрокаОбласти.НомерСтрокиКонец;
		
		ОбластьПустая = Истина;
		Для НомерСтроки = НомерСтрокиНачало + 1 По НомерСтрокиКонец - 1 Цикл
			
			СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
			
			// Пропускаем пустые строки.
			Если ПустаяСтрока(СтрокаМодуляИсходная) Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем комментарии.
			СтрокаМодуля = СокрЛ(СтрокаМодуляИсходная);
			Если СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьПустая = Ложь;
			Прервать;
			
		КонецЦикла;
		
		СтрокаОбласти.ОбластьПустая = ОбластьПустая;
		
	КонецЦикла;
	
	// Делаем отбор по пустым областям.
	ПараметрыОтбора = Новый Структура("ОбластьПустая", Истина);
	ТаблицаПустыхОбластей = ТаблицаОбластей.Скопировать(ПараметрыОтбора);
	
	Если ТаблицаПустыхОбластей.Количество() = 0 Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	ФайлИзменен = Истина;
	
	ТаблицаПустыхОбластей.Сортировать("НомерСтрокиКонец Убыв, НомерСтрокиНачало Убыв");
	Для Каждого СтрокаОбласти Из ТаблицаПустыхОбластей Цикл
		
		НомерСтрокиНачало = СтрокаОбласти.НомерСтрокиНачало;
		НомерСтрокиКонец = СтрокаОбласти.НомерСтрокиКонец;
		
		Для НомерСтроки = НомерСтрокиНачало По НомерСтрокиКонец Цикл
			// Удаляем одну и ту же строку, т.к. номер строки будет сдвигаться.
			ДокументТекст.УдалитьСтроку(НомерСтрокиНачало);
		КонецЦикла;
		
		// Остается лишняя пустая строка.
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтрокиНачало - 1);
		Если ПустаяСтрока(СтрокаМодуля) И (НомерСтрокиНачало > 1) Тогда
			// Если пустая строка до начала области, то удалим ее.
			ДокументТекст.УдалитьСтроку(НомерСтрокиНачало - 1);
		Иначе
			// Иначе удалим строку после конца области.
			СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтрокиНачало);
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				ДокументТекст.УдалитьСтроку(НомерСтрокиНачало);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ПроверкаПустыхОбластей(ДокументТекст)
	
	// Удаляем пустые области в первый раз.
	ФайлИзменен = УдалитьПустыеОбласти(ДокументТекст);
	Если НЕ ФайлИзменен Тогда
		// Если их нет, возвращаем ложь.
		Возврат Ложь;
	КонецЕсли;
	
	// Если области есть, делаем проверку в цикле и возвращаем истину.
	Пока ФайлИзменен Цикл
		ФайлИзменен = УдалитьПустыеОбласти(ДокументТекст);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаключитьМодульВИнструкциюПрепроцессора(ДокументТекст, ПолноеИмяФайла)
	
	ФайлИзменен = Ложь;
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	Если ПустаяСтрока(ТекстМодуля) Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Если модуль не содержит кода, кроме инструкции и комментариев, то очищаем модуль.
	Если НЕ МодульСодержитКод(ТекстМодуля) Тогда
		ДокументТекст.Очистить();
		ФайлИзменен = Истина;
		Возврат ФайлИзменен;
	КонецЕсли;
	
	МассивОбрабатываемыхМодулей = Новый Массив;
	МассивОбрабатываемыхМодулей.Добавить("ManagerModule");
	МассивОбрабатываемыхМодулей.Добавить("ObjectModule");
	МассивОбрабатываемыхМодулей.Добавить("RecordSetModule");
	МассивОбрабатываемыхМодулей.Добавить("ValueManagerModule");
	МассивОбрабатываемыхМодулей.Добавить("SessionModule");
	
	ИмяФайла = ПолучитьИмяФайлаБезРасширения(ПолноеИмяФайла);
	
	Если МассивОбрабатываемыхМодулей.Найти(ИмяФайла) = Неопределено Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	Если ИмяФайла = "ManagerModule" Тогда
		ФайлИзменен = ЗаключитьМодульМенеджераВИнструкциюПрепроцессора(ДокументТекст);
	ИначеЕсли ИмяФайла = "SessionModule" Тогда
		ФайлИзменен = ЗаключитьМодульСеансаВИнструкциюПрепроцессора(ДокументТекст);
	Иначе
		ФайлИзменен = ЗаключитьМодульОбъектаВИнструкциюПрепроцессора(ДокументТекст);
	КонецЕсли;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ДобавитьИнструкциюПрепроцессора(ДокументТекст, ДобавитьИсключение = Ложь)
	
	ФайлИзменен = Ложь;
	
	ТекстМодуля = СокрЛП(ДокументТекст.ПолучитьТекст());
	ДокументТекст.УстановитьТекст(ТекстМодуля);
	
	ИскомаяИнструкция = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда";
	ИскомаяИнструкцияВРег = ВРег(ИскомаяИнструкция);
	ИскомаяИнструкцияВРег = СтрЗаменить(ИскомаяИнструкцияВРег, " ", "");
	
	ТаблицаИнструкций = ПолучитьТаблицуИнструкцийПрепроцессора(ТекстМодуля, Истина);
	
	// Ищем инструкцию в таблице всех инструкций.
	СтрокаИнструкции = ТаблицаИнструкций.Найти(ИскомаяИнструкцияВРег);
	Если СтрокаИнструкции <> Неопределено Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Если инструкции нет, то оборачиваем в нее весь модуль. Для этого ищем первую непустую строку, комментарии пропускаем.
	НомерСтроки = 1;
	МодульСодержитКод = Ложь;
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	Для Счетчик = 1 По КоличествоСтрок Цикл
		
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(Счетчик);
		Если ПустаяСтрока(СтрокаМодуля) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "//") Тогда
			Продолжить;
		КонецЕсли;
		
		МодульСодержитКод = Истина;
		НомерСтроки = Счетчик;
		Прервать;
		
	КонецЦикла;
	
	Если МодульСодержитКод Тогда
		// Добавляем инструкцию в первую непустую строку.
		ДокументТекст.ВставитьСтроку(НомерСтроки, ИскомаяИнструкция);
		ДокументТекст.ВставитьСтроку(НомерСтроки + 1, "");
	Иначе
		// Если в модуле кода нет, то добавляем в конец модуля.
		ДокументТекст.ДобавитьСтроку("");
		ДокументТекст.ДобавитьСтроку(ИскомаяИнструкция);
	КонецЕсли;
	
	ДокументТекст.ДобавитьСтроку("");
	
	Если ДобавитьИсключение Тогда
		ДокументТекст.ДобавитьСтроку("#Иначе");
		ДокументТекст.ДобавитьСтроку("ВызватьИсключение НСтр(""ru = 'Недопустимый вызов объекта на клиенте.'"");");
	КонецЕсли;
	
	ДокументТекст.ДобавитьСтроку("#КонецЕсли");
	
	ТекстМодуля = СокрЛП(ДокументТекст.ПолучитьТекст());
	ДокументТекст.УстановитьТекст(ТекстМодуля);
	
	ФайлИзменен = Истина;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ЗаключитьМодульМенеджераВИнструкциюПрепроцессора(ДокументТекст)
	
	// В модуле менеджера только добавляем инструкцию, если ее не было.
	ФайлИзменен = ДобавитьИнструкциюПрепроцессора(ДокументТекст);
	
	// Не обрабатываем отдельно обработчики событий:
	// ОбработкаПолученияФормы, ОбработкаПолученияДанныхВыбора,
	// ОбработкаПолученияПредставления, ОбработкаПолученияПолейПредставления,
	// т.к. их нахождение в инструкции является рекомендацией.
	// Указанные обработчики событий оставляем в коде без изменений.
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ЗаключитьМодульСеансаВИнструкциюПрепроцессора(ДокументТекст)
	
	ФайлИзменен = ДобавитьИнструкциюПрепроцессора(ДокументТекст);
	Если ФайлИзменен Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	ТекстМодуля = СокрП(ДокументТекст.ПолучитьТекст());
	ДокументТекст.УстановитьТекст(ТекстМодуля);
	
	// Удаляем комментарии из модуля.
	ТекстМодуля = ПолучитьТекстМодуляБезКомментариев(ТекстМодуля);
	
	ИскомаяИнструкция = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда";
	ИскомаяИнструкцияВРег = ВРег(ИскомаяИнструкция);
	ИскомаяИнструкцияВРег = СтрЗаменить(ИскомаяИнструкцияВРег, " ", "");
	
	ТаблицаИнструкций = ПолучитьТаблицуИнструкцийПрепроцессора(ТекстМодуля, Истина);
	
	// Ищем инструкцию в таблице всех инструкций.
	// Добавляли раньше, поэтому инструкция должна быть.
	СтрокаИнструкции = ТаблицаИнструкций.Найти(ИскомаяИнструкцияВРег);
	Если СтрокаИнструкции = Неопределено Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Если инструкция есть, то проверяем, что она начинается в начале и заканчивается в конце модуля.
	// Сначала проверяем текст после окончания инструкции, чтобы не слетели позиции начала и окончания.
	ПозицияКонецЕсли = СтрокаИнструкции.ПозицияКонецЕсли;
	ТекстПосле = Сред(ТекстМодуля, ПозицияКонецЕсли + СтрДлина("#КонецЕсли"));
	Если НЕ ПустаяСтрока(ТекстПосле) Тогда
		
		// Если после инструкции есть какой-либо текст, то переносим окончание инструкции в конец модуля.
		НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияКонецЕсли);
		ДокументТекст.УдалитьСтроку(НомерСтроки);
		
		// Проверяем следующую строку, если пустая, то удаляем.
		Если ПустаяСтрока(ДокументТекст.ПолучитьСтроку(НомерСтроки)) Тогда
			ДокументТекст.УдалитьСтроку(НомерСтроки);
		КонецЕсли;
		
		// Добавляем окончание инструкции в конец модуля.
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(ДокументТекст.КоличествоСтрок());
		Если НЕ ПустаяСтрока(СтрокаМодуля) Тогда
			ДокументТекст.ДобавитьСтроку("");
		КонецЕсли;
		ДокументТекст.ДобавитьСтроку("#КонецЕсли");
		
		ФайлИзменен = Истина;
		
	КонецЕсли;
	
	ПозицияЕсли = СтрокаИнструкции.ПозицияЕсли;
	ТекстДо = Лев(ТекстМодуля, ПозицияЕсли - 1);
	Если НЕ ПустаяСтрока(ТекстДо) Тогда
		
		// Если до инструкции есть какой-либо текст, то переносим инструкцию в начало модуля.
		НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияЕсли);
		ДокументТекст.УдалитьСтроку(НомерСтроки);
		
		// Проверяем следующую строку, если пустая, то удаляем.
		Если ПустаяСтрока(ДокументТекст.ПолучитьСтроку(НомерСтроки)) Тогда
			ДокументТекст.УдалитьСтроку(НомерСтроки);
		КонецЕсли;
		
		// Ищем первую непустую строку, комментарии пропускаем.
		КоличествоСтрок = ДокументТекст.КоличествоСтрок();
		Для Счетчик = 1 По КоличествоСтрок Цикл
			
			СтрокаМодуля = ДокументТекст.ПолучитьСтроку(Счетчик);
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "//") Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = Счетчик;
			Прервать;
			
		КонецЦикла;
		
		ДокументТекст.ВставитьСтроку(НомерСтроки, "");
		ДокументТекст.ВставитьСтроку(НомерСтроки, ИскомаяИнструкция);
		
		ФайлИзменен = Истина;
		
	КонецЕсли;
	
	Возврат ФайлИзменен;
	
КонецФункции

Функция ЗаключитьМодульОбъектаВИнструкциюПрепроцессора(ДокументТекст)
	
	ФайлИзменен = ДобавитьИнструкциюПрепроцессора(ДокументТекст, Истина);
	Если ФайлИзменен Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	ТекстМодуля = СокрП(ДокументТекст.ПолучитьТекст());
	ДокументТекст.УстановитьТекст(ТекстМодуля);
	
	// Удаляем комментарии из модуля.
	ТекстМодуля = ПолучитьТекстМодуляБезКомментариев(ТекстМодуля);
	
	ИскомаяИнструкция = "#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда";
	ИскомаяИнструкцияВРег = ВРег(ИскомаяИнструкция);
	ИскомаяИнструкцияВРег = СтрЗаменить(ИскомаяИнструкцияВРег, " ", "");
	
	ТекстИсключения = "ВызватьИсключение НСтр(""ru = 'Недопустимый вызов объекта на клиенте.'"");";
	ТекстИсключенияВРег = ВРег(ТекстИсключения);
	ТекстИсключенияВРег = СтрЗаменить(ТекстИсключенияВРег, " ", "");
	ТекстИсключенияВРег = СтрЗаменить(ТекстИсключенияВРег, ";", "");
	
	ТаблицаИнструкций = ПолучитьТаблицуИнструкцийПрепроцессора(ТекстМодуля, Истина);
	
	// Ищем инструкцию в таблице всех инструкций.
	// Добавляли раньше, поэтому инструкция должна быть.
	СтрокаИнструкции = ТаблицаИнструкций.Найти(ИскомаяИнструкцияВРег);
	Если СтрокаИнструкции = Неопределено Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Если инструкция есть, то проверяем, что она начинается в начале и заканчивается в конце модуля.
	// Сначала проверяем текст после окончания инструкции, чтобы не слетели позиции начала и окончания.
	ПозицияКонецЕсли = СтрокаИнструкции.ПозицияКонецЕсли;
	ТекстПосле = Сред(ТекстМодуля, ПозицияКонецЕсли + СтрДлина("#КонецЕсли"));
	Если НЕ ПустаяСтрока(ТекстПосле) Тогда
		
		// Если после инструкции есть какой-либо текст, то переносим окончание инструкции в конец модуля.
		НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияКонецЕсли);
		ДокументТекст.УдалитьСтроку(НомерСтроки);
		
		// Добавляем окончание инструкции в конец модуля.
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(ДокументТекст.КоличествоСтрок());
		Если НЕ ПустаяСтрока(СтрокаМодуля) Тогда
			ДокументТекст.ДобавитьСтроку("");
		КонецЕсли;
		ДокументТекст.ДобавитьСтроку("#КонецЕсли");
		
		ФайлИзменен = Истина;
		
	КонецЕсли;
	
	// Проверяем, было ли условие "#Иначе" в искомой инструкции.
	ДобавитьИсключение = Истина;
	ПозицияИначе = СтрокаИнструкции.ПозицияИначе;
	Если ПозицияИначе <> Неопределено Тогда
		ТекстПослеИначе = Сред(ТекстМодуля, ПозицияИначе);
		ТекстПослеИначе = ВРег(ТекстПослеИначе);
		ТекстПослеИначе = СтрЗаменить(ТекстПослеИначе, " ", "");
		ТекстПослеИначе = СтрЗаменить(ТекстПослеИначе, Символы.Таб, "");
		
		// Если исключение после "#Иначе" не найдено, то устанавливаем флаг.
		ДобавитьИсключение = (СтрНайти(ТекстПослеИначе, ТекстИсключенияВРег) = 0);
	КонецЕсли;
	
	Если ДобавитьИсключение Тогда
		
		НомерПоследнейСтроки = ДокументТекст.КоличествоСтрок();
		
		// Добавляем исключение.
		ДокументТекст.ВставитьСтроку(НомерПоследнейСтроки, ТекстИсключения);
		
		// Если "#Иначе" не было, то добавляем.
		Если ПозицияИначе = Неопределено Тогда
			ДокументТекст.ВставитьСтроку(НомерПоследнейСтроки, "#Иначе");
		КонецЕсли;
		
		ФайлИзменен = Истина;
		
	КонецЕсли;
	
	ПозицияЕсли = СтрокаИнструкции.ПозицияЕсли;
	ТекстДо = Лев(ТекстМодуля, ПозицияЕсли - 1);
	Если НЕ ПустаяСтрока(ТекстДо) Тогда
		
		// Если до инструкции есть какой-либо текст, то переносим инструкцию в начало модуля.
		НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияЕсли);
		ДокументТекст.УдалитьСтроку(НомерСтроки);
		
		// Проверяем следующую строку, если пустая, то удаляем.
		Если ПустаяСтрока(ДокументТекст.ПолучитьСтроку(НомерСтроки)) Тогда
			ДокументТекст.УдалитьСтроку(НомерСтроки);
		КонецЕсли;
		
		// Ищем первую непустую строку, комментарии пропускаем.
		КоличествоСтрок = ДокументТекст.КоличествоСтрок();
		Для Счетчик = 1 По КоличествоСтрок Цикл
			
			СтрокаМодуля = ДокументТекст.ПолучитьСтроку(Счетчик);
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "//") Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = Счетчик;
			Прервать;
			
		КонецЦикла;
		
		ДокументТекст.ВставитьСтроку(НомерСтроки, "");
		ДокументТекст.ВставитьСтроку(НомерСтроки, ИскомаяИнструкция);
		
		ФайлИзменен = Истина;
		
	КонецЕсли;
	
	Возврат ФайлИзменен;
	
КонецФункции

// Удаляет преамбулу и инструкцию препроцессору.
// Возвращает Истину, если модуль содержит еще какой-либо код или другие комментарии.
//
Функция МодульСодержитКод(Знач ТекстМодуля)
	
	Если ПустаяСтрока(ТекстМодуля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, "");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, " ", "");
	
	МассивИнструкций = Новый Массив;
	МассивИнструкций.Добавить("#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда");
	МассивИнструкций.Добавить("#Иначе");
	МассивИнструкций.Добавить("ВызватьИсключение НСтр(""ru = 'Недопустимый вызов объекта на клиенте.'"");");
	МассивИнструкций.Добавить("#КонецЕсли");
	
	Для Каждого ТекстИнструкции Из МассивИнструкций Цикл
		ТекстИнструкции = ВРег(ТекстИнструкции);
		ТекстИнструкции = СтрЗаменить(ТекстИнструкции, Символы.Таб, "");
		ТекстИнструкции = СтрЗаменить(ТекстИнструкции, " ", "");
		
		ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстИнструкции, "");
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстМодуля) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем преамбулу.
	ТекстМодуля = СокрЛ(ТекстМодуля);
	
	// Если текст модуля не начинается с длинного комментария, тогда он не содержит преамбулу.
	Если НЕ СтрНачинаетсяС(ТекстМодуля, ТекстСимволыНачалаПреамбулы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.УстановитьТекст(ТекстМодуля);
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаМодуля = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаМодуля) Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаМодуля = СокрЛ(СтрокаМодуля);
		Если НЕ СтрНачинаетсяС(СтрокаМодуля, "//") Тогда
			Прервать;
		КонецЕсли;
		
		ДокументТекст.ЗаменитьСтроку(НомерСтроки, "");
		
	КонецЦикла;
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	
	Возврат НЕ ПустаяСтрока(ТекстМодуля);
	
КонецФункции

#КонецОбласти

#Область ЛокализацияДинамическихСписков

Функция УдалитьКомментарийИзСтроки(СтрокаМодуля)
	
	Если ПустаяСтрока(СтрокаМодуля) Тогда
		Возврат СтрокаМодуля;
	КонецЕсли;
	
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	Если ПозицияКомментария = 0 Тогда
		Возврат СтрокаМодуля;
	КонецЕсли;
	
	// Например, URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/"; - не проверяем на комментарий.
	СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "://", "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>");
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	
	// Есть комментарий.
	Если ПозицияКомментария > 0 Тогда
		ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
		СтрокаОткрыта = СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "|");
		
		// Нет кавычек, удаляем комментарий.
		Если ПозицияКавычек = 0 Тогда
			СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			
		// Знак комментария в открытой строке, например:
		// |//////////////////";
		ИначеЕсли СтрокаОткрыта И ПозицияКавычек > 0 Тогда
			ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияКавычек);
			Если ПозицияКомментария > 0 Тогда
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			КонецЕсли;
			
		// Строка не открыта, кавычки после комментария, удаляем комментарий.
		ИначеЕсли ПозицияКавычек > ПозицияКомментария Тогда
			СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			
		Иначе
			КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаМодуля, ПозицияКомментария), """");
			// Строка открывается и закрывается до комментария, удаляем комментарий.
			Если КоличествоКавычекДоКомментария % 2 = 0 Тогда
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрЗаменить(СтрокаМодуля, "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>", "://");;
	
КонецФункции

Функция ПолучитьТекстМодуляБезКомментариев(ТекстМодуля)
	
	РазборТекста = Новый ТекстовыйДокумент;
	РазборТекста.УстановитьТекст(ТекстМодуля);
	
	КоличествоСтрок = РазборТекста.КоличествоСтрок();
	
	Для Счетчик = 1 По КоличествоСтрок Цикл
		СтрокаМодуля = РазборТекста.ПолучитьСтроку(Счетчик);
		СтрокаМодуля = УдалитьКомментарийИзСтроки(СтрокаМодуля);
		РазборТекста.ЗаменитьСтроку(Счетчик, СтрокаМодуля);
	КонецЦикла;
	
	Возврат РазборТекста.ПолучитьТекст();
	
КонецФункции

Функция ПолучитьТекстЗапросаРеквизитаДинамическийСписок(ДокументDOM, ЭлементDOMРеквизит)
	
	ВыражениеПолученияЗапроса = "xmlns:Settings/xmlns:QueryText";
	
	ТекстЗапроса = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath(ВыражениеПолученияЗапроса, ДокументDOM, ЭлементDOMРеквизит);
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат "";
	КонецЕсли;
	
	Если СтрНайти(ТекстЗапроса, "//") > 0 Тогда
		ТекстЗапроса = ПолучитьТекстМодуляБезКомментариев(ТекстЗапроса);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьПсевдонимыСоставныхПолейТекстаЗапроса(Знач ТекстЗапроса)
	
	МассивСоставныхПолей = Новый Массив;
	
	ТекстЗапросаВРег = ВРег(ТекстЗапроса);
	
	ТекстВыбрать = "ВЫБРАТЬ";
	ТекстИз = "ИЗ";
	СтрДлинаТекстВыбрать = СтрДлина(ТекстВыбрать);
	СтрДлинаТекстИз = СтрДлина(ТекстИз);
	ТекстКак = " КАК ";
	СтрДлинаТекстКак = СтрДлина(ТекстКак);
	
	СтрокаОператоровЗапроса = " РАЗРЕШЕННЫЕ , РАЗЛИЧНЫЕ , КАК СТРОКА(";
	МассивОператоровЗапроса = СтрРазделить(СтрокаОператоровЗапроса, ",");
	
	СтрокаОператоровСоставныхПолей = " ,(,),+,-,*,/";
	МассивОператоровСоставныхПолей = СтрРазделить(СтрокаОператоровСоставныхПолей, ",");
	
	ПозицияВыбрать = 0;
	ПозицияИз = 0;
	НайденОператорВыбрать = Ложь;
	НайденОператорИз = Ложь;
	Пока Истина Цикл 
		
		Если НЕ НайденОператорВыбрать Тогда
			
			ПозицияВыбрать = СтрНайти(ТекстЗапросаВРег, ТекстВыбрать,, ПозицияВыбрать + 1);
			Если ПозицияВыбрать = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			Если ПозицияВыбрать > 1 Тогда
				// Проверяем символ до и после, если не пустые строки, ищем дальше.
				СимволДо = Сред(ТекстЗапросаВРег, ПозицияВыбрать - 1, 1);
				Если (НЕ ПустаяСтрока(СимволДо)) И (СимволДо <> "(") Тогда
					Продолжить;
				КонецЕсли;
				
				СимволПосле = Сред(ТекстЗапросаВРег, ПозицияВыбрать + СтрДлинаТекстВыбрать, 1);
				Если НЕ ПустаяСтрока(СимволПосле) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НайденОператорВыбрать = Истина;
			
		КонецЕсли;
		
		Если НЕ НайденОператорИз Тогда
			
			ПозицияИз = СтрНайти(ТекстЗапросаВРег, ТекстИз,, ПозицияИз + 1);
			Если ПозицияИз = 0 Тогда 
				Прервать;
			КонецЕсли;
			
			// Проверяем символ до и после, если не пустые строки, ищем дальше.
			СимволДо = Сред(ТекстЗапросаВРег, ПозицияИз - 1, 1);
			Если НЕ ПустаяСтрока(СимволДо) Тогда
				Продолжить;
			КонецЕсли;
			
			СимволПосле = Сред(ТекстЗапросаВРег, ПозицияИз + СтрДлинаТекстИз, 1);
			Если НЕ ПустаяСтрока(СимволПосле) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденОператорИз = Истина;
			
		КонецЕсли;
		
		НайденОператорВыбрать = Ложь;
		НайденОператорИз = Ложь;
		
		ПозицияВыбранныхПолей = ПозицияВыбрать + СтрДлинаТекстВыбрать;
		ТекстВыбранныхПолей = Сред(ТекстЗапроса, ПозицияВыбранныхПолей, ПозицияИз - ПозицияВыбранныхПолей);
		
		// Убираем табы, переносы и некоторые операторы запроса.
		ТекстВыбранныхПолей = СтрЗаменить(ТекстВыбранныхПолей, Символы.ПС, " ");
		ТекстВыбранныхПолей = СтрЗаменить(ТекстВыбранныхПолей, Символы.Таб, " ");
		Для Каждого ОператорЗапроса Из МассивОператоровЗапроса Цикл
			ТекстВыбранныхПолей = СтрЗаменить(ТекстВыбранныхПолей, ОператорЗапроса, "");
		КонецЦикла;
		
		ТекстВыбранныхПолей = СокрЛП(ТекстВыбранныхПолей);
		
		МассивВыбранныхПолей = СтрРазделить(ТекстВыбранныхПолей, ",");
		Для Каждого ВыбранноеПоле Из МассивВыбранныхПолей Цикл
			
			// Проверяем, что указан псевдоним поля.
			ПозицияКак = СтрНайти(ВРег(ВыбранноеПоле), ТекстКак);
			Если ПозицияКак = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбранноеПолеБезПсевдонима = Лев(ВыбранноеПоле, ПозицияКак);
			ВыбранноеПолеБезПсевдонима = СокрЛП(ВыбранноеПолеБезПсевдонима);
			
			// Не проверяем поля по шаблону "Таблица.Поле1.Поле2...",
			// все остальные являются составными или комбинацией других полей - их проверяем.
			НайденоСоставноеПоле = Ложь;
			МассивЧастейПоля = СтрРазделить(ВыбранноеПолеБезПсевдонима, ".", Ложь);
			Если МассивЧастейПоля.Количество() < 2 Тогда
				НайденоСоставноеПоле = Истина;
			Иначе
				// Проверяем каждый элемент пути поля, если внутри есть пробелы, то это составное поле.
				Для Каждого ЭлементПути Из МассивЧастейПоля Цикл
					ЭлементПути = СокрЛП(ЭлементПути);
					
					Для Каждого ОператорСоставногоПоля Из МассивОператоровСоставныхПолей Цикл
						Если СтрНайти(ЭлементПути, ОператорСоставногоПоля) > 0 Тогда
							НайденоСоставноеПоле = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если НайденоСоставноеПоле Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ НайденоСоставноеПоле Тогда
				Продолжить;
			КонецЕсли;
			
			// Получаем псевдоним поля.
			ПсевдонимПоля = Сред(ВыбранноеПоле, ПозицияКак + СтрДлинаТекстКак);
			ПсевдонимПоля = СокрЛП(ПсевдонимПоля);
			
			Если МассивСоставныхПолей.Найти(ПсевдонимПоля) = Неопределено Тогда
				МассивСоставныхПолей.Добавить(ПсевдонимПоля);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивСоставныхПолей;
	
КонецФункции

// Заполняет заголовки колонок таблицы формы, связанной с реквизитом формы типа "ДинамическийСписок".
// Заголовки заполняются путем преобразования наименования колонки (добавляются пробелы и первые буквы слов переводятся
// в нижний регистр). Заполняются заголовки только тех колонок, которые связаны с составными полями запроса
// динамического списка. Поле считается НЕ составным, если оно выбирается по шаблону "Таблица.Поле1.Поле2...",
// все остальные поля считаются составными (комбинация других полей, "ВЫБОР...КОГДА...ТОГДА" и др.).
//
Функция ЗаполнитьЗаголовкиПолейДинамическогоСписка(ДокументDOM)
	
	ФормаИзменена = Ложь;
	
	ВыражениеПоискаПоТипуШаблон = "//xmlns:Attributes/xmlns:Attribute/xmlns:Type/v8:Type[text()='%1']";
	ВыражениеПоискаПоПутиКДаннымШаблон = "//xmlns:ChildItems/*/xmlns:DataPath[text()='%1']";
	
	МассивТиповДинамическийСписок = Новый Массив;
	МассивТиповДинамическийСписок.Добавить("cfg:DynamicList");
	МассивТиповДинамическийСписок.Добавить("dl:DynamicList");
	
	Для Каждого ТипДинамическийСписок Из МассивТиповДинамическийСписок Цикл
		
		ВыражениеПоискаПоТипу = СтрШаблон(ВыражениеПоискаПоТипуШаблон, ТипДинамическийСписок);
		РезультатXPath = ВычислитьВыражениеXPath(ВыражениеПоискаПоТипу, ДокументDOM);
		Пока Истина Цикл
			
			ЭлементDOMv8Type = РезультатXPath.ПолучитьСледующий();
			Если ЭлементDOMv8Type = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ЭлементDOMType = ЭлементDOMv8Type.РодительскийУзел;
			Если ЭлементDOMType = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементDOMРеквизит = ЭлементDOMType.РодительскийУзел;
			Если ЭлементDOMРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита = ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOMРеквизит);
			Если ПустаяСтрока(ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			// Получаем текст запроса динамического списка.
			ТекстЗапроса = ПолучитьТекстЗапросаРеквизитаДинамическийСписок(ДокументDOM, ЭлементDOMРеквизит);
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				// Пропускаем динамический список с пустым запросом.
				Продолжить;
			КонецЕсли;
			
			МассивСоставныхПолей = ПолучитьПсевдонимыСоставныхПолейТекстаЗапроса(ТекстЗапроса);
			Если МассивСоставныхПолей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СоставноеПоле Из МассивСоставныхПолей Цикл
				
				// Наименование колонки таблицы будет состоять из имени реквизита и псевдонима.
				ПутьКДанным = ИмяРеквизита + "." + СоставноеПоле;
				
				// Ищем по пути к данным псевдоним поля в колонках таблицы, связанной с реквизитом динамического списка.
				ВыражениеПоискаПоПутиКДанным = СтрШаблон(ВыражениеПоискаПоПутиКДаннымШаблон, ПутьКДанным);
				РезультатПоискаПоПутиКДанным = ВычислитьВыражениеXPath(ВыражениеПоискаПоПутиКДанным, ДокументDOM);
				Пока Истина Цикл
					
					ЭлементDOMПутьКДанным = РезультатПоискаПоПутиКДанным.ПолучитьСледующий();
					Если ЭлементDOMПутьКДанным = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ЭлементDOMПоле = ЭлементDOMПутьКДанным.РодительскийУзел;
					Если ЭлементDOMПоле = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ЗаголовокПоля = ПолучитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMПоле);
					Если НЕ ПустаяСтрока(ЗаголовокПоля) Тогда
						Продолжить;
					КонецЕсли;
					
					ИмяПоля = ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOMПоле);
					Если ПустаяСтрока(ИмяПоля) Тогда
						Продолжить;
					КонецЕсли;
					
					НовыйЗаголовокПоля = ПолучитьЗаголовокПоИмениЭлементаФормы(ИмяПоля);
					УстановитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMПоле, НовыйЗаголовокПоля);
					
					ФормаИзменена = Истина;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФормаИзменена;
	
КонецФункции

#КонецОбласти

#Область ЛокализацияЭлементовФорм

// Генерирует заголовок ЭФ из наименования по заглавным буквам, без слова "Группа", например:
//     ГруппаПодвал - Подвал
//     ГруппаОбластьОтображения - Область отображения
//     Исключение: ГруппаПользовательскихНастроек -> Группа пользовательских настроек.
// Учитывает случай аббривиатур и однобуквенных местоимений, например:
//     КодОКАТО -> Код ОКАТО;
//     ФНСРоссии -> ФНС России;
//     ЗаписатьИЗакрыть -> Записать и закрыть
// Поддерживает частный случай, описанный в стандарте:
//     ГруппаШапка -> Шапка.
//
Функция ПолучитьЗаголовокПоИмениЭлементаФормы(Знач ИмяЭлементаФормы, ТаблицаИсключенийЗаголовковЭлементовФорм = Неопределено)
	
	Если ТаблицаИсключенийЗаголовковЭлементовФорм <> Неопределено Тогда
		СтрокаИсключения = ТаблицаИсключенийЗаголовковЭлементовФорм.Найти(ИмяЭлементаФормы, "Наименование");
		Если СтрокаИсключения <> Неопределено Тогда
			Возврат СтрокаИсключения.Заголовок;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоСимволов = СтрДлина(ИмяЭлементаФормы);
	Если КоличествоСимволов <= 1 Тогда
		Возврат ИмяЭлементаФормы;
	КонецЕсли;
	
	ТекстГруппа = "Группа";
	
	Если СтрНачинаетсяС(ИмяЭлементаФормы, ТекстГруппа) Тогда
		ИмяЭлементаФормы = Сред(ИмяЭлементаФормы, СтрДлина(ТекстГруппа) + 1);
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяЭлементаФормы) Тогда
		Возврат "";
	КонецЕсли;
	
	Если апк_ЭтоЧисло(ИмяЭлементаФормы) Тогда
		Возврат "";
	КонецЕсли;
	
	Заголовок = "";
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		
		ТекущийСимвол = Сред(ИмяЭлементаФормы, НомерСимвола, 1);
		
		Если ТекущийСимвол = "_" Тогда
			Заголовок = Заголовок + " ";
		ИначеЕсли ВРег(ТекущийСимвол) = ТекущийСимвол Тогда
			Заголовок = Заголовок + " " + ТекущийСимвол;
		Иначе
			Заголовок = Заголовок + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСлов = СтрРазделить(Заголовок, " ", Ложь);
	НомерПоследнегоСлова = МассивСлов.ВГраница();
	
	Заголовок = МассивСлов[0];
	
	ПредыдущееСлово = Заголовок;
	Для НомерСлова = 1 По НомерПоследнегоСлова Цикл
		
		ТекущееСлово = МассивСлов[НомерСлова];
		
		// Если длина слова больше 1 символа, то добавляем слово с пробелом и продолжаем.
		Если СтрДлина(ТекущееСлово) > 1 Тогда
			Заголовок = Заголовок + " " + НРег(ТекущееСлово);
			Продолжить;
		КонецЕсли;
		
		// Текущее слово состоит из 1 символа, проверяем предыдущее и следующее слово.
		// Если предыдущее слово также состояло из 1 символа, то началась аббревиатура.
		Если СтрДлина(МассивСлов[НомерСлова - 1]) = 1 Тогда
			Заголовок = Заголовок + ТекущееСлово;
			Продолжить;
		КонецЕсли;
		
		// Если это слово последнее, то добавим текущее с пробелом и с маленькой буквы.
		Если НомерСлова >= НомерПоследнегоСлова Тогда
			Заголовок = Заголовок + " " + НРег(ТекущееСлово);
			Продолжить;
		КонецЕсли;
		
		// Если следующее слово также из одного символа, то аббревиатура продолжается.
		Если СтрДлина(МассивСлов[НомерСлова + 1]) = 1 Тогда
			Заголовок = Заголовок + " " + ТекущееСлово;
			Продолжить;
		КонецЕсли;
		
		// Если предыдущее и следующее слово длиннее 1 символа, то текущее слово - союз или предлог.
		Заголовок = Заголовок + " " + НРег(ТекущееСлово);
		
	КонецЦикла;
	
	Заголовок = СокрЛП(Заголовок);
	Заголовок = ВРег(Лев(Заголовок, 1)) + Сред(Заголовок, 2);
	
	Возврат Заголовок;
	
КонецФункции

Функция ПреобразоватьТекстДляСравнения(Знач Текст, ТекстДляУдаления = "Группа")
	
	СтрокаСимволов = " ,.;""'!?\/_" + Символы.Таб + Символы.ПС;
	
	ПреобразованныйТекст = ВРег(Текст);
	
	КоличествоСимволов = СтрДлина(СтрокаСимволов);
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		Символ = Сред(СтрокаСимволов, НомерСимвола, 1);
		ПреобразованныйТекст = СтрЗаменить(ПреобразованныйТекст, Символ, "");
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстДляУдаления) Тогда
		ПреобразованныйТекст = СтрЗаменить(ПреобразованныйТекст, ВРег(ТекстДляУдаления), "");
	КонецЕсли;
	
	Возврат ПреобразованныйТекст;
	
КонецФункции

// Удаляет подсказки для элементов форм с типом "Групп", у которых они совпадают с синонимом или образованы из имени.
//
Функция ОчиститьПодсказкиГруппФормы(ДокументDOM)
	
	ФормаИзменена = Ложь;
	
	МассивТиповЭлементовФормы = Новый Массив;
	МассивТиповЭлементовФормы.Добавить("UsualGroup");
	МассивТиповЭлементовФормы.Добавить("Pages");
	МассивТиповЭлементовФормы.Добавить("Page");
	МассивТиповЭлементовФормы.Добавить("CommandBar");
	МассивТиповЭлементовФормы.Добавить("ColumnGroup");
	МассивТиповЭлементовФормы.Добавить("Popup");
	МассивТиповЭлементовФормы.Добавить("ButtonGroup");
	
	ВыражениеПоискаПоТипуЭлементаШаблон = "//xmlns:ChildItems/xmlns:%1";
	
	Для Каждого ТипЭлементаФормы Из МассивТиповЭлементовФормы Цикл
		
		ВыражениеПоискаПоТипуЭлемента = СтрШаблон(ВыражениеПоискаПоТипуЭлементаШаблон, ТипЭлементаФормы);
		РезультатXPath = ВычислитьВыражениеXPath(ВыражениеПоискаПоТипуЭлемента, ДокументDOM);
		Пока Истина Цикл
			
			ЭлементDOMЭлементаФормы = РезультатXPath.ПолучитьСледующий();
			Если ЭлементDOMЭлементаФормы = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ПодсказкаЭлементаФормы = ПолучитьПодсказкуЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы);
			Если ПустаяСтрока(ПодсказкаЭлементаФормы) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаголовокЭлементаФормы = ПолучитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы);
			ИмяЭлементаФормы = ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы);
			
			ПодсказкаЭлементаФормы = ПреобразоватьТекстДляСравнения(ПодсказкаЭлементаФормы);
			ЗаголовокЭлементаФормы = ПреобразоватьТекстДляСравнения(ЗаголовокЭлементаФормы);
			ИмяЭлементаФормы = ПреобразоватьТекстДляСравнения(ИмяЭлементаФормы);
			
			Если (ПодсказкаЭлементаФормы = ЗаголовокЭлементаФормы)
			 ИЛИ (ПодсказкаЭлементаФормы = ИмяЭлементаФормы) Тогда
				ОчиститьПодсказкуЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы);
				ФормаИзменена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФормаИзменена;
	
КонецФункции

// Устанавливает заголовки для элементов форм с типом "Таблица" и "Группа", у которых заголовок не заполнен.
// Генерацию заголовков производит из наименования элемента формы по заглавным буквам.
//
Функция ЗаполнитьЗаголовкиТаблицИГруппФормы(ДокументDOM, ТаблицаИсключенийЗаголовковЭлементовФорм)
	
	ФормаИзменена = Ложь;
	
	МассивТиповЭлементовФормы = Новый Массив;
	МассивТиповЭлементовФормы.Добавить("UsualGroup");
	МассивТиповЭлементовФормы.Добавить("Pages");
	МассивТиповЭлементовФормы.Добавить("Page");
	МассивТиповЭлементовФормы.Добавить("CommandBar");
	МассивТиповЭлементовФормы.Добавить("ColumnGroup");
	МассивТиповЭлементовФормы.Добавить("Popup");
	МассивТиповЭлементовФормы.Добавить("ButtonGroup");
	МассивТиповЭлементовФормы.Добавить("Table");
	
	ВыражениеПоискаПоТипуЭлементаШаблон = "//xmlns:ChildItems/xmlns:%1";
	
	Для Каждого ТипЭлементаФормы Из МассивТиповЭлементовФормы Цикл
		
		ВыражениеПоискаПоТипуЭлемента = СтрШаблон(ВыражениеПоискаПоТипуЭлементаШаблон, ТипЭлементаФормы);
		РезультатXPath = ВычислитьВыражениеXPath(ВыражениеПоискаПоТипуЭлемента, ДокументDOM);
		Пока Истина Цикл
			
			ЭлементDOMЭлементаФормы = РезультатXPath.ПолучитьСледующий();
			Если ЭлементDOMЭлементаФормы = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ИмяЭлементаФормы = ПолучитьИмяЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы);
			ЗаголовокЭлементаФормы = ПолучитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы);
			
			// Пропускаем элементы, у которых заголовок заполнен и установлен вручную, а не сгенерирован автоматически:
			// ГруппСуммаОплаты -> Группа сумма оплаты (в данном случае необходимо установить заголовок "Сумма оплаты").
			ИмяДляСравнения = ПреобразоватьТекстДляСравнения(ИмяЭлементаФормы, "");
			ЗаголовокДляСравнения = ПреобразоватьТекстДляСравнения(ЗаголовокЭлементаФормы, "");
			Если (НЕ ПустаяСтрока(ЗаголовокЭлементаФормы)) И (ИмяДляСравнения <> ЗаголовокДляСравнения) Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЗаголовокЭлементаФормы = ПолучитьЗаголовокПоИмениЭлементаФормы(ИмяЭлементаФормы, ТаблицаИсключенийЗаголовковЭлементовФорм);
			
			// Новые пустые заголовки пропускаем, например, для групп с автонумерацией ("Группа6") вернется пустой заголовок.
			// Аналогично пропускаем случаи, когда заголовок не изменился, например, он есть в таблице исключений.
			Если ПустаяСтрока(НовыйЗаголовокЭлементаФормы) ИЛИ (ЗаголовокЭлементаФормы = НовыйЗаголовокЭлементаФормы) Тогда
				Продолжить;
			КонецЕсли;
			
			УстановитьЗаголовокЭлемента(ДокументDOM, ЭлементDOMЭлементаФормы, НовыйЗаголовокЭлементаФормы);
			
			// Для обычных групп устанавливаем свойство "ОтображатьЗаголовок" = Ложь.
			Если ТипЭлементаФормы = "UsualGroup" Тогда
				УстановитьОтображатьЗаголовокЭлементаФормы(ДокументDOM, ЭлементDOMЭлементаФормы);
			КонецЕсли;
			
			ФормаИзменена = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФормаИзменена;
	
КонецФункции

#КонецОбласти

#Область ЛокализацияРегламентныхЗаданий

// Очищает наименование предопределенного регламентного задания, если оно совпадает с синонимом.
// 
Функция ОчиститьНаименованиеПредопределенногоРегламентногоЗадания(ДокументDOM)
	
	ОбъектИзменен = Ложь;
	
	// Если регламентное задание не предопределенное, то выходим.
	Предопределенное = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath("//xmlns:Predefined", ДокументDOM,, Ложь);
	Если НЕ Булево(Предопределенное) Тогда
		Возврат ОбъектИзменен;
	КонецЕсли;
	
	ЭлементDOMНаименование = ПолучитьЭлементDOMПоВыражениюXPath("//xmlns:Description", ДокументDOM);
	Если ЭлементDOMНаименование = Неопределено Тогда
		// Если наименование не задано, то очищать нечего, выходим.
		Возврат ОбъектИзменен;
	КонецЕсли;
	
	Наименование = ЭлементDOMНаименование.ТекстовоеСодержимое;
	Если ПустаяСтрока(Наименование) Тогда
		// Если наименование не задано, то очищать нечего, выходим.
		Возврат ОбъектИзменен;
	КонецЕсли;
	
	Наименование = ПреобразоватьТекстДляСравнения(Наименование, "");
	
	// Получаем синонимы регламентного задания на различных языках.
	РезультатXPath = ВычислитьВыражениеXPath("//xmlns:Synonym/v8:item/v8:content", ДокументDOM);
	Пока Истина Цикл
		
		ЭлементDOMСиноним = РезультатXPath.ПолучитьСледующий();
		Если ЭлементDOMСиноним = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Синоним = ЭлементDOMСиноним.ТекстовоеСодержимое;
		Если ПустаяСтрока(Синоним) Тогда
			Продолжить;
		КонецЕсли;
		
		// Если синоним совпадает с наименованием, то прерываем.
		Если ПреобразоватьТекстДляСравнения(Синоним, "") = Наименование Тогда
			ОбъектИзменен = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбъектИзменен Тогда
		// Если синоним совпадает с наименованием, то очищаем наименование.
		ЭлементDOMНаименование.ТекстовоеСодержимое = "";
	КонецЕсли;
	
	Возврат ОбъектИзменен;
	
КонецФункции

#КонецОбласти

#Область ОбщиеТребованияККонфигурации

Функция ТаблицыЗначенийРавны(Таблица1, Таблица2)
	
	Если Таблица1.Колонки.Количество() <> Таблица2.Колонки.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицыРавны = Истина;
	Для Каждого Таблица1Колонка Из Таблица1.Колонки Цикл
		// Проверяем наличие каждой колонки одной таблицы в другой.
		ИмяКолонки = Таблица1Колонка.Имя;
		Если Таблица2.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			ТаблицыРавны = Ложь;
			Прервать;
		КонецЕсли;
		
		Для НомерСтроки = 0 По Таблица1.Количество() - 1 Цикл
			
			Если Таблица1[НомерСтроки][ИмяКолонки] <> Таблица2[НомерСтроки][ИмяКолонки] Тогда
				ТаблицыРавны = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ТаблицыРавны Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицыРавны;
	
КонецФункции

Функция СортироватьОбъектыМетаданных(ДокументDOM)
	
	ПорядокИзменен = Ложь;
	
	ЭлементDOMПодчиненныеОбъекты = ПолучитьЭлементDOMПоВыражениюXPath("//xmlns:ChildObjects", ДокументDOM);
	Если ЭлементDOMПодчиненныеОбъекты = Неопределено Тогда
		// Если подчиненных объектов нет, выходим.
		Возврат ПорядокИзменен;
	КонецЕсли;
	
	ДочерниеУзлы = ЭлементDOMПодчиненныеОбъекты.ДочерниеУзлы;
	Если ДочерниеУзлы.Количество() = 0 Тогда
		// Если подчиненных объектов нет, выходим.
		Возврат ПорядокИзменен;
	КонецЕсли;
	
	// Заполним подчиненные объекты в таблицу значений для сортировки.
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ДочернийУзел");
	ТаблицаОбъектов.Колонки.Добавить("ИмяОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("ТипОбъекта");
	ТаблицаОбъектов.Колонки.Добавить("НомерТипаОбъекта");       // Поле для сортировки.
	ТаблицаОбъектов.Колонки.Добавить("НомерОбъектаИсключения"); // Поле для сортировки.
	ТаблицаОбъектов.Колонки.Добавить("ПрефиксУдалить");         // Поле для сортировки.
	
	// Типы объектов, которые могут располагаться в любом порядке.
	МассивИсключенийТиповОбъектов = Новый Массив;
	МассивИсключенийТиповОбъектов.Добавить(ВРег("CommonAttribute"));
	
	ТекстУдалить = ВРег("Удалить");
	НомерТипаОбъекта = -1;
	НомерОбъектаИсключения = -1;
	
	Для Каждого ДочернийУзел Из ДочерниеУзлы Цикл
		
		ТипОбъекта = ДочернийУзел.ИмяЭлемента;
		ИмяОбъекта = ДочернийУзел.ТекстовоеСодержимое;
		
		// Устанавливаем номер типа объекта в таблице объектов.
		СтрокаОбъекта = ТаблицаОбъектов.Найти(ТипОбъекта, "ТипОбъекта");
		НомерТипаОбъекта = ?(СтрокаОбъекта = Неопределено, НомерТипаОбъекта + 1, СтрокаОбъекта.НомерТипаОбъекта);
		
		// Устанавливаем номера для объектов из типов-исключений, которые не надо сортировать.
		НомерОбъектаИсключения = ?(МассивИсключенийТиповОбъектов.Найти(ВРег(ТипОбъекта)) = Неопределено, -1, НомерОбъектаИсключения + 1);
		
		// Устанавливаем флаг "ПрефиксУдалить".
		ПрефиксУдалить = СтрНачинаетсяС(ВРег(ИмяОбъекта), ТекстУдалить);
		
		СтрокаОбъекта = ТаблицаОбъектов.Добавить();
		СтрокаОбъекта.ДочернийУзел = ДочернийУзел;
		СтрокаОбъекта.ИмяОбъекта = ИмяОбъекта;
		СтрокаОбъекта.ТипОбъекта = ТипОбъекта;
		СтрокаОбъекта.НомерТипаОбъекта = НомерТипаОбъекта;
		СтрокаОбъекта.НомерОбъектаИсключения = НомерОбъектаИсключения;
		СтрокаОбъекта.ПрефиксУдалить = ПрефиксУдалить;
		
	КонецЦикла;
	
	ТаблицаОбъектовИсходная = ТаблицаОбъектов.Скопировать();
	
	ТаблицаОбъектов.Сортировать("НомерТипаОбъекта, НомерОбъектаИсключения, ПрефиксУдалить, ИмяОбъекта");
	
	Если ТаблицыЗначенийРавны(ТаблицаОбъектов, ТаблицаОбъектовИсходная) Тогда
		Возврат ПорядокИзменен;
	КонецЕсли;
	
	ПорядокИзменен = Истина;
	
	// Если объекты одного или нескольких типов были отсортированы не по порядку, то заполняем дочерние узлы заново.
	Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		ЭлементDOMПодчиненныеОбъекты.ДобавитьДочерний(СтрокаОбъекта.ДочернийУзел);
	КонецЦикла;
	
	Возврат ПорядокИзменен;
	
КонецФункции

Функция УдалитьИзбыточноеОбращениеКОбъектуВКодеМодуля(Знач ПолноеИмяФайла, ДокументТекст)
	
	ФайлИзменен = Ложь;
	
	ПолноеИмяФайла = ВРег(ПолноеИмяФайла);
	
	// Пропускаем модули менеджеров, т.к. в них невозможно обращение по "ЭтотОбъект.".
	Если СтрЗаканчиваетсяНа(ПолноеИмяФайла, ВРег("\ManagerModule.bsl")) Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Пропускаем следующие типы объектов с модулями, т.к. не имеют свойства ЭтотОбъект или ЭтаФорма.
	МассивИсключенийТипов = Новый Массив;
	МассивИсключенийТипов.Добавить("WebServices");      // - WebСервисы
	МассивИсключенийТипов.Добавить("HTTPServices");     // - HTTPСервисы
	МассивИсключенийТипов.Добавить("DocumentJournals"); // - ЖурналыДокументов
	МассивИсключенийТипов.Добавить("Enums");            // - Перечисления
	МассивИсключенийТипов.Добавить("SettingsStorages"); // - ХранилищаНастроек
	МассивИсключенийТипов.Добавить("Ext");              // - Конфигурация
	
	КаталогВыгрузкиКопия = КаталогДобавитьСлэш(КаталогВыгрузкиРезультат);
	
	ОбъектЯвляетсяИсключением = Ложь;
	Для Каждого ИсключениеТипа Из МассивИсключенийТипов Цикл
		
		КаталогТиповОбъектов = КаталогВыгрузкиКопия + ИсключениеТипа + "\";
		Если СтрНачинаетсяС(ПолноеИмяФайла, ВРег(КаталогТиповОбъектов)) Тогда
			ОбъектЯвляетсяИсключением = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбъектЯвляетсяИсключением Тогда
		Возврат ФайлИзменен;
	КонецЕсли;
	
	// Заполняем массив обращений для поиска в зависимости от типа объекта.
	МассивОбращений = Новый Массив;
	
	Если СтрНачинаетсяС(ПолноеИмяФайла, ВРег(КаталогВыгрузкиКопия + "CommonModules\")) Тогда
		
		// Если это общий модуль, то учитываем обращение по имени, кроме модулей с повторным использованием.
		ИмяМодуля = СтрЗаменить(ПолноеИмяФайла, ВРег(КаталогВыгрузкиКопия + "CommonModules\"), "");
		МассивКаталогов = СтрРазделить(ИмяМодуля, "\", Ложь);
		Если МассивКаталогов.Количество() = 0 Тогда
			Возврат ФайлИзменен;
		КонецЕсли;
		
		ИмяМодуля = МассивКаталогов[0];
		
		// Пропускаем общие модули с постфиксом "ПовтИсп".
		Если СтрНайти(ИмяМодуля, ВРег("ПовтИсп")) > 0 Тогда
			Возврат ФайлИзменен;
		КонецЕсли;
		
		МассивОбращений.Добавить(ИмяМодуля + ".");
		
	ИначеЕсли СтрЗаканчиваетсяНа(ПолноеИмяФайла, ВРег("\Ext\Form\Module.bsl")) Тогда
		// Если это форма, то учитываем обращение "ЭтаФорма".
		// Обращение "ЭтотОбъект" удалять нельзя, т.к. в большинстве случаев это критично.
		МассивОбращений.Добавить(ВРег("ЭтаФорма") + ".");
	Иначе
		// Для любого другого объекта учитываем только обращение "ЭтотОбъект".
		МассивОбращений.Добавить(ВРег("ЭтотОбъект") + ".");
	КонецЕсли;
	
	СтрокаДоступныхСимволов = " (,;+-*/=<>" + Символы.Таб + Символы.ПС;
	
	ТекстМодуляИсходный = ДокументТекст.ПолучитьТекст();
	ТекстМодуля = ВРег(ТекстМодуляИсходный);
	
	Для Каждого Обращение Из МассивОбращений Цикл
		
		ПозицияПоиска = 0;
		Пока Истина Цикл
			
			ПозицияПоиска = СтрНайти(ТекстМодуля, Обращение,, ПозицияПоиска + 1);
			Если ПозицияПоиска = 0 Тогда
				Прервать;
			КонецЕсли;
			
			// Проверяем символ перед обращением.
			// Если его нет среди разрешенных, то ищем дальше.
			ПредыдущийСимвол = Сред(ТекстМодуля, ПозицияПоиска - 1, 1);
			Если СтрНайти(СтрокаДоступныхСимволов, ПредыдущийСимвол) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияПоиска);
			
			// Получаем строку в исходном виде.
			СтрокаМодуляИсходная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
			СтрокаМодуля = ВРег(СтрокаМодуляИсходная);
			СтрокаМодуля = УдалитьКомментарийИзСтроки(СтрокаМодуля);
			
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			ПозицияПоискаВСтроке = СтрНайти(СтрокаМодуля, Обращение);
			Если ПозицияПоискаВСтроке = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем находится ли найденное обращение в кавычках.
			СтрокаДоОбращения = Лев(СтрокаМодуля, ПозицияПоискаВСтроке - 1);
			СтрокаДоОбращения = СокрЛ(СтрокаДоОбращения);
			КоличествоКавычекДоОбращения = СтрЧислоВхождений(СтрокаДоОбращения, """");
			
			КоличествоКавычекЧетное = (КоличествоКавычекДоОбращения % 2 = 0);
			
			// Если обращение в кавычках, то пропускаем.
			Если (КоличествоКавычекЧетное И СтрНачинаетсяС(СтрокаДоОбращения, "|"))
			 ИЛИ (НЕ КоличествоКавычекЧетное) Тогда
				Продолжить;
			КонецЕсли;
			
			// Удаляем обращение к объекту, т.к. оно лишнее.
			СтрокаМодуляДо = Лев(СтрокаМодуляИсходная, ПозицияПоискаВСтроке - 1);
			СтрокаМодуляПосле = Сред(СтрокаМодуляИсходная, ПозицияПоискаВСтроке + СтрДлина(Обращение));
			СтрокаМодуляЗамена = СтрокаМодуляДо + СтрокаМодуляПосле;
			
			ДокументТекст.ЗаменитьСтроку(НомерСтроки, СтрокаМодуляЗамена);
			ФайлИзменен = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ФайлИзменен;
	
КонецФункции

#КонецОбласти

#Область ПодсказкаИПроверкаЗаполнения

Функция ПолучитьСинонимЭлемента(ДокументDOM, ЭлементDOMЭлемента, Префикс = "xmlns")
	
	ВыражениеXPath = СтрШаблон("%1:Synonym/v8:item/v8:lang[text()='ru']", Префикс);
	ЭлементDOMЯзык = ПолучитьЭлементDOMПоВыражениюXPath(ВыражениеXPath, ДокументDOM, ЭлементDOMЭлемента);
	Если ЭлементDOMЯзык = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ЭлементDOMv8item = ЭлементDOMЯзык.РодительскийУзел;
	
	Заголовок = ПолучитьЗначениеЭлементаDOMПоВыражениюXPath("v8:content", ДокументDOM, ЭлементDOMv8item);
	
	Возврат Заголовок;
	
КонецФункции

// Удаляет подсказки у реквизитов, измерений, ресурсов и т.п., у которых они совпадают с синонимом или образованы из имени.
//
Функция ОчиститьПодсказкиРеквизитов(ДокументDOM, ТаблицаТиповОбъектовРеквизит)
	
	РеквизитИзменен = Ложь;
	
	Для Каждого СтрокаТипаОбъектаРеквизит Из ТаблицаТиповОбъектовРеквизит Цикл
		
		ТипОбъекта = СтрокаТипаОбъектаРеквизит.ТипОбъекта;
		ВыражениеПоискаПоРеквизиту = СтрокаТипаОбъектаРеквизит.ВыражениеПоиска;
		Префикс = СтрокаТипаОбъектаРеквизит.Префикс;
		ТипПолучения = СтрокаТипаОбъектаРеквизит.ТипПолучения;
		
		РезультатXPath = ВычислитьВыражениеXPath(ВыражениеПоискаПоРеквизиту, ДокументDOM);
		Пока Истина Цикл
			
			ЭлементDOMРеквизита = РезультатXPath.ПолучитьСледующий();
			Если ЭлементDOMРеквизита = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ПодсказкаРеквизита = ПолучитьПодсказкуЭлемента(ДокументDOM, ЭлементDOMРеквизита, Префикс);
			Если ПустаяСтрока(ПодсказкаРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			СинонимРеквизита = ПолучитьСинонимЭлемента(ДокументDOM, ЭлементDOMРеквизита, Префикс);
			
			ПодсказкаРеквизита = ПреобразоватьТекстДляСравнения(ПодсказкаРеквизита, "");
			СинонимРеквизита   = ПреобразоватьТекстДляСравнения(СинонимРеквизита, "");
			
			Если ПодсказкаРеквизита = СинонимРеквизита Тогда
				ОчиститьПодсказкуЭлемента(ДокументDOM, ЭлементDOMРеквизита, Префикс);
				РеквизитИзменен = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РеквизитИзменен;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ЗначениеФлагов = Неопределено;
КоличествоСимволовДляПереносаКомментария = 120;
ТаблицаТиповОбъектов = Неопределено;
ТаблицаКлючевыхСлов = Неопределено;
ТаблицаКлючевыхСловЗапроса = Неопределено;
МассивКлючевыхСловЗапроса = Неопределено;
МассивИсключенийСловЗапроса = Неопределено;
МассивСлужебныхТегов = Неопределено;
ОбъектРегулярныхВыражений = Неопределено;
ТекстСимволыНачалаПреамбулы = "///////////////";

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли