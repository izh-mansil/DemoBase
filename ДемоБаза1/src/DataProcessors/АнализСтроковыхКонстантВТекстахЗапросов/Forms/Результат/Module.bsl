///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии ...
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("Объект") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры.Объект,, "Результат, ЗахваченныеОбъекты, ПравилаПоддержкиОбъектов, ОбновитьКонфигурациюБД");
	Объект.Результат.Загрузить(Параметры.Объект.Результат.Выгрузить());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РезультатВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "РезультатИзмененнаяСтрока" Тогда
		
		ВыполнитьРучноеРедактированиеСтроки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "РезультатФлаг" Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ВыполнитьРучноеРедактированиеСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьВыбранныеФайлы(Команда)
	
	ВыполнитьЗагрузкуИзмененийВФайлы();
	
	Состояние(НСтр("ru = 'Выполняется загрузка файлов XML в конфигурацию'"));
	
	Статус = ЗагрузитьКонфигурациюИзФайловXML();
	Если ПустаяСтрока(Статус) Тогда 
		апк_Сообщить(НСтр("ru = 'Измененные файлы XML успешно загружены в конфигурацию.'"));
	Иначе 
		СтрокаСообщения = НСтр("ru = 'Загрузка файлов XML завершилась с ошибками:'") + Символы.ПС + Статус;
		апк_Сообщить(СтрокаСообщения);
	КонецЕсли;
	
	Если Объект.ОбновитьКонфигурациюБД Тогда
		
		Статус = ОбновитьКонфигурациюБД();
		Если ПустаяСтрока(Статус) Тогда 
			апк_Сообщить(НСтр("ru = 'Обновление конфигурации успешно завершено.'"));
		Иначе
			СтрокаСообщения = НСтр("ru = 'Обновление конфигурации базы данных завершилось с ошибками:'") + Символы.ПС + Статус;
			апк_Сообщить(СтрокаСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьИзмененныеОбъектыВХранилищеИОтменитьЗахват();
	
	Объект.Результат.Очистить();
	
	ОчиститьКаталогиВыгрузки("");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Для Каждого СтрокаОбъекта Из Объект.Результат Цикл
		СтрокаОбъекта.Флаг = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого СтрокаОбъекта Из Объект.Результат Цикл
		СтрокаОбъекта.Флаг = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтозамену(Команда)
	
	ВыполнитьАвтозаменуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыФункций

&НаСервере
Функция ЗагрузитьКонфигурациюИзФайловXML()
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	Статус = ДоступОбъект.ЗагрузитьКонфигурациюИзФайловXML();
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
	Возврат Статус;
	
КонецФункции

&НаСервере
Функция ОбновитьКонфигурациюБД()
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	Статус = ДоступОбъект.ОбновитьКонфигурациюБД();
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
	Возврат Статус;
	
КонецФункции

&НаСервере
Процедура ОчиститьКаталогиВыгрузки(Маска = "*")
	
	Попытка
		УдалитьФайлы(Объект.КаталогВыгрузки, Маска);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура апк_Сообщить(Знач ТекстСообщения, Статус = Неопределено)
	
	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Обычное;
	КонецЕсли;
	
	ТекстСообщения = "[" + ТекущаяДата() + "]: " + ТекстСообщения;
	Сообщить(ТекстСообщения, Статус);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьИзмененныеОбъектыВХранилищеИОтменитьЗахват()
	
	// Если не надо помещать объекты в хранилище, то выходим.
	Если (НЕ Объект.ПомещатьИзмененныеОбъектыВХранилище) ИЛИ ПустаяСтрока(Объект.КаталогХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	СообщитьПользователюОбИзмененныхОбъектахНезахваченныхВХранилище();
	
	Состояние(НСтр("ru='Выполняется загрузка измененных объектов в хранилище'"));
	Статус = ПоместитьИзмененныеОбъектыВХранилище();
	Если ПустаяСтрока(Статус) Тогда 
		апк_Сообщить(НСтр("ru='Все захваченные измененные объекты успешно помещены в хранилище.'"));
	Иначе 
		СтрокаСообщения = НСтр("ru='Помещение захваченных объектов в хранилище завершилось с ошибками:'") + Символы.ПС + Статус;
		апк_Сообщить(СтрокаСообщения);
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Выполняется отмена захвата объектов в хранилище'"));
	Статус = ОтменитьЗахватОбъектовВХранилище();
	Если ПустаяСтрока(Статус) Тогда 
		апк_Сообщить(НСтр("ru='Захват объектов в хранилище успешно отменен.'"));
	Иначе 
		СтрокаСообщения = НСтр("ru='Отмена захвата объектов завершилась с ошибками:'") + Символы.ПС + Статус;
		апк_Сообщить(СтрокаСообщения);
	КонецЕсли;
	
	Состояние();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИзмененныеОбъектыНезахваченныеВХранилище()
	
	// Получаем измененные объекты, которые не удалось захватить в хранилище.
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаИзмененныхОбъектов = ДоступОбъект.ПолучитьТаблицуИзмененныхОбъектовНаСервере(Ложь);
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
	Если ТаблицаИзмененныхОбъектов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТаблицаИзмененныхОбъектов.Свернуть("Объект");
	
	Возврат ТаблицаИзмененныхОбъектов.ВыгрузитьКолонку("Объект");
	
КонецФункции

&НаКлиенте
Процедура СообщитьПользователюОбИзмененныхОбъектахНезахваченныхВХранилище()
	
	// Если не надо помещать объекты в хранилище, то выходим.
	Если (НЕ Объект.ПомещатьИзмененныеОбъектыВХранилище) ИЛИ ПустаяСтрока(Объект.КаталогХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзмененныхОбъектов = ПолучитьИзмененныеОбъектыНезахваченныеВХранилище();
	Если МассивИзмененныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru='Обнаружены измененные объекты, которые не удалось захватить в хранилище под указанным пользователем.
		|Изменения для этих объектов не будут загружены в хранилище.'");
	Для Каждого ИзмененныйОбъект Из МассивИзмененныхОбъектов Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + ИзмененныйОбъект;
	КонецЦикла;
	
	апк_Сообщить(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьИзмененныеОбъектыВХранилище()
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	Статус = ДоступОбъект.ПоместитьИзмененныеОбъектыВХранилище();
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
	Возврат Статус;
	
КонецФункции

&НаСервере
Функция ОтменитьЗахватОбъектовВХранилище()
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	Статус = ДоступОбъект.ОтменитьЗахватОбъектовВХранилище();
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
	Возврат Статус;
	
КонецФункции

&НаСервере
Функция ВыполнитьЗаменуСтрокиВФайлеНаСервере(ПолноеИмяФайла, ПараметрыСтроки)
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	ИзмененнаяСтрока = ДоступОбъект.ВыполнитьЗаменуСтрокиВФайле(ПолноеИмяФайла, ПараметрыСтроки);
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
КонецФункции

&НаСервере
Функция ВыполнитьАвтозаменуНаСервере()
	
	ДоступОбъект = РеквизитФормыВЗначение("Объект");
	ДоступОбъект.ВыполнитьАвтозаменуКлючевыхСлов();
	ЗначениеВРеквизитФормы(ДоступОбъект, "Объект");
	
КонецФункции

&НаКлиенте
Процедура РедактированиеТекущейСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (Результат = Неопределено) ИЛИ (ТипЗнч(Результат) = Тип("КодВозвратаДиалога")) Тогда
		Возврат;
	КонецЕсли;
	
	// Находим все строки, где встречается текущая строковая константа.
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	ПараметрыПоиска = Новый Структура("ПолноеИмяФайла, ИзмененнаяСтрокаНомер",
		ТекущиеДанные.ПолноеИмяФайла, ТекущиеДанные.ИзмененнаяСтрокаНомер);
	
	МассивСтрок = Объект.Результат.НайтиСтроки(ПараметрыПоиска);
	Для Каждого Строка Из МассивСтрок Цикл
		Строка.ИзмененнаяСтрока = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуИзмененийВФайлы()
	
	Состояние(НСтр("ru='Начало загрузки изменений в файлы.'"));
	
	СтруктураОтбора = Новый Структура("Флаг", Истина);
	МассивСтрокДляИзменения = Объект.Результат.НайтиСтроки(СтруктураОтбора);
	Для Каждого ТекущаяСтрока Из МассивСтрокДляИзменения Цикл
		ПараметрыСтроки = Новый Структура("НомерСтроки, СтрокаДляЗамены",
			ТекущаяСтрока.ИзмененнаяСтрокаНомер, ТекущаяСтрока.ИзмененнаяСтрока);
		ВыполнитьЗаменуСтрокиВФайлеНаСервере(ТекущаяСтрока.ПолноеИмяФайла, ПараметрыСтроки);
	КонецЦикла;
	
	Состояние(НСтр("ru='Загрузка изменений в файлы завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРучноеРедактированиеСтроки()
	
	ТекущиеДанные = Элементы.Результат.ТекущиеДанные;
	ПараметрыОткрытия = Новый Структура("Строка, ЗаголовокФормы", ТекущиеДанные.ИзмененнаяСтрока, ТекущиеДанные.Объект);
	ОткрытьФорму("ВнешняяОбработка.АнализСтроковыхКонстантВТекстахЗапросов.Форма.РедактироватьСтроку",
					ПараметрыОткрытия,
					ЭтаФорма,,,,
					Новый ОписаниеОповещения("РедактированиеТекущейСтрокиЗавершение", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти