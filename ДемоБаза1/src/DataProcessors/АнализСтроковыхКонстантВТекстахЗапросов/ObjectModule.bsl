///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2021, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются
// в соответствии ...
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем СоответствияНазванийВидовОбъектов;
Перем ТаблицаКлючевыхСловЗапроса;
Перем МассивКлючевыхСловЗапроса;
Перем МассивИсключенийСловЗапроса;

#КонецОбласти

#Область КомандыЗапускаКонфигуратораВПакетномРежиме

// Функция запускает проверяемую конфигурацию в режиме конфигуратора,
// подключается к хранилищу, обновляется из него и обновляет информационную базу.
//
Функция ЗагрузитьКонфигурациюИзХранилища() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /ConfigurationRepositoryF " + ЗаключитьСтрокуВКавычки(КаталогХранилища)
		+ " /ConfigurationRepositoryN " + ЗаключитьСтрокуВКавычки(ПользовательХранилища)
		+ " /ConfigurationRepositoryP " + ЗаключитьСтрокуВКавычки(ПарольХранилища)
		+ " /ConfigurationRepositoryUpdateCfg -revised -force"
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога)
		+ " /DisableStartupDialogs /DisableStartupMessages";
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	ФайлЛога = Новый ТекстовыйДокумент;
	ФайлЛога.Прочитать(ИмяФайлаЛога);
	ТекстЛога = ФайлЛога.ПолучитьТекст();
	
	апк_ФайлУдалить(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора и подключается к хранилищу.
//
Функция ПодключитьКонфигурациюКХранилищу() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /ConfigurationRepositoryF " + ЗаключитьСтрокуВКавычки(КаталогХранилища)
		+ " /ConfigurationRepositoryN " + ЗаключитьСтрокуВКавычки(ПользовательХранилища)
		+ " /ConfigurationRepositoryP " + ЗаключитьСтрокуВКавычки(ПарольХранилища)
		+ " /ConfigurationRepositoryBindCfg -forceBindAlreadyBindedUser -forceReplaceCfg"
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога)
		+ " /DisableStartupDialogs /DisableStartupMessages";
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, Истина, КодВозврата);
	
	// Подключение прошло успешно, возвращаем пустую строку.
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	// Подключение прошло с ошибкой, возвращаем текст ошибки.
	ТекстЛога = апк_ФайлПолучитьТекст(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора и захватывает все объекты в хранилище.
//
Функция ЗахватитьОбъектыКонфигурацииВХранилище() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /ConfigurationRepositoryF " + ЗаключитьСтрокуВКавычки(КаталогХранилища)
		+ " /ConfigurationRepositoryN " + ЗаключитьСтрокуВКавычки(ПользовательХранилища)
		+ " /ConfigurationRepositoryP " + ЗаключитьСтрокуВКавычки(ПарольХранилища)
		+ " /ConfigurationRepositoryLock -revised"
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога)
		+ " /DisableStartupDialogs /DisableStartupMessages";
	
	// Код возврата в данном случае не анализируем, т.к. он будет отличен от 0,
	// даже если хотя бы один объект захватить не удалось.
	ЗапуститьПриложение(КоманднаяСтрока,, Истина);
	
	// Заполняем таблицу захваченных объектов.
	Статус = ЗаполнитьТаблицуЗахваченныхОбъектов(ИмяФайлаЛога);
	
	Возврат Статус;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора, чтобы выгрузить файлы XML.
// Возвращает пустую строку, если выгрузка удачна, иначе лог выгрузки.
//
Функция ВыгрузитьКонфигурациюВФайлыXML() Экспорт
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	СоздатьКаталог(КаталогВыгрузки);
	
	// Выгружаем конфигурацию в файлы xml.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"" /DumpConfigToFiles ""%5"" /Out ""%6"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогВыгрузки,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	Статус = ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога);
	Возврат Статус;
	
КонецФункции

// Выполняет частичную загрузку файлов XML.
//
Функция ЗагрузитьКонфигурациюИзФайловXMLПоСпискуФайлов(КаталогЗагрузки, СписокФайловДляЗагрузкиXML)
	
	ФайлЛога = ПолучитьИмяВременногоФайла("txt");
	
	// Загружаем конфигурацию из файлов xml.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"" /LoadConfigFromFiles ""%5"" -listFile ""%6"" /Out ""%7"""
		" /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогЗагрузки,
		СписокФайловДляЗагрузкиXML,
		ФайлЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		апк_ФайлУдалить(ФайлЛога);
		Возврат "";
	КонецЕсли;
	
	Статус = ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога);
	
	Возврат Статус;
	
КонецФункции

// Функция запускает проверяемую конфигурацию в режиме конфигуратора, чтобы загрузить файлы XML.
//
Функция ЗагрузитьКонфигурациюИзФайловXML() Экспорт
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	Статус = ЗагрузитьКореньКонфигурацииИзФайловXML();
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Статус = ЗагрузитьОбъектыКонфигурацииИзФайловXML();
	Если НЕ ПустаяСтрока(Статус) Тогда
		Возврат Статус;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЗагрузитьКореньКонфигурацииИзФайловXML()
	
	// Подготовим отдельно файл конфигурации для загрузки.
	КаталогЗагрузки = "";
	СписокФайловДляЗагрузкиXML = ПодготовитьФайлКонфигурацииДляЗагрузкиФайловXML(КаталогЗагрузки);
	Если ПустаяСтрока(СписокФайловДляЗагрузкиXML) Тогда
		Возврат "";
	КонецЕсли;
	
	Статус = ЗагрузитьКонфигурациюИзФайловXMLПоСпискуФайлов(КаталогЗагрузки, СписокФайловДляЗагрузкиXML);
	
	апк_ФайлУдалить(КаталогЗагрузки);
	апк_ФайлУдалить(СписокФайловДляЗагрузкиXML);
	
	Возврат Статус;
	
КонецФункции

Функция ЗагрузитьОбъектыКонфигурацииИзФайловXML()
	
	// Подготовим файл измененных объектов XML, которые нужно загрузить в конфигурацию.
	СписокФайловДляЗагрузкиXML = ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиФайловXML();
	Если ПустаяСтрока(СписокФайловДляЗагрузкиXML) Тогда
		// Если измененных файлов нет, то вернется пустая строка. Загружать нечего, выходим.
		Возврат "";
	КонецЕсли;
	
	Статус = ЗагрузитьКонфигурациюИзФайловXMLПоСпискуФайлов(КаталогВыгрузки, СписокФайловДляЗагрузкиXML);
	
	апк_ФайлУдалить(СписокФайловДляЗагрузкиXML);
	
	Возврат Статус;
	
КонецФункции

Функция ОбновитьКонфигурациюБД() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	КлючСервер = "";
	Если ТипИсточника = 1 Тогда
		КлючСервер = " -Server";
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	КоманднаяСтрока = ЗаключитьСтрокуВКавычки(СтрокаЗапускаПлатформы)
		+ " DESIGNER " + ПолучитьСтрокуПодключенияКБазе(ПутьКБазе) 
		+ " /N" + ЗаключитьСтрокуВКавычки(Пользователь)
		+ " /P" + ЗаключитьСтрокуВКавычки(Пароль)
		+ " /UpdateDBCfg " + КлючСервер
		+ " /Out " + ЗаключитьСтрокуВКавычки(ИмяФайлаЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(КоманднаяСтрока,, Истина, КодВозврата);
	
	Если КодВозврата = 0 Тогда 
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	ТекстЛога = ПолучитьЛогВыгрузкиФайловКонфигурации(ИмяФайлаЛога);
	
	Возврат ?(СтрНайти(ТекстЛога, НСтр("ru = 'Обновление конфигурации успешно завершено'")) > 0, "", ТекстЛога);
	
КонецФункции

Функция ПоместитьИзмененныеОбъектыВХранилище() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	Статус = ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиВХранилище();
	Если НЕ ПустаяСтрока(Статус) Тогда
		// При создании файла произошла ошибка, возвращаем текст ошибки.
		Возврат Статус;
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СписокИзмененныхОбъектов) Тогда
		// Файла не существует, значит, нет измененных объектов для помещения в хранилище, выходим.
		Возврат "";
	КонецЕсли;
	
	// Поместим только захваченные измененные объекты в хранилище.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"""
		+ " /ConfigurationRepositoryF ""%5"""
		+ " /ConfigurationRepositoryN ""%6"""
		+ " /ConfigurationRepositoryP ""%7"""
		+ " /ConfigurationRepositoryCommit -objects ""%8"" -comment ""%9"""
		+ " /Out ""%10"""
		+ " /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогХранилища,
		ПользовательХранилища,
		ПарольХранилища,
		СписокИзмененныхОбъектов,
		ТекстКомментария,
		ИмяФайлаЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	// Помещение объектов прошло успешно, возвращаем пустую строку.
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	// Помещение объектов прошло с ошибкой, возвращаем текст ошибки.
	ТекстЛога = апк_ФайлПолучитьТекст(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

Функция ОтменитьЗахватОбъектовВХранилище() Экспорт
	
	ИмяФайлаЛога = ПолучитьИмяВременногоФайла("txt");
	
	Если ПустаяСтрока(СтрокаЗапускаПлатформы) Тогда 
		СтрокаЗапускаПлатформы = КаталогПрограммы() + "1cv8.exe";
	КонецЕсли;
	
	Если НЕ апк_ФайлСуществует(СтрокаЗапускаПлатформы) Тогда 
		Статус = НСтр("ru = 'Не найден файл запуска платформы в каталоге программы по пути:'") + Символы.ПС + СтрокаЗапускаПлатформы;
		Возврат Статус;
	КонецЕсли;
	
	// Отменим захваченные объекты в хранилище.
	СтрокаЗапуска = """%1"" DESIGNER %2 /N""%3"" /P""%4"""
		+ " /ConfigurationRepositoryF ""%5"""
		+ " /ConfigurationRepositoryN ""%6"""
		+ " /ConfigurationRepositoryP ""%7"""
		+ " /ConfigurationRepositoryUnlock -force"
		+ " /Out ""%8"""
		+ " /DisableStartupDialogs /DisableStartupMessages";
	СтрокаЗапуска = СтрШаблон(СтрокаЗапуска,
		СтрокаЗапускаПлатформы,
		ПолучитьСтрокуПодключенияКБазе(ПутьКБазе),
		Пользователь,
		Пароль,
		КаталогХранилища,
		ПользовательХранилища,
		ПарольХранилища,
		ИмяФайлаЛога);
	
	КодВозврата = Неопределено;
	ЗапуститьПриложение(СтрокаЗапуска,, Истина, КодВозврата);
	
	// Отмена захвата объектов прошла успешно, возвращаем пустую строку.
	Если КодВозврата = 0 Тогда
		апк_ФайлУдалить(ИмяФайлаЛога);
		Возврат "";
	КонецЕсли;
	
	// Отмена захвата объектов завершилась с ошибкой, возвращаем текст ошибки.
	ТекстЛога = апк_ФайлПолучитьТекст(ИмяФайлаЛога);
	
	Возврат ТекстЛога;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьИмяФайлаБезРасширения(ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	
	Возврат Файл.ИмяБезРасширения;
	
КонецФункции

Функция ПолучитьТаблицуИзмененныхОбъектовНаСервере(ЗахваченВХранилище = Неопределено,
	РедактированиеРазрешено = Неопределено) Экспорт
	
	// Получаем только выбранные измененные файлы.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Флаг", Истина);
	
	Если ЗахваченВХранилище <> Неопределено Тогда
		СтруктураОтбора.Вставить("ЗахваченВХранилище", ЗахваченВХранилище);
	КонецЕсли;
	
	Если РедактированиеРазрешено <> Неопределено Тогда
		СтруктураОтбора.Вставить("РедактированиеРазрешено", РедактированиеРазрешено);
	КонецЕсли;
	
	Возврат Результат.Выгрузить(СтруктураОтбора);
	
КонецФункции

Процедура ЗаменитьПутиФайловФормВТаблицеИзмененныхФайлов(ТаблицаФайлов)
	
	// Для форм заменяем путь к измененному файлу путем к файлу XML формы как к объекту метаданных,
	// т.к. при указании, например, файла с модулем формы будет ошибка платформы при загрузке.
	// Модуль формы будет загружен автоматически при указании файла XML формы.
	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл
		
		КлассОбъекта = ПолучитьКлассОбъекта(СтрокаФайла.Объект);
		Если (СтрСравнить(КлассОбъекта, "Форма") <> 0)
		   И (СтрСравнить(КлассОбъекта, "ОбщаяФорма") <> 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьОбъектаАнгл = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(СтрокаФайла.ПолноеИмяФайла,, "ИмяАнглМнФормы");
		ПутьОбъектаАнгл = СтрЗаменить(ПутьОбъектаАнгл, ".", "\");
		
		ПолноеИмяФайлаФормы = КаталогВыгрузки + ПутьОбъектаАнгл + ".xml";
		Если апк_ФайлСуществует(ПолноеИмяФайлаФормы) Тогда
			СтрокаФайла.ПолноеИмяФайла = ПолноеИмяФайлаФормы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьФайлыКорняКонфигурацииИзТаблицыИзмененныхФайлов(ТаблицаФайлов)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Объект", "Конфигурация");
	
	МассивФайловКонфигурации = ТаблицаФайлов.НайтиСтроки(СтруктураОтбора);
	Если МассивФайловКонфигурации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим все файлы корня конфигурации из таблицы, т.к. они были загружены ранее.
	Для Каждого СтрокаФайла Из МассивФайловКонфигурации Цикл
		ТаблицаФайлов.Удалить(СтрокаФайла);
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиФайловXML()
	
	ТаблицаФайлов = ПолучитьТаблицуИзмененныхОбъектовНаСервере(Истина, Истина);
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаменитьПутиФайловФормВТаблицеИзмененныхФайлов(ТаблицаФайлов);
	УдалитьФайлыКорняКонфигурацииИзТаблицыИзмененныхФайлов(ТаблицаФайлов);
	
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаФайлов.Свернуть("ПолноеИмяФайла");
	
	СписокФайловДляЗагрузкиXML = ПолучитьИмяВременногоФайла("txt");
	ДокументТекст = Новый ТекстовыйДокумент;
	
	Для Каждого СтрокаФайла Из ТаблицаФайлов Цикл
		ДокументТекст.ДобавитьСтроку(СтрокаФайла.ПолноеИмяФайла);
	КонецЦикла;
	
	ДокументТекст.Записать(СписокФайловДляЗагрузкиXML);
	
	Возврат СписокФайловДляЗагрузкиXML;
	
КонецФункции

Функция ПодготовитьФайлКонфигурацииДляЗагрузкиФайловXML(КаталогЗагрузки = "")
	
	ТаблицаФайлов = ПолучитьТаблицуИзмененныхОбъектовНаСервере(Истина, Истина);
	Если ТаблицаФайлов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Если изменен один из файлов корня конфигурации, то будем загружать их все вместе, но отдельно от файлов всех
	// остальных объектов.
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Объект", "Конфигурация");
	
	МассивФайловКонфигурации = ТаблицаФайлов.НайтиСтроки(СтруктураОтбора);
	Если МассивФайловКонфигурации.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// Скопируем все файлы корня конфигурации в отдельный каталог.
	КаталогЗагрузки = ПолучитьИмяВременногоФайла("");
	КаталогДобавитьСлэш(КаталогЗагрузки);
	СоздатьКаталог(КаталогЗагрузки);
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузки, "*");
	Для Каждого Файл Из МассивФайлов Цикл
		// Каталоги пропускаем, копируем только файлы в каталоге выгрузки.
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяФайлаИсточника = Файл.ПолноеИмя;
		ИмяФайлаПриемника = СтрЗаменить(ИмяФайлаИсточника, КаталогВыгрузки, КаталогЗагрузки);
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
	КонецЦикла;
	
	// Скопируем также каталог "Ext", содержащий файлы корня конфигурации, из каталога выгрузки файлов XML.
	КаталогВыгрузкиExt = КаталогВыгрузки + "Ext\";
	Если апк_ФайлСуществует(КаталогВыгрузкиExt) Тогда
		КаталогЗагрузкиExt = КаталогЗагрузки + "Ext\";
		СоздатьКаталог(КаталогЗагрузкиExt);
		апк_КаталогКопировать(КаталогВыгрузкиExt, КаталогЗагрузкиExt);
	КонецЕсли;
	
	СписокФайловДляЗагрузкиXML = ПолучитьИмяВременногоФайла("txt");
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.ДобавитьСтроку(КаталогЗагрузки + "Configuration.xml");
	
	ДокументТекст.Записать(СписокФайловДляЗагрузкиXML);
	
	Возврат СписокФайловДляЗагрузкиXML;
	
КонецФункции

Функция ПодготовитьФайлИзмененныхОбъектовДляЗагрузкиВХранилище()
	
	ТекстОшибки = "";
	Если ПустаяСтрока(СписокИзмененныхОбъектов) Тогда
		СписокИзмененныхОбъектов = ПолучитьИмяВременногоФайла("xml");
	КонецЕсли;
	
	апк_ФайлУдалить(СписокИзмененныхОбъектов);
	
	ТаблицаИзмененныхОбъектов = ПолучитьТаблицуИзмененныхОбъектовНаСервере(Истина, Истина);
	Если ТаблицаИзмененныхОбъектов.Количество() = 0 Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТаблицаИзмененныхОбъектов.Свернуть("Объект");
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.ОткрытьФайл(СписокИзмененныхОбъектов);
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписьXML.ЗаписатьНачалоЭлемента(НСтр("ru='Objects'"));
		ЗаписьXML.ЗаписатьАтрибут("xmlns", "http://v8.1c.ru/8.3/config/objects");
		ЗаписьXML.ЗаписатьАтрибут("version", "1.0");
		
		Для Каждого СтрокаТаблицы Из ТаблицаИзмененныхОбъектов Цикл
			ЗаписьXML.ЗаписатьНачалоЭлемента("Object");
			
			ЗаписьXML.ЗаписатьАтрибут("fullName", СтрокаТаблицы.Объект);
			ЗаписьXML.ЗаписатьАтрибут("includeChildObjects", "false");
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		ЗаписьXML.Закрыть();
		
	Исключение
		
		Событие = НСтр("ru='Обработка автоформатирования и локализации.Список измененных объектов'", Метаданные.ОсновнойЯзык.КодЯзыка);
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		
		ТекстОшибки = СтрШаблон(НСтр("ru='Не удалось записать файл XML со списком измененных объектов ""%1"" по причине:
			|%2'"), СписокИзмененныхОбъектов, ОписаниеОшибки);
		
		ЗаписьЖурналаРегистрации(Событие,,,, ТекстОшибки);
		
	КонецПопытки;
	
	Возврат ТекстОшибки;
	
КонецФункции

Функция СоответствияНазванийВидовОбъектовИнициализировать()
	
	Если ТипЗнч(СоответствияНазванийВидовОбъектов) = Тип("ТаблицаЗначений") Тогда
		Возврат СоответствияНазванийВидовОбъектов;
	КонецЕсли;
	
	СоответствияНазванийВидовОбъектов = Новый ТаблицаЗначений;
	СоответствияНазванийВидовОбъектов.Колонки.Добавить("Группа");
	СоответствияНазванийВидовОбъектов.Колонки.Добавить("ИмяАнгл");
	СоответствияНазванийВидовОбъектов.Колонки.Добавить("ИмяАнглМнФормы");
	СоответствияНазванийВидовОбъектов.Колонки.Добавить("Имя");
	СоответствияНазванийВидовОбъектов.Колонки.Добавить("ИмяМнФормы");
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Constant";
	СтрокаСоответствия.ИмяАнглМнФормы = "Constants";
	СтрокаСоответствия.Имя = "Константа";
	СтрокаСоответствия.ИмяМнФормы = "Константы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Catalog";
	СтрокаСоответствия.ИмяАнглМнФормы = "Catalogs";
	СтрокаСоответствия.Имя = "Справочник";
	СтрокаСоответствия.ИмяМнФормы = "Справочники";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Document";
	СтрокаСоответствия.ИмяАнглМнФормы = "Documents";
	СтрокаСоответствия.Имя = "Документ";
	СтрокаСоответствия.ИмяМнФормы = "Документы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "DocumentJournal";
	СтрокаСоответствия.ИмяАнглМнФормы = "DocumentJournals";
	СтрокаСоответствия.Имя = "ЖурналДокументов";
	СтрокаСоответствия.ИмяМнФормы = "ЖурналыДокументов";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Enum";
	СтрокаСоответствия.ИмяАнглМнФормы = "Enums";
	СтрокаСоответствия.Имя = "Перечисление";
	СтрокаСоответствия.ИмяМнФормы = "Перечисления";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Report";
	СтрокаСоответствия.ИмяАнглМнФормы = "Reports";
	СтрокаСоответствия.Имя = "Отчет";
	СтрокаСоответствия.ИмяМнФормы = "Отчеты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "DataProcessor";
	СтрокаСоответствия.ИмяАнглМнФормы = "DataProcessors";
	СтрокаСоответствия.Имя = "Обработка";
	СтрокаСоответствия.ИмяМнФормы = "Обработки";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ChartOfCharacteristicTypes";
	СтрокаСоответствия.ИмяАнглМнФормы = "ChartsOfCharacteristicTypes";
	СтрокаСоответствия.Имя = "ПланВидовХарактеристик";
	СтрокаСоответствия.ИмяМнФормы = "ПланыВидовХарактеристик";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ChartOfAccounts";
	СтрокаСоответствия.ИмяАнглМнФормы = "ChartsOfAccounts";
	СтрокаСоответствия.Имя = "ПланСчетов";
	СтрокаСоответствия.ИмяМнФормы = "ПланыСчетов";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ChartOfCalculationTypes";
	СтрокаСоответствия.ИмяАнглМнФормы = "ChartsOfCalculationTypes";
	СтрокаСоответствия.Имя = "ПланВидовРасчета";
	СтрокаСоответствия.ИмяМнФормы = "ПланыВидовРасчета";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "InformationRegister";
	СтрокаСоответствия.ИмяАнглМнФормы = "InformationRegisters";
	СтрокаСоответствия.Имя = "РегистрСведений";
	СтрокаСоответствия.ИмяМнФормы = "РегистрыСведений";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "AccumulationRegister";
	СтрокаСоответствия.ИмяАнглМнФормы = "AccumulationRegisters";
	СтрокаСоответствия.Имя = "РегистрНакопления";
	СтрокаСоответствия.ИмяМнФормы = "РегистрыНакопления";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "AccountingRegister";
	СтрокаСоответствия.ИмяАнглМнФормы = "AccountingRegisters";
	СтрокаСоответствия.Имя = "РегистрБухгалтерии";
	СтрокаСоответствия.ИмяМнФормы = "РегистрыБухгалтерии";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "CalculationRegister";
	СтрокаСоответствия.ИмяАнглМнФормы = "CalculationRegisters";
	СтрокаСоответствия.Имя = "РегистрРасчета";
	СтрокаСоответствия.ИмяМнФормы = "РегистрыРасчета";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "BusinessProcess";
	СтрокаСоответствия.ИмяАнглМнФормы = "BusinessProcesses";
	СтрокаСоответствия.Имя = "БизнесПроцесс";
	СтрокаСоответствия.ИмяМнФормы = "БизнесПроцессы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Task";
	СтрокаСоответствия.ИмяАнглМнФормы = "Tasks";
	СтрокаСоответствия.Имя = "Задача";
	СтрокаСоответствия.ИмяМнФормы = "Задачи";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Form";
	СтрокаСоответствия.ИмяАнглМнФормы = "Forms";
	СтрокаСоответствия.Имя = "Форма";
	СтрокаСоответствия.ИмяМнФормы = "Формы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Attribute";
	СтрокаСоответствия.ИмяАнглМнФормы = "Attributes";
	СтрокаСоответствия.Имя = "Реквизит";
	СтрокаСоответствия.ИмяМнФормы = "Реквизиты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "ExchangePlan";
	СтрокаСоответствия.ИмяАнглМнФормы = "ExchangePlans";
	СтрокаСоответствия.Имя = "ПланОбмена";
	СтрокаСоответствия.ИмяМнФормы = "ПланыОбмена";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Characteristic";
	СтрокаСоответствия.ИмяАнглМнФормы = "Characteristics";
	СтрокаСоответствия.Имя = "Характеристика";
	СтрокаСоответствия.ИмяМнФормы = "Характеристики";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Sequence";
	СтрокаСоответствия.ИмяАнглМнФормы = "Sequences";
	СтрокаСоответствия.Имя = "Последовательность";
	СтрокаСоответствия.ИмяМнФормы = "Последовательности";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Recalculation";
	СтрокаСоответствия.ИмяАнглМнФормы = "Recalculations";
	СтрокаСоответствия.Имя = "Перерасчет";
	СтрокаСоответствия.ИмяМнФормы = "Перерасчеты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Dimension";
	СтрокаСоответствия.ИмяАнглМнФормы = "Dimensions";
	СтрокаСоответствия.Имя = "Измерение";
	СтрокаСоответствия.ИмяМнФормы = "Измерения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Resource";
	СтрокаСоответствия.ИмяАнглМнФормы = "Resources";
	СтрокаСоответствия.Имя = "Ресурс";
	СтрокаСоответствия.ИмяМнФормы = "Ресурсы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "TabularSection";
	СтрокаСоответствия.ИмяАнглМнФормы = "TabularSections";
	СтрокаСоответствия.Имя = "ТабличнаяЧасть";
	СтрокаСоответствия.ИмяМнФормы = "ТабличныеЧасти";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Attribute";
	СтрокаСоответствия.ИмяАнглМнФормы = "Attributes";
	СтрокаСоответствия.Имя = "Реквизит";
	СтрокаСоответствия.ИмяМнФормы = "РеквизитыТабличнойЧасти";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Command";
	СтрокаСоответствия.ИмяАнглМнФормы = "Commands";
	СтрокаСоответствия.Имя = "Команда";
	СтрокаСоответствия.ИмяМнФормы = "Команды";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "Role";
	СтрокаСоответствия.ИмяАнглМнФормы = "Roles";
	СтрокаСоответствия.Имя = "Роль";
	СтрокаСоответствия.ИмяМнФормы = "Роли";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "SessionParameter";
	СтрокаСоответствия.ИмяАнглМнФормы = "SessionParameters";
	СтрокаСоответствия.Имя = "ПараметрСеанса";
	СтрокаСоответствия.ИмяМнФормы = "ПараметрыСеанса";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommonModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommonModules";
	СтрокаСоответствия.Имя = "ОбщийМодуль";
	СтрокаСоответствия.ИмяМнФормы = "ОбщиеМодули";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "FilterCriterion";
	СтрокаСоответствия.ИмяАнглМнФормы = "FilterCriteria";
	СтрокаСоответствия.Имя = "КритерийОтбора";
	СтрокаСоответствия.ИмяМнФормы = "КритерииОтбора";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "EventSubscription";
	СтрокаСоответствия.ИмяАнглМнФормы = "EventSubscriptions";
	СтрокаСоответствия.Имя = "ПодпискаНаСобытие";
	СтрокаСоответствия.ИмяМнФормы = "ПодпискиНаСобытия";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "ScheduledJob";
	СтрокаСоответствия.ИмяАнглМнФормы = "ScheduledJobs";
	СтрокаСоответствия.Имя = "РегламентноеЗадание";
	СтрокаСоответствия.ИмяМнФормы = "РегламентныеЗадания";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "SettingsStorage";
	СтрокаСоответствия.ИмяАнглМнФормы = "SettingsStorages";
	СтрокаСоответствия.Имя = "ХранилищеНастроек";
	СтрокаСоответствия.ИмяМнФормы = "ХранилищаНастроек";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommonForm";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommonForms";
	СтрокаСоответствия.Имя = "ОбщаяФорма";
	СтрокаСоответствия.ИмяМнФормы = "ОбщиеФормы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommonCommand";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommonCommands";
	СтрокаСоответствия.Имя = "ОбщаяКоманда";
	СтрокаСоответствия.ИмяМнФормы = "ОбщиеКоманды";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommandGroup";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommandGroups";
	СтрокаСоответствия.Имя = "ГруппаКоманд";
	СтрокаСоответствия.ИмяМнФормы = "ГруппыКоманд";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "Interface";
	СтрокаСоответствия.ИмяАнглМнФормы = "Interfaces";
	СтрокаСоответствия.Имя = "Интерфейс";
	СтрокаСоответствия.ИмяМнФормы = "Интерфейсы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommonTemplate";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommonTemplates";
	СтрокаСоответствия.Имя = "ОбщийМакет";
	СтрокаСоответствия.ИмяМнФормы = "ОбщиеМакеты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommonPicture";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommonPictures";
	СтрокаСоответствия.Имя = "ОбщаяКартинка";
	СтрокаСоответствия.ИмяМнФормы = "ОбщиеКартинки";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "XDTOPackage";
	СтрокаСоответствия.ИмяАнглМнФормы = "XDTOPackages";
	СтрокаСоответствия.Имя = "ПакетXDTO";
	СтрокаСоответствия.ИмяМнФормы = "ПакетыXDTO";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "WebService";
	СтрокаСоответствия.ИмяАнглМнФормы = "WebServices";
	СтрокаСоответствия.Имя = "WebСервис";
	СтрокаСоответствия.ИмяМнФормы = "WebСервисы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "Style";
	СтрокаСоответствия.ИмяАнглМнФормы = "Styles";
	СтрокаСоответствия.Имя = "Стиль";
	СтрокаСоответствия.ИмяМнФормы = "Стили";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "StyleItem";
	СтрокаСоответствия.ИмяАнглМнФормы = "StyleItems";
	СтрокаСоответствия.Имя = "ЭлементСтиля";
	СтрокаСоответствия.ИмяМнФормы = "ЭлементыСтиля";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "DocumentNumerator";
	СтрокаСоответствия.ИмяАнглМнФормы = "DocumentNumerators";
	СтрокаСоответствия.Имя = "НумераторДокументов";
	СтрокаСоответствия.ИмяМнФормы = "НумераторыДокументов";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "AddressingAttribute";
	СтрокаСоответствия.ИмяАнглМнФормы = "AddressingAttributes";
	СтрокаСоответствия.Имя = "РеквизитАдресации";
	СтрокаСоответствия.ИмяМнФормы = "РеквизитыАдресации";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "AccountingFlag";
	СтрокаСоответствия.ИмяАнглМнФормы = "AccountingFlags";
	СтрокаСоответствия.Имя = "ПризнакУчета";
	СтрокаСоответствия.ИмяМнФормы = "ПризнакиУчета";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ExtDimensionAccountingFlag";
	СтрокаСоответствия.ИмяАнглМнФормы = "ExtDimensionAccountingFlags";
	СтрокаСоответствия.Имя = "ПризнакУчетаСубконто";
	СтрокаСоответствия.ИмяМнФормы = "ПризнакиУчетаСубконто";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "Subsystem";
	СтрокаСоответствия.ИмяАнглМнФормы = "Subsystems";
	СтрокаСоответствия.Имя = "Подсистема";
	СтрокаСоответствия.ИмяМнФормы = "Подсистемы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "WSReference";
	СтрокаСоответствия.ИмяАнглМнФормы = "WSReferences";
	СтрокаСоответствия.Имя = "WSСсылка";
	СтрокаСоответствия.ИмяМнФормы = "WSСсылки";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "FunctionalOptionsParameter";
	СтрокаСоответствия.ИмяАнглМнФормы = "FunctionalOptionsParameters";
	СтрокаСоответствия.Имя = "ПараметрФункциональныхОпций";
	СтрокаСоответствия.ИмяМнФормы = "ПараметрыФункциональныхОпций";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "FunctionalOption";
	СтрокаСоответствия.ИмяАнглМнФормы = "FunctionalOptions";
	СтрокаСоответствия.Имя = "ФункциональнаяОпция";
	СтрокаСоответствия.ИмяМнФормы = "ФункциональныеОпции";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "CommonAttribute";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommonAttributes";
	СтрокаСоответствия.Имя = "ОбщийРеквизит";
	СтрокаСоответствия.ИмяМнФормы = "ОбщиеРеквизиты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Template";
	СтрокаСоответствия.ИмяАнглМнФормы = "Templates";
	СтрокаСоответствия.Имя = "Макет";
	СтрокаСоответствия.ИмяМнФормы = "Макеты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Predefined";
	СтрокаСоответствия.ИмяАнглМнФормы = "Predefined";
	СтрокаСоответствия.Имя = "Предопределенный";
	СтрокаСоответствия.ИмяМнФормы = "Предопределенные";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Configuration";
	СтрокаСоответствия.ИмяАнглМнФормы = "Configuration";
	СтрокаСоответствия.Имя = "Конфигурация";
	СтрокаСоответствия.ИмяМнФормы = "Конфигурация";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "Language";
	СтрокаСоответствия.ИмяАнглМнФормы = "Languages";
	СтрокаСоответствия.Имя = "Язык";
	СтрокаСоответствия.ИмяМнФормы = "Языки";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "EnumValue";
	СтрокаСоответствия.ИмяАнглМнФормы = "EnumValues";
	СтрокаСоответствия.Имя = "ЗначениеПеречисления";
	СтрокаСоответствия.ИмяМнФормы = "ЗначенияПеречисления";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Column";
	СтрокаСоответствия.ИмяАнглМнФормы = "Columns";
	СтрокаСоответствия.Имя = "Графа";
	СтрокаСоответствия.ИмяМнФормы = "Графы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ExternalDataSource";
	СтрокаСоответствия.ИмяАнглМнФормы = "ExternalDataSources";
	СтрокаСоответствия.Имя = "ВнешнийИсточникДанных";
	СтрокаСоответствия.ИмяМнФормы = "ВнешниеИсточникиДанных";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Table";
	СтрокаСоответствия.ИмяАнглМнФормы = "Tables";
	СтрокаСоответствия.Имя = "Таблица";
	СтрокаСоответствия.ИмяМнФормы = "Таблицы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Field";
	СтрокаСоответствия.ИмяАнглМнФормы = "Fields";
	СтрокаСоответствия.Имя = "Поле";
	СтрокаСоответствия.ИмяМнФормы = "Поля";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Operation";
	СтрокаСоответствия.ИмяАнглМнФормы = "Operations";
	СтрокаСоответствия.Имя = "Операция";
	СтрокаСоответствия.ИмяМнФормы = "Операции";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Aggregate";
	СтрокаСоответствия.ИмяАнглМнФормы = "Aggregates";
	СтрокаСоответствия.Имя = "Агрегат";
	СтрокаСоответствия.ИмяМнФормы = "Агрегаты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "Общие";
	СтрокаСоответствия.ИмяАнгл = "DefinedType";
	СтрокаСоответствия.ИмяАнглМнФормы = "DefinedTypes";
	СтрокаСоответствия.Имя = "ОпределяемыйТип";
	СтрокаСоответствия.ИмяМнФормы = "ОпределяемыеТипы";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "StandardTabularSection";
	СтрокаСоответствия.ИмяАнглМнФормы = "StandardTabularSections";
	СтрокаСоответствия.Имя = "СтандартнаяТабличнаяЧасть";
	СтрокаСоответствия.ИмяМнФормы = "СтандартныеТабличныеЧасти";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "StandardAttribute";
	СтрокаСоответствия.ИмяАнглМнФормы = "StandardAttributes";
	СтрокаСоответствия.Имя = "СтандартныйРеквизит";
	СтрокаСоответствия.ИмяМнФормы = "СтандартныеРеквизиты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Ref";
	СтрокаСоответствия.ИмяАнглМнФормы = "Ref";
	СтрокаСоответствия.Имя = "Ссылка";
	СтрокаСоответствия.ИмяМнФормы = "Ссылка";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "DeletionMark";
	СтрокаСоответствия.ИмяАнглМнФормы = "DeletionMark";
	СтрокаСоответствия.Имя = "ПометкаУдаления";
	СтрокаСоответствия.ИмяМнФормы = "ПометкаУдаления";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Predefined";
	СтрокаСоответствия.ИмяАнглМнФормы = "Predefined";
	СтрокаСоответствия.Имя = "Предопределенный";
	СтрокаСоответствия.ИмяМнФормы = "Предопределенный";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Date";
	СтрокаСоответствия.ИмяАнглМнФормы = "Date";
	СтрокаСоответствия.Имя = "Дата";
	СтрокаСоответствия.ИмяМнФормы = "Дата";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Number";
	СтрокаСоответствия.ИмяАнглМнФормы = "Number";
	СтрокаСоответствия.Имя = "Номер";
	СтрокаСоответствия.ИмяМнФормы = "Номер";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Posted";
	СтрокаСоответствия.ИмяАнглМнФормы = "Posted";
	СтрокаСоответствия.Имя = "Проведен";
	СтрокаСоответствия.ИмяМнФормы = "Проведен";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "LineNumber";
	СтрокаСоответствия.ИмяАнглМнФормы = "LineNumber";
	СтрокаСоответствия.Имя = "НомерСтроки";
	СтрокаСоответствия.ИмяМнФормы = "НомерСтроки";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Code";
	СтрокаСоответствия.ИмяАнглМнФормы = "Code";
	СтрокаСоответствия.Имя = "Код";
	СтрокаСоответствия.ИмяМнФормы = "Код";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Description";
	СтрокаСоответствия.ИмяАнглМнФормы = "Description";
	СтрокаСоответствия.Имя = "Наименование";
	СтрокаСоответствия.ИмяМнФормы = "Наименование";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Parent";
	СтрокаСоответствия.ИмяАнглМнФормы = "Parent";
	СтрокаСоответствия.Имя = "Родитель";
	СтрокаСоответствия.ИмяМнФормы = "Родитель";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Owner";
	СтрокаСоответствия.ИмяАнглМнФормы = "Owner";
	СтрокаСоответствия.Имя = "Владелец";
	СтрокаСоответствия.ИмяМнФормы = "Владелец";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "IsFolder";
	СтрокаСоответствия.ИмяАнглМнФормы = "IsFolder";
	СтрокаСоответствия.Имя = "ЭтоГруппа";
	СтрокаСоответствия.ИмяМнФормы = "ЭтоГруппа";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Order";
	СтрокаСоответствия.ИмяАнглМнФормы = "Order";
	СтрокаСоответствия.Имя = "Порядок";
	СтрокаСоответствия.ИмяМнФормы = "Порядок";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "OffBalance";
	СтрокаСоответствия.ИмяАнглМнФормы = "OffBalance";
	СтрокаСоответствия.Имя = "Забалансовый";
	СтрокаСоответствия.ИмяМнФормы = "Забалансовый";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Executed";
	СтрокаСоответствия.ИмяАнглМнФормы = "Executed";
	СтрокаСоответствия.Имя = "Выполнена";
	СтрокаСоответствия.ИмяМнФормы = "Выполнена";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "RoutePoint";
	СтрокаСоответствия.ИмяАнглМнФормы = "RoutePoint";
	СтрокаСоответствия.Имя = "ТочкаМаршрута";
	СтрокаСоответствия.ИмяМнФормы = "ТочкаМаршрута";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "BusinessProcess";
	СтрокаСоответствия.ИмяАнглМнФормы = "BusinessProcess";
	СтрокаСоответствия.Имя = "БизнесПроцесс";
	СтрокаСоответствия.ИмяМнФормы = "БизнесПроцесс";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Recorder";
	СтрокаСоответствия.ИмяАнглМнФормы = "Recorder";
	СтрокаСоответствия.Имя = "Регистратор";
	СтрокаСоответствия.ИмяМнФормы = "Регистратор";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "CalculationType";
	СтрокаСоответствия.ИмяАнглМнФормы = "CalculationType";
	СтрокаСоответствия.Имя = "ВидРасчета";
	СтрокаСоответствия.ИмяМнФормы = "ВидРасчета";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ActionPeriod";
	СтрокаСоответствия.ИмяАнглМнФормы = "ActionPeriod";
	СтрокаСоответствия.Имя = "ПериодДействия";
	СтрокаСоответствия.ИмяМнФормы = "ПериодДействия";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "BegOfActionPeriod";
	СтрокаСоответствия.ИмяАнглМнФормы = "BegOfActionPeriod";
	СтрокаСоответствия.Имя = "ПериодДействияНачало";
	СтрокаСоответствия.ИмяМнФормы = "ПериодДействияНачало";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "EndOfActionPeriod";
	СтрокаСоответствия.ИмяАнглМнФормы = "EndOfActionPeriod";
	СтрокаСоответствия.Имя = "ПериодДействияКонец";
	СтрокаСоответствия.ИмяМнФормы = "ПериодДействияКонец";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "BegOfBasePeriod";
	СтрокаСоответствия.ИмяАнглМнФормы = "BegOfBasePeriod";
	СтрокаСоответствия.Имя = "БазовыйПериодНачало";
	СтрокаСоответствия.ИмяМнФормы = "БазовыйПериодНачало";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "EndOfBasePeriod";
	СтрокаСоответствия.ИмяАнглМнФормы = "EndOfBasePeriod";
	СтрокаСоответствия.Имя = "БазовыйПериодКонец";
	СтрокаСоответствия.ИмяМнФормы = "БазовыйПериодКонец";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Active";
	СтрокаСоответствия.ИмяАнглМнФормы = "Active";
	СтрокаСоответствия.Имя = "Активность";
	СтрокаСоответствия.ИмяМнФормы = "Активность";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ReversingEntry";
	СтрокаСоответствия.ИмяАнглМнФормы = "ReversingEntry";
	СтрокаСоответствия.Имя = "Сторно";
	СтрокаСоответствия.ИмяМнФормы = "Сторно";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "RegistrationPeriod";
	СтрокаСоответствия.ИмяАнглМнФормы = "RegistrationPeriod";
	СтрокаСоответствия.Имя = "ПериодРегистрации";
	СтрокаСоответствия.ИмяМнФормы = "ПериодРегистрации";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "SentNo";
	СтрокаСоответствия.ИмяАнглМнФормы = "SentNo";
	СтрокаСоответствия.Имя = "НомерОтправленного";
	СтрокаСоответствия.ИмяМнФормы = "НомерОтправленного";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ReceivedNo";
	СтрокаСоответствия.ИмяАнглМнФормы = "ReceivedNo";
	СтрокаСоответствия.Имя = "НомерПринятого";
	СтрокаСоответствия.ИмяМнФормы = "НомерПринятого";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Account";
	СтрокаСоответствия.ИмяАнглМнФормы = "Account";
	СтрокаСоответствия.Имя = "Счет";
	СтрокаСоответствия.ИмяМнФормы = "Счет";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "RecordType";
	СтрокаСоответствия.ИмяАнглМнФормы = "RecordType";
	СтрокаСоответствия.Имя = "ВидДвижения";
	СтрокаСоответствия.ИмяМнФормы = "ВидДвижения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Period";
	СтрокаСоответствия.ИмяАнглМнФормы = "Period";
	СтрокаСоответствия.Имя = "Период";
	СтрокаСоответствия.ИмяМнФормы = "Период";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Started";
	СтрокаСоответствия.ИмяАнглМнФормы = "Started";
	СтрокаСоответствия.Имя = "Стартован";
	СтрокаСоответствия.ИмяМнФормы = "Стартован";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "HeadTask";
	СтрокаСоответствия.ИмяАнглМнФормы = "HeadTask";
	СтрокаСоответствия.Имя = "ВедущаяЗадача";
	СтрокаСоответствия.ИмяМнФормы = "ВедущаяЗадача";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Completed";
	СтрокаСоответствия.ИмяАнглМнФормы = "Completed";
	СтрокаСоответствия.Имя = "Завершен";
	СтрокаСоответствия.ИмяМнФормы = "Завершен";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ActionPeriodIsBasic";
	СтрокаСоответствия.ИмяАнглМнФормы = "ActionPeriodIsBasic";
	СтрокаСоответствия.Имя = "ПериодДействияБазовый";
	СтрокаСоответствия.ИмяМнФормы = "ПериодДействияБазовый";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ValueType";
	СтрокаСоответствия.ИмяАнглМнФормы = "ValueType";
	СтрокаСоответствия.Имя = "ТипЗначения";
	СтрокаСоответствия.ИмяМнФормы = "ТипЗначения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Type";
	СтрокаСоответствия.ИмяАнглМнФормы = "Type";
	СтрокаСоответствия.Имя = "Тип";
	СтрокаСоответствия.ИмяМнФормы = "Тип";// - ЖурналДокументов
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Type";
	СтрокаСоответствия.ИмяАнглМнФормы = "Type";
	СтрокаСоответствия.Имя = "Вид";
	СтрокаСоответствия.ИмяМнФормы = "Вид";// - ПланСчетов
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ExtDimensionTypes";
	СтрокаСоответствия.ИмяАнглМнФормы = "ExtDimensionTypes";
	СтрокаСоответствия.Имя = "ВидыСубконто";
	СтрокаСоответствия.ИмяМнФормы = "ВидыСубконто";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "TurnoversOnly";
	СтрокаСоответствия.ИмяАнглМнФормы = "TurnoversOnly";
	СтрокаСоответствия.Имя = "ТолькоОбороты";
	СтрокаСоответствия.ИмяМнФормы = "ТолькоОбороты";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ExtDimensionType";
	СтрокаСоответствия.ИмяАнглМнФормы = "ExtDimensionType";
	СтрокаСоответствия.Имя = "ВидСубконто";
	СтрокаСоответствия.ИмяМнФормы = "ВидСубконто";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "BaseCalculationTypes";
	СтрокаСоответствия.ИмяАнглМнФормы = "BaseCalculationTypes";
	СтрокаСоответствия.Имя = "БазовыеВидыРасчета";
	СтрокаСоответствия.ИмяМнФормы = "БазовыеВидыРасчета";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "DisplacingCalculationTypes";
	СтрокаСоответствия.Имя = "ВытесняющиеВидыРасчета";
	СтрокаСоответствия.ИмяМнФормы = "ВытесняющиеВидыРасчета";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "LeadingCalculationTypes";
	СтрокаСоответствия.ИмяАнглМнФормы = "LeadingCalculationTypes";
	СтрокаСоответствия.Имя = "ВедущиеВидыРасчета";
	СтрокаСоответствия.ИмяМнФормы = "ВедущиеВидыРасчета";
	
	// Модули
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Module";
	СтрокаСоответствия.ИмяАнглМнФормы = "Module";
	СтрокаСоответствия.Имя = "Модуль";
	СтрокаСоответствия.ИмяМнФормы = "Модуль";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "CommandModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "CommandModule";
	СтрокаСоответствия.Имя = "МодульКоманды";
	СтрокаСоответствия.ИмяМнФормы = "МодульКоманды";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ObjectModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "ObjectModule";
	СтрокаСоответствия.Имя = "МодульОбъекта";
	СтрокаСоответствия.ИмяМнФормы = "МодульОбъекта";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ManagerModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "ManagerModule";
	СтрокаСоответствия.Имя = "МодульМенеджера";
	СтрокаСоответствия.ИмяМнФормы = "МодульМенеджера";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "RecordSetModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "RecordSetModule";
	СтрокаСоответствия.Имя = "МодульНабораЗаписей";
	СтрокаСоответствия.ИмяМнФормы = "МодульНабораЗаписей";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ValueManagerModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "ValueManagerModule";
	СтрокаСоответствия.Имя = "МодульМенеджераЗначения";
	СтрокаСоответствия.ИмяМнФормы = "МодульМенеджераЗначения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ApplicationModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "ApplicationModule";
	СтрокаСоответствия.Имя = "МодульПриложения";
	СтрокаСоответствия.ИмяМнФормы = "МодульПриложения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ManagedApplicationModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "ManagedApplicationModule";
	СтрокаСоответствия.Имя = "МодульУправляемогоПриложения";
	СтрокаСоответствия.ИмяМнФормы = "МодульУправляемогоПриложения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "SessionModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "SessionModule";
	СтрокаСоответствия.Имя = "МодульСеанса";
	СтрокаСоответствия.ИмяМнФормы = "МодульСеанса";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "ExternalConnectionModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "ExternalConnectionModule";
	СтрокаСоответствия.Имя = "МодульВнешнегоСоединения";
	СтрокаСоответствия.ИмяМнФормы = "МодульВнешнегоСоединения";
	
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "OrdinaryApplicationModule";
	СтрокаСоответствия.ИмяАнглМнФормы = "OrdinaryApplicationModule";
	СтрокаСоответствия.Имя = "МодульОбычногоПриложения";
	СтрокаСоответствия.ИмяМнФормы = "МодульОбычногоПриложения";
	
	// Права
	СтрокаСоответствия = СоответствияНазванийВидовОбъектов.Добавить();
	СтрокаСоответствия.Группа = "";
	СтрокаСоответствия.ИмяАнгл = "Rights";
	СтрокаСоответствия.ИмяАнглМнФормы = "Rights";
	СтрокаСоответствия.Имя = "Право";
	СтрокаСоответствия.ИмяМнФормы = "Права";
	
	СоответствияНазванийВидовОбъектов.Индексы.Добавить("ИмяАнгл");
	СоответствияНазванийВидовОбъектов.Индексы.Добавить("Имя");
	СоответствияНазванийВидовОбъектов.Индексы.Добавить("ИмяМнФормы");
	СоответствияНазванийВидовОбъектов.Индексы.Добавить("ИмяАнглМнФормы");
	
	Возврат СоответствияНазванийВидовОбъектов;
	
КонецФункции

Функция ПолучитьСоответствиеНазванияВидаОбъекта(ЗначениеПоиска, КолонкаПоиска = "ИмяАнгл", КолонкаИмени = "Имя", ЗначениеПоУмолчанию = Неопределено)
	
	СтандартныйТип = СоответствияНазванийВидовОбъектов.Найти(ЗначениеПоиска, КолонкаПоиска);
	Возврат ?(СтандартныйТип = Неопределено,
		?(ЗначениеПоУмолчанию = Неопределено, ЗначениеПоиска, ЗначениеПоУмолчанию),
		СтандартныйТип[КолонкаИмени]);
	
КонецФункции

Функция ПолучитьКлассОбъекта(ПутьОбъекта, Разделитель = ".")
	
	МассивПути = СтрРазделить(ПутьОбъекта, Разделитель, Ложь);
	КоличествоЭлементовПути = МассивПути.Количество();
	
	Если КоличествоЭлементовПути = 0 Тогда
		Возврат "";
	ИначеЕсли КоличествоЭлементовПути <= 2 Тогда
		НомерЭлемента = 0;
	Иначе
		НомерЭлемента = 2;
	КонецЕсли;
	
	Возврат МассивПути[НомерЭлемента];
	
КонецФункции

Функция ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(ФайлВыгрузкиXML, Разделитель = ".", КолонкаИмени = "Имя")
	
	СоответствияНазванийВидовОбъектовИнициализировать();
	
	// Получим имя файла без расширения.
	ИмяОбъекта = ФайлВыгрузкиXML;
	// Удаляем каталог выгрузки из пути объекта.
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, КаталогВыгрузки, "");
	// Очищаем каталог "Ext" из пути объекта
	Если СтрНачинаетсяС(ИмяОбъекта, "Ext\") Тогда
		// Для файлов конфигурации, например "Configuration.xml", каталог "Ext" лежит в корне каталога выгрузки,
		// удалим его из начала пути, взяв оставшуюся часть по длине строки "Ext\".
		ИмяОбъекта = Сред(ИмяОбъекта, СтрДлина("Ext\") + 1);
	Иначе
		// Для файлов всех остальных объектов очистим каталог "Ext" заменой на "\".
		ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "\Ext\", "\");
	КонецЕсли;
	ИмяОбъекта = СтрЗаменить(ИмяОбъекта, "\", Разделитель);
	ИмяОбъекта = ПолучитьИмяФайлаБезРасширения(ИмяОбъекта);
	
	МассивПутиАнгл = СтрРазделить(ИмяОбъекта, Разделитель, Ложь);
	КоличествоЭлементовПутиАнгл = МассивПутиАнгл.Количество();
	
	// Для файлов конфигурации, лежащих в самом каталоге выгрузки, задаем имя объекта как "Конфигурация" (или "Configuration").
	Если КоличествоЭлементовПутиАнгл < 2 Тогда
		Возврат ПолучитьСоответствиеНазванияВидаОбъекта("Конфигурация", "Имя", КолонкаИмени);
	КонецЕсли;
	
	ПутьФактический = "";
	
	// Для общих форм всегда берем 2 элемента пути, т.к. в пути к модулю будет 4 элемента пути, и объект определяется неправильно.
	Если СтрСравнить(МассивПутиАнгл[0], "CommonForms") = 0 Тогда
		КоличествоЭлементов = 2;
	Иначе
		КоличествоЭлементов = ?(КоличествоЭлементовПутиАнгл < 4, 2, 4);
	КонецЕсли;
	
	МассивПути = Новый Массив;
	Для Счетчик = 1 По КоличествоЭлементов Цикл
		
		ЭлементПути = МассивПутиАнгл[Счетчик - 1];
		// Если элемент пути стоит на нечетном месте (нумерация с 1) в имени файла,
		// то ищем его эквивалент на русском языке в единственном числе.
		Если Счетчик % 2 = 1 Тогда
			ЭлементПути = ПолучитьСоответствиеНазванияВидаОбъекта(ЭлементПути, "ИмяАнглМнФормы", КолонкаИмени);
		КонецЕсли;
		
		// Четные элементы пути оставляем как есть - это наименования объектов метаданных.
		МассивПути.Добавить(ЭлементПути);
		
	КонецЦикла;
	
	ПутьФактический = СтрСоединить(МассивПути, Разделитель);
	
	Возврат ПутьФактический;
	
КонецФункции

Функция ПолучитьТипМодуляПоИмениФайла(ФайлВыгрузкиXML)
	
	СоответствияНазванийВидовОбъектовИнициализировать();
	
	ТипМодуляАнгл = ПолучитьИмяФайлаБезРасширения(ФайлВыгрузкиXML);
	ТипМодуляРус = ПолучитьСоответствиеНазванияВидаОбъекта(ТипМодуляАнгл, "ИмяАнглМнФормы", "Имя");
	
	Возврат ПолучитьСинонимПоИмениОбъекта(ТипМодуляРус);
	
КонецФункции

// Возвращает "Истина", если ПредыдущийРелиз меньше СледующийРелиз.
//
Функция апк_РелизыПоПорядку(ПредыдущийРелиз, СледующийРелиз)
	
	Если ПустаяСтрока(ПредыдущийРелиз) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПредыдущийРелиз = СледующийРелиз Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивЧиселПредыдущегоРелиза = СтрРазделить(ПредыдущийРелиз, ".", Ложь);
	МассивЧиселСледующегоРелиза = СтрРазделить(СледующийРелиз, ".", Ложь);
	
	КоличествоЧиселПредыдущегоРелиза = МассивЧиселПредыдущегоРелиза.Количество();
	Если КоличествоЧиселПредыдущегоРелиза <> МассивЧиселСледующегоРелиза.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерЭлемента = 0 По КоличествоЧиселПредыдущегоРелиза - 1 Цикл
		ЧислоПредыдущего = Число(МассивЧиселПредыдущегоРелиза[НомерЭлемента]);
		ЧислоСледующего = Число(МассивЧиселСледующегоРелиза[НомерЭлемента]);
		Если ЧислоПредыдущего <> ЧислоСледующего Тогда
			Возврат (ЧислоСледующего > ЧислоПредыдущего);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьПлатформу836() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПриложения = СистемнаяИнформация.ВерсияПриложения;
	
	Если апк_РелизыПоПорядку("8.3.6.0", ВерсияПриложения) Тогда
		Возврат "";
	КонецЕсли;
	
	Синоним = Метаданные().Синоним;
	
	Статус = НСтр("ru='Для запуска внешней обработки ""%1"" необходима версия платформы не меньше, чем 8.3.6.
		|Текущая версия %2'");
	Статус = СтрШаблон(Статус, Синоним, ВерсияПриложения);
	
	Возврат Статус;
	
КонецФункции

Функция ЗаполнитьТаблицуЗахваченныхОбъектов(ФайлЗахваченныхОбъектов, УдалитьФайл = Истина)
	
	ЗахваченныеОбъекты.Очистить();
	
	Если НЕ апк_ФайлСуществует(ФайлЗахваченныхОбъектов) Тогда
		ТекстОшибки = НСтр("ru='Не найден файл захваченных объектов, указанный по пути:'")
			+ Символы.ПС + ФайлЗахваченныхОбъектов;
		Возврат ТекстОшибки;
	КонецЕсли;
	
	// Получаем лог захваченных объектов.
	ТекстФайлаЗахваченныхОбъектов = апк_ФайлПолучитьТекст(ФайлЗахваченныхОбъектов, УдалитьФайл);
	
	// Анализируем лог захвата объектов.
	ТекстНачалоОперации = НСтр("ru='---- Начало операции с хранилищем конфигурации ----'");
	Если СтрНайти(ТекстФайлаЗахваченныхОбъектов, ТекстНачалоОперации) = 0 Тогда
		// Если такой фразы в логе нет, значит, произошла ошибка, возвращаем текст ошибки.
		Возврат ТекстФайлаЗахваченныхОбъектов;
	КонецЕсли;
	
	ТекстОбъектЗахваченУспешно = НСтр("ru='Объект захвачен для редактирования:'");
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.УстановитьТекст(ТекстФайлаЗахваченныхОбъектов);
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		СтрокаТекста = ДокументТекст.ПолучитьСтроку(НомерСтроки);
		
		// Пытаемся получить объект из строки лога.
		ПозицияПоиска = СтрНайти(СтрокаТекста, ":");
		Если ПозицияПоиска = 0 Тогда
			// Если в строке нет двоеточия, это не строка с объектом, пропускаем.
			Продолжить;
		КонецЕсли;
		
		ПутьОбъекта = Сред(СтрокаТекста, ПозицияПоиска + 1);
		
		// Если объект захвачен другим пользователем, то в конце строки будет имя пользователя в скобках, удаляем.
		ПозицияПоиска = СтрНайти(ПутьОбъекта, "(");
		Если ПозицияПоиска > 0 Тогда
			ПутьОбъекта = Лев(ПутьОбъекта, ПозицияПоиска - 1);
		КонецЕсли;
		
		ПутьОбъекта = СокрЛП(ПутьОбъекта);
		// Если в пути к объекту остались пробелы, значит, это не объект, пропускаем.
		Если СтрНайти(ПутьОбъекта, " ") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектЗахваченУспешно = СтрНачинаетсяС(СтрокаТекста, ТекстОбъектЗахваченУспешно);
		
		// Если в пути к объекту нет точек, тогда это корень конфигурации, переименуем его.
		Если СтрНайти(ПутьОбъекта, ".") = 0 Тогда
			ПутьОбъекта = "Конфигурация";
		КонецЕсли;
		
		НовыйОбъект = ЗахваченныеОбъекты.Добавить();
		НовыйОбъект.Объект = ПутьОбъекта;
		НовыйОбъект.ЗахваченДляРедактирования = ОбъектЗахваченУспешно;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьСтатусЗахватаОбъектаВХранилище(ПутьОбъекта)
	
	// Если не указана ни одна настройка, связанная с хранилищем, то предполагаем, что объект по умолчанию захвачен.
	Если ПустаяСтрока(КаталогХранилища)
	   И ПустаяСтрока(СписокИзмененныхОбъектов)
	   И (НЕ ПомещатьИзмененныеОбъектыВХранилище) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗахваченВХранилище = Ложь;
	
	// Иначе определяем статус захвата объекта в таблице захваченных объектов.
	СтрокаЗахваченногоОбъекта = ЗахваченныеОбъекты.Найти(ПутьОбъекта, "Объект");
	Если (СтрокаЗахваченногоОбъекта = Неопределено) Тогда
		ЗахваченВХранилище = ПолучитьСтатусЗахватаРодителяОбъектаВХранилище(ПутьОбъекта);
	Иначе
		ЗахваченВХранилище = СтрокаЗахваченногоОбъекта.ЗахваченДляРедактирования;
	КонецЕсли;
	
	Возврат ЗахваченВХранилище;
	
КонецФункции

Функция ПолучитьСтатусЗахватаРодителяОбъектаВХранилище(ПутьОбъекта)
	
	// Некоторые объекты, например, команды, нельзя захватить в хранилище.
	// Для них получим состояние родительского объекта.
	МассивЭлементовПути = СтрРазделить(ПутьОбъекта, ".", Ложь);
	Если МассивЭлементовПути.Количество() < 2 Тогда
		// У объекта нет родительского объекта, выходим.
		Возврат Ложь;
	КонецЕсли;
	
	НомерПоследнегоЭлемента = МассивЭлементовПути.ВГраница();
	НомерПредпоследнегоЭлемента = НомерПоследнегоЭлемента - 1;
	
	// Получаем наименование предпоследнего элемента.
	ПредпоследнийЭлемент = МассивЭлементовПути[НомерПредпоследнегоЭлемента];
	Если СтрСравнить(ПредпоследнийЭлемент, "Команда") <> 0 Тогда
		// Если не команда, то выходим.
		Возврат Ложь;
	КонецЕсли;
	
	// Удаляем последний и предпоследний элемент пути.
	МассивЭлементовПути.Удалить(НомерПоследнегоЭлемента);
	МассивЭлементовПути.Удалить(НомерПредпоследнегоЭлемента);
	
	ОбъектРодителяПуть = СтрСоединить(МассивЭлементовПути, ".");
	
	СтрокаЗахваченногоОбъекта = ЗахваченныеОбъекты.Найти(ОбъектРодителяПуть, "Объект");
	Возврат ?(СтрокаЗахваченногоОбъекта = Неопределено, Ложь, СтрокаЗахваченногоОбъекта.ЗахваченДляРедактирования);
	
КонецФункции

Функция ПрочитатьПравилаПоддержки(ФайлПравилПоддержки)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ФайлПравилПоддержки);
	
	ПараметрыПоддержки = ТекстовыйДокумент.ПолучитьТекст();
	ТекстовыйДокумент = Неопределено;
	ПараметрыПоддержки = СтрРазделить(ПараметрыПоддержки, ",", Ложь);
	
	КоличествоКонфигураций = 0;
	СчетчикКонфигураций = 0;
	КоличествоОбъектов = 0;
	СчетчикОбъектов = 0;
	
	МассивПараметров = Новый Массив;
	
	Если ПараметрыПоддержки.ВГраница() > 2 Тогда
		Попытка
			КоличествоКонфигураций = Число(ПараметрыПоддержки[2]);
		Исключение
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли; 
	Если КоличествоКонфигураций = 0  Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПравилаПоддержки = Новый Соответствие;
	ПравилаПоддержки.Вставить(0, НСтр("ru='Не редактируется'"));
	ПравилаПоддержки.Вставить(1, НСтр("ru='Редактируется с сохранением поддержки'"));
	ПравилаПоддержки.Вставить(2, НСтр("ru='Снят с поддержки'"));
	
	ПравилаПоставки = Новый Соответствие;
	ПравилаПоставки.Вставить(0, НСтр("ru='Изменения разрешены'"));
	ПравилаПоставки.Вставить(1, НСтр("ru='Изменения не рекомендуются'"));
	ПравилаПоставки.Вставить(2, НСтр("ru='Изменения запрещены'"));
	ПравилаПоставки.Вставить(-1, НСтр("ru='Включение в конфигурацию не рекомендуется'"));
	
	Индекс = 3;
	Для СчетчикКонфигураций = 1 По КоличествоКонфигураций Цикл
		
		Поставка = Новый Структура;
		// Начало конфигурации
		Поставка.Вставить("УИД1",ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("Параметр", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("УИД2", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("Версия", СтрЗаменить(ПараметрыПоддержки[Индекс], """", ""));
		Индекс = Индекс + 1;
		Поставка.Вставить("Поставщик", ПараметрыПоддержки[Индекс]);
		Индекс = Индекс + 1;
		Поставка.Вставить("КонфигурацияПоставщика", СтрЗаменить(ПараметрыПоддержки[Индекс], """", ""));
		Индекс = Индекс + 1;
		Попытка
			КоличествоОбъектов = Число(ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		
		МассивОбъектов = Новый Массив;
		Для СчетчикОбъектов = 1 По КоличествоОбъектов Цикл
			Если Индекс + 4 > ПараметрыПоддержки.ВГраница() Тогда
				СчетчикОбъектов = СчетчикОбъектов + 1;
				Прервать;
			КонецЕсли;
			
			НастройкиОбъекта = Новый Структура;
			НастройкиОбъекта.Вставить("ПравилоПоддержки", ПравилаПоддержки.Получить(Число(ПараметрыПоддержки[Индекс])));
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ПравилоПоставки", ПравилаПоставки.Получить(Число(ПараметрыПоддержки[Индекс])));
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ОбъектМетаданных", ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
			НастройкиОбъекта.Вставить("ОбъектПоставщика", ПараметрыПоддержки[Индекс]);
			Индекс = Индекс + 1;
			
			МассивОбъектов.Добавить(НастройкиОбъекта);
		КонецЦикла; 
		
		Поставка.Вставить("Объекты", МассивОбъектов);
		
		Индекс = Индекс + 2; // пустые параметры в конце
		
		МассивПараметров.Добавить(Поставка);
	КонецЦикла; 
	
	Возврат МассивПараметров;
	
КонецФункции

Процедура ЗаполнитьПравилаПоддержки() Экспорт
	
	ПравилаПоддержкиОбъектов.Очистить();
	
	ФайлПравилПоддержки = КаталогВыгрузки + "Ext\ParentConfigurations.bin";
	
	Если НЕ апк_ФайлСуществует(ФайлПравилПоддержки) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПравилПоддержки = ПрочитатьПравилаПоддержки(ФайлПравилПоддержки);
	Если МассивПравилПоддержки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНеРедактируется = НСтр("ru='Не редактируется'");
	
	Для Каждого Элемент Из МассивПравилПоддержки Цикл
		
		// Проверяем свойство "Параметр", если он равен 1, то изменения запрещены.
		ИзмененияЗапрещены = (Элемент.Параметр = "1");
		
		Объекты = Элемент.Объекты;
		Для Каждого Объект Из Объекты Цикл
			
			uuidОбъекта = Объект.ОбъектМетаданных;
			
			// Если объекта еще нет в таблице, то добавим его.
			СтрокаТаблицы = ПравилаПоддержкиОбъектов.Найти(uuidОбъекта, "Объект");
			Если СтрокаТаблицы = Неопределено Тогда
				СтрокаТаблицы = ПравилаПоддержкиОбъектов.Добавить();
				СтрокаТаблицы.Объект = uuidОбъекта;
				СтрокаТаблицы.ПравилоПоддержки = ?(ИзмененияЗапрещены, ТекстНеРедактируется, Объект.ПравилоПоддержки);
				
				Продолжить;
			КонецЕсли;
			
			// Если объект уже есть, проверим его правило поддержки.
			Если СтрСравнить(СтрокаТаблицы.ПравилоПоддержки, ТекстНеРедактируется) <> 0 Тогда
				// Если изменения для объекта возможны, то заменяем текущее правило поддержки.
				СтрокаТаблицы.ПравилоПоддержки = Объект.ПравилоПоддержки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеXDTO(ФайлВыгрузкиXML)
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлВыгрузкиXML);
	
	Данные = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьИмяПодчиненногоОбъектаXDTO(ДанныеПодчиненногоОбъекта)
	
	СвойстваПодчиненногоОбъекта = ДанныеПодчиненногоОбъекта.Свойства();
	Если СвойстваПодчиненногоОбъекта.Получить("Properties") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеСвойствПодчиненногоОбъекта = ДанныеПодчиненногоОбъекта.Properties;
	
	СвойстваПодчиненногоОбъекта = ДанныеСвойствПодчиненногоОбъекта.Свойства();
	Если СвойстваПодчиненногоОбъекта.Получить("Name") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ДанныеСвойствПодчиненногоОбъекта.Name;
	
КонецФункции

Функция ПолучитьUuidПодчиненногоОбъекта(ПутьОбъектаАнгл, КлассОбъекта)
	
	МассивПутиАнгл = СтрРазделить(ПутьОбъектаАнгл, ".", Ложь);
	КоличествоЭлементовПутиАнгл = МассивПутиАнгл.Количество();
	
	// Если путь объекта короче 4-х элементов, то это не подчиненный объект.
	Если КоличествоЭлементовПутиАнгл < 4 Тогда
		Возврат "";
	КонецЕсли;
	
	КлассРодителяОбъектаМнЧ = МассивПутиАнгл[0];
	ПутьРодителяОбъекта = КлассРодителяОбъектаМнЧ + "\" + МассивПутиАнгл[1];
	
	ФайлВыгрузкиXML = КаталогВыгрузки + ПутьРодителяОбъекта + ".xml";
	Если НЕ апк_ФайлСуществует(ФайлВыгрузкиXML) Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяОбъекта = МассивПутиАнгл[МассивПутиАнгл.ВГраница()];
	КлассРодителяОбъектаЕдЧ = ПолучитьСоответствиеНазванияВидаОбъекта(КлассРодителяОбъектаМнЧ, "ИмяАнглМнФормы", "ИмяАнгл");
	
	Данные = ПолучитьДанныеXDTO(ФайлВыгрузкиXML);
	ДанныеОбъектаРодителя = Данные[КлассРодителяОбъектаЕдЧ];
	
	// Проверяем, что у объекта-родителя указаны подчиненные объекты.
	СвойстваОбъектаРодителя = ДанныеОбъектаРодителя.Свойства();
	Если СвойстваОбъектаРодителя.Получить("ChildObjects") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеПодчиненныхОбъектов = ДанныеОбъектаРодителя["ChildObjects"];
	
	// Проверяем, что среди подчиненных объектов есть нужный класс объекта.
	СвойстваПодчиненныхОбъектов = ДанныеПодчиненныхОбъектов.Свойства();
	Если СвойстваПодчиненныхОбъектов.Получить(КлассОбъекта) = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ПодчиненныеОбъектыПоКлассу = ДанныеПодчиненныхОбъектов[КлассОбъекта];
	
	ПодчиненныйОбъект = Неопределено;
	Если ТипЗнч(ПодчиненныеОбъектыПоКлассу) = Тип("ОбъектXDTO") Тогда
		Если СтрСравнить(ПолучитьИмяПодчиненногоОбъектаXDTO(ПодчиненныеОбъектыПоКлассу), ИмяОбъекта) = 0 Тогда
			ПодчиненныйОбъект = ПодчиненныеОбъектыПоКлассу;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ПодчиненныеОбъектыПоКлассу) = Тип("СписокXDTO") Тогда
		Для Каждого ПодчиненныйОбъектПоКлассу Из ПодчиненныеОбъектыПоКлассу Цикл
			Если СтрСравнить(ПолучитьИмяПодчиненногоОбъектаXDTO(ПодчиненныйОбъектПоКлассу), ИмяОбъекта) = 0 Тогда
				ПодчиненныйОбъект = ПодчиненныйОбъектПоКлассу;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПодчиненныйОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СвойстваПодчиненногоОбъекта = ПодчиненныйОбъект.Свойства();
	Если СвойстваПодчиненногоОбъекта.Получить("uuid") = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПодчиненныйОбъект.uuid;
	
КонецФункции

Функция ПолучитьUuidОбъекта(ПутьОбъектаАнгл, КлассОбъекта)
	
	// XML файла для команды не существует, описание команды содержится в XML файле его родителя.
	Если КлассОбъекта = "Command" Тогда
		Возврат ПолучитьUuidПодчиненногоОбъекта(ПутьОбъектаАнгл, КлассОбъекта);
	КонецЕсли;
	
	ИмяФайла = СтрЗаменить(ПутьОбъектаАнгл, ".", "\");
	ФайлВыгрузкиXML = КаталогВыгрузки + ИмяФайла + ".xml";
	
	Если НЕ апк_ФайлСуществует(ФайлВыгрузкиXML) Тогда
		Возврат "";
	КонецЕсли;
	
	Данные = ПолучитьДанныеXDTO(ФайлВыгрузкиXML);
	
	Возврат Данные[КлассОбъекта].uuid;
	
КонецФункции

Процедура ЗаполнитьПравилаПоддержкиДляИзмененныхОбъектов() Экспорт
	
	Если ПравилаПоддержкиОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРезультата Из Результат Цикл
		
		Если НЕ СтрокаРезультата.ЗахваченВХранилище Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьОбъектаАнглМнЧ = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(СтрокаРезультата.ПолноеИмяФайла,, "ИмяАнглМнФормы");
		КлассОбъектаМнЧ = ПолучитьКлассОбъекта(ПутьОбъектаАнглМнЧ);
		КлассОбъектаЕдЧ = ПолучитьСоответствиеНазванияВидаОбъекта(КлассОбъектаМнЧ, "ИмяАнглМнФормы", "ИмяАнгл");
		
		uuidОбъекта = ПолучитьUuidОбъекта(ПутьОбъектаАнглМнЧ, КлассОбъектаЕдЧ);
		
		СтрокаПравилПоддержки = ПравилаПоддержкиОбъектов.Найти(uuidОбъекта, "Объект");
		Если СтрокаПравилПоддержки <> Неопределено Тогда
			СтрокаРезультата.РедактированиеРазрешено = (СтрокаПравилПоддержки.ПравилоПоддержки <> НСтр("ru='Не редактируется'"));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСФайламиИКаталогами

Функция ПолучитьЛогВыгрузкиФайловКонфигурации(ФайлЛога)
	
	// Проверяем лог запуска конфигуратора.
	Если НЕ апк_ФайлСуществует(ФайлЛога) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ФайлЛога);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	апк_ФайлУдалить(ФайлЛога);
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ПолучитьКаталогФайла(ПутьКФайлу)
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Путь;
	
КонецФункции

// Получает путь к информационной базе в следующем формате:
// - для серверных баз <Путь к серверу>\<Путь к базе>
// - для файловых баз путь к каталогу где расположена информационная база с "\" в конце.
// Параметры:
//  ПутьКБазе - Строка - путь к базе, который необходимо преобразовать к формату
// Возвращаемое значение: 
//  Тип Строка.
//
Функция ПолучитьПутьКБазе(Знач ПутьКБазе)
	
	Если НЕ ЗначениеЗаполнено(ПутьКБазе) Тогда 
		Возврат "";
	КонецЕсли;
	
	ПутьКБазе = СокрЛП(ПутьКБазе);
	
	// Если на вход подается строка соединения с файловой базой, то получаем каталог из строки соединения.
	Если СтрНайти(ПутьКБазе, "File=") > 0 Тогда
		СтрокаПодключения = НСтр(ПутьКБазе, "File");
		// Добавляем слэш в конце.
		Возврат КаталогДобавитьСлэш(СтрокаПодключения);
	КонецЕсли;
	
	// Если на вход подается строка соединения с серверной базой, то формируем путь к базе из строки соединения.
	Если СтрНайти(ПутьКБазе, "Srvr=") > 0 Тогда
		Сервер = НСтр(ПутьКБазе, "Srvr");
		ИмяБазы = НСтр(ПутьКБазе, "Ref");
		Возврат Сервер + "\" + ИмяБазы;
	КонецЕсли;
	
	// Проверяем, указан путь к серверной базе или к файловой.
	Если (СтрНайти(ПутьКБазе, ":\") = 0 И СтрНайти(ПутьКБазе, "$\") = 0 И СтрНайти(ПутьКБазе, "\\") = 0) Тогда
		// Если в пути к серверной базе указан слэш в конце, то убираем его.
		Возврат ?(Лев(ПутьКБазе, 1) = "\", Прав(ПутьКБазе, СтрДлина(ПутьКБазе) - 1), ПутьКБазе)
	КонецЕсли;
	
	// Убираем имя файла из конца пути к базе.
	КаталогБазы = ?(СтрНайти(ВРег(ПутьКБазе), "1CV8.1CD") = 0, ПутьКБазе, ПолучитьКаталогФайла(ПутьКБазе));
	// Добавляем слэш в конце каталога файловой базы.
	Возврат КаталогДобавитьСлэш(КаталогБазы);
	
КонецФункции

// Выполняет проверку того, является ли указанная база файловой.
// Параметры:
//  ПутьКБазе - Строка - путь к базе
// Возвращаемое значение:
//  Булево - Истина если база файловая, Ложь если серверная.
//
Функция ЭтоФайловаяБаза(Знач ПутьКБазе)
	
	Если Не ЗначениеЗаполнено(ПутьКБазе) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ПутьКБазе = ПолучитьПутьКБазе(ПутьКБазе);
	
	Возврат СтрНайти(ПутьКБазе, ":\") ИЛИ СтрНайти(ПутьКБазе, "$\") ИЛИ СтрНайти(ПутьКБазе, "\\");
	
КонецФункции

Функция ПолучитьСтрокуПодключенияКБазе(ПутьКБазе)
	
	Возврат ?(ЭтоФайловаяБаза(ПутьКБазе), " /F", " /S") + ЗаключитьСтрокуВКавычки(ПолучитьПутьКБазе(ПутьКБазе));
	
КонецФункции

Функция апк_ФайлСуществует(ИмяФайла)
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.Существует();
	
КонецФункции

// Удаляет в попытке указанный файл или каталог.
// Действует аналогично методу УдалитьФайлы().
//
Процедура апк_ФайлУдалить(ИмяФайла, Маска = "")
	
	Если НЕ апк_ФайлСуществует(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		УдалитьФайлы(ИмяФайла, Маска);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура апк_КаталогКопировать(Источник, Приемник)
	
	НайденныеФайлы = НайтиФайлы(Источник, "*");
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		ИмяФайлаИсточника = Файл.ПолноеИмя;
		ИмяФайлаПриемника = СтрЗаменить(ИмяФайлаИсточника, Источник, Приемник);
		
		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(ИмяФайлаПриемника);
			апк_КаталогКопировать(ИмяФайлаИсточника, ИмяФайлаПриемника);
		Иначе
			КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаключитьСтрокуВКавычки(Строка)
	
	Возврат """" + Строка + """";
	
КонецФункции

Функция КаталогДобавитьСлэш(Каталог)
	
	Если НЕ СтрЗаканчиваетсяНа(Каталог, "\") Тогда
		Каталог = Каталог + "\";
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

// Получает текст переданного файла.
//
Функция апк_ФайлПолучитьТекст(ПолноеИмяФайла, УдалитьФайл = Истина)
	
	// Проверяем существование файла.
	Если НЕ апк_ФайлСуществует(ПолноеИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Получаем текст.
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	Текст = ДокументТекст.ПолучитьТекст();
	
	Если УдалитьФайл Тогда
		апк_ФайлУдалить(ПолноеИмяФайла);
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат Текст;
	
КонецФункции

Функция ВыполнитьЗаменуСтрокиВФайле(ПолноеИмяФайла, ПараметрыСтроки) Экспорт
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ДокументТекст.ЗаменитьСтроку(ПараметрыСтроки.НомерСтроки, ПараметрыСтроки.СтрокаДляЗамены);
	
	ДокументТекст.Записать(ПолноеИмяФайла);
	
	Возврат ДокументТекст.ПолучитьСтроку(ПараметрыСтроки.НомерСтроки);
	
КонецФункции

#КонецОбласти

#Область АнализКлючевыхСловЗапроса

Функция ВыполнитьАнализСтроковыхКонстантВМодуле(ПолноеИмяФайла)
	
	ДокументТекст = Новый ТекстовыйДокумент;
	ДокументТекст.Прочитать(ПолноеИмяФайла);
	
	ПроверкаКаноническогоНаписанияКлючевыхСловЗапроса(ДокументТекст, ПолноеИмяФайла);
	
КонецФункции

Процедура ВыполнитьАнализСтроковыхКонстант() Экспорт
	
	Результат.Очистить();
	
	МассивФайлов = НайтиФайлы(КаталогВыгрузки, "*.bsl", Истина);
	Для Каждого Файл Из МассивФайлов Цикл
		ПолноеИмяФайла = Файл.ПолноеИмя;
		ВыполнитьАнализСтроковыхКонстантВМодуле(ПолноеИмяФайла);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истину, если переданный параметр - Число.
//
Функция апк_ЭтоЧисло(Строка)
	
	МассивЗнаковИсключений = Новый Массив;
	МассивЗнаковИсключений.Добавить(".");
	МассивЗнаковИсключений.Добавить("+");
	МассивЗнаковИсключений.Добавить("-");
	
	Если МассивЗнаковИсключений.Найти(Строка) <> Неопределено
		ИЛИ Строка = "" Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Число = Число(Строка);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция апк_СтрЗаменить(Знач Текст, ТекстЗамены, НомерСимволаНачало, НомерСимволаКонец)
	
	ТекстДо = Лев(Текст, НомерСимволаНачало - 1);
	ТекстПосле = Сред(Текст, НомерСимволаКонец + 1);
	
	СтрокаПробелов = "";
	Для Счетчик = НомерСимволаНачало По НомерСимволаКонец Цикл
		СтрокаПробелов = СтрокаПробелов + ТекстЗамены;
	КонецЦикла;
	
	Возврат ТекстДо + СтрокаПробелов + ТекстПосле;
	
КонецФункции

Функция УдалитьКомментарийИзСтроки(СтрокаМодуля)
	
	Если ПустаяСтрока(СтрокаМодуля) Тогда
		Возврат СтрокаМодуля;
	КонецЕсли;
	
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	Если ПозицияКомментария = 0 Тогда
		Возврат СтрокаМодуля;
	КонецЕсли;
	
	// Например, URLСтрока = "http://downloads.v8.1c.ru/tmplts/ITS/KLADR/"; - не проверяем на комментарий.
	СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "://", "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>");
	ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
	
	// Есть комментарий.
	Если ПозицияКомментария > 0 Тогда
		ПозицияКавычек = СтрНайти(СтрокаМодуля, """");
		СтрокаОткрыта = СтрНачинаетсяС(СокрЛ(СтрокаМодуля), "|");
		
		// Нет кавычек, удаляем комментарий.
		Если ПозицияКавычек = 0 Тогда
			СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			
		// Знак комментария в открытой строке, например:
		// |//////////////////";
		ИначеЕсли СтрокаОткрыта И ПозицияКавычек > 0 Тогда
			ПозицияКомментария = СтрНайти(СтрокаМодуля, "//",, ПозицияКавычек);
			Если ПозицияКомментария > 0 Тогда
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			КонецЕсли;
			
		// Строка не открыта, кавычки после комментария, удаляем комментарий.
		ИначеЕсли ПозицияКавычек > ПозицияКомментария Тогда
			СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			
		Иначе
			КоличествоКавычекДоКомментария = СтрЧислоВхождений(Лев(СтрокаМодуля, ПозицияКомментария), """");
			// Строка открывается и закрывается до комментария, удаляем комментарий.
			Если КоличествоКавычекДоКомментария % 2 = 0 Тогда
				СтрокаМодуля = Лев(СтрокаМодуля, ПозицияКомментария - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат СтрЗаменить(СтрокаМодуля, "<<ВНЕШНЕЕСОЕДИНЕНИЕ>>", "://");;
	
КонецФункции

Функция ПолучитьСинонимПоИмениОбъекта(Знач ИмяОбъекта)
	
	КоличествоСимволов = СтрДлина(ИмяОбъекта);
	Если КоличествоСимволов <= 1 Тогда
		Возврат ИмяОбъекта;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяОбъекта) Тогда
		Возврат "";
	КонецЕсли;
	
	Если апк_ЭтоЧисло(ИмяОбъекта) Тогда
		Возврат "";
	КонецЕсли;
	
	Синоним = "";
	
	Для НомерСимвола = 1 По КоличествоСимволов Цикл
		
		ТекущийСимвол = Сред(ИмяОбъекта, НомерСимвола, 1);
		
		Если ТекущийСимвол = "_" Тогда
			Синоним = Синоним + " ";
		ИначеЕсли ВРег(ТекущийСимвол) = ТекущийСимвол Тогда
			Синоним = Синоним + " " + ТекущийСимвол;
		Иначе
			Синоним = Синоним + ТекущийСимвол;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Синоним) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСлов = СтрРазделить(Синоним, " ", Ложь);
	НомерПоследнегоСлова = МассивСлов.ВГраница();
	
	Синоним = МассивСлов[0];
	
	ПредыдущееСлово = Синоним;
	Для НомерСлова = 1 По НомерПоследнегоСлова Цикл
		
		ТекущееСлово = МассивСлов[НомерСлова];
		
		// Если длина слова больше 1 символа, то добавляем слово с пробелом и продолжаем.
		Если СтрДлина(ТекущееСлово) > 1 Тогда
			Синоним = Синоним + " " + НРег(ТекущееСлово);
			Продолжить;
		КонецЕсли;
		
		// Текущее слово состоит из 1 символа, проверяем предыдущее и следующее слово.
		// Если предыдущее слово также состояло из 1 символа, то началась аббревиатура.
		Если СтрДлина(МассивСлов[НомерСлова - 1]) = 1 Тогда
			Синоним = Синоним + ТекущееСлово;
			Продолжить;
		КонецЕсли;
		
		// Если это слово последнее, то добавим текущее с пробелом и с маленькой буквы.
		Если НомерСлова >= НомерПоследнегоСлова Тогда
			Синоним = Синоним + " " + НРег(ТекущееСлово);
			Продолжить;
		КонецЕсли;
		
		// Если следующее слово также из одного символа, то аббревиатура продолжается.
		Если СтрДлина(МассивСлов[НомерСлова + 1]) = 1 Тогда
			Синоним = Синоним + " " + ТекущееСлово;
			Продолжить;
		КонецЕсли;
		
		// Если предыдущее и следующее слово длиннее 1 символа, то текущее слово - союз или предлог.
		Синоним = Синоним + " " + НРег(ТекущееСлово);
		
	КонецЦикла;
	
	Синоним = СокрЛП(Синоним);
	Синоним = ВРег(Лев(Синоним, 1)) + Сред(Синоним, 2);
	
	Возврат Синоним;
	
КонецФункции

Функция ПолучитьНомерСтрокиМодуля(ТекстМодуля, НомерСимвола)
	
	ТекстДоСимвола = Лев(ТекстМодуля, НомерСимвола);
	НомерСтроки = СтрЧислоСтрок(ТекстДоСимвола);
	
	Возврат НомерСтроки;
	
КонецФункции

Функция ПолучитьМассивКлючевыхСловЗапроса()
	
	// Набор операторов для поиска кода, написанного на языке запросов.
	ОператорыЗапроса = Новый Массив;
	ОператорыЗапроса.Добавить("ВЫБРАТЬ");
	ОператорыЗапроса.Добавить("СГРУППИРОВАТЬ");
	ОператорыЗапроса.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	ОператорыЗапроса.Добавить("ИТОГИ");
	ОператорыЗапроса.Добавить("УПОРЯДОЧИТЬ");
	ОператорыЗапроса.Добавить("ПОМЕСТИТЬ");
	ОператорыЗапроса.Добавить("ОБЪЕДИНИТЬ");
	
	Возврат ОператорыЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуЭталоновКлючевыхСловЗапроса()
	
	// Составляем набор эталонов.
	МассивЭталонов = Новый Массив;
	МассивЭталонов.Добавить("ВЫБРАТЬ");
	МассивЭталонов.Добавить("ГДЕ");
	МассивЭталонов.Добавить("ИЗ");
	МассивЭталонов.Добавить("КАК");
	МассивЭталонов.Добавить("ПО");
	МассивЭталонов.Добавить("ОБЪЕДИНИТЬ");
	МассивЭталонов.Добавить("ВСЕ");
	МассивЭталонов.Добавить("ПОМЕСТИТЬ");
	МассивЭталонов.Добавить("АВТОУПОРЯДОЧИВАНИЕ");
	МассивЭталонов.Добавить("ИЕРАРХИЯ");
	МассивЭталонов.Добавить("ВЫБОР");
	МассивЭталонов.Добавить("ТОГДА");
	МассивЭталонов.Добавить("КОГДА");
	МассивЭталонов.Добавить("ЕСЛИ");
	МассивЭталонов.Добавить("КОНЕЦ");
	МассивЭталонов.Добавить("ИНАЧЕ");
	МассивЭталонов.Добавить("МЕЖДУ");
	МассивЭталонов.Добавить("В");
	МассивЭталонов.Добавить("ИЕРАРХИИ");
	МассивЭталонов.Добавить("ПОДОБНО");
	МассивЭталонов.Добавить("ИМЕЮЩИЕ");
	МассивЭталонов.Добавить("УПОРЯДОЧИТЬ");
	МассивЭталонов.Добавить("ИСТИНА");
	МассивЭталонов.Добавить("ЛОЖЬ");
	МассивЭталонов.Добавить("ПЕРВЫЕ");
	МассивЭталонов.Добавить("РАЗРЕШЕННЫЕ");
	МассивЭталонов.Добавить("ВЫРАЗИТЬ");
	МассивЭталонов.Добавить("ИТОГИ");
	МассивЭталонов.Добавить("ПОЛНОЕ");
	МассивЭталонов.Добавить("СОЕДИНЕНИЕ");
	МассивЭталонов.Добавить("ЛЕВОЕ");
	МассивЭталонов.Добавить("ПРАВОЕ");
	МассивЭталонов.Добавить("ВНУТРЕННЕЕ");
	МассивЭталонов.Добавить("РАЗЛИЧНЫЕ");
	МассивЭталонов.Добавить("УБЫВ");
	МассивЭталонов.Добавить("ВОЗР");
	МассивЭталонов.Добавить("СГРУППИРОВАТЬ");
	МассивЭталонов.Добавить("ОБЩИЕ");
	МассивЭталонов.Добавить("НЕ");
	МассивЭталонов.Добавить("И");
	МассивЭталонов.Добавить("ИЛИ");
	МассивЭталонов.Добавить("ЕСТЬ");
	МассивЭталонов.Добавить("NULL");
	МассивЭталонов.Добавить("ЕСТЬNULL");
	
	ТаблицаКлючевыхСловЗапроса = Новый ТаблицаЗначений;
	ТаблицаКлючевыхСловЗапроса.Колонки.Добавить("Эталон");
	ТаблицаКлючевыхСловЗапроса.Колонки.Добавить("ДлинаЭталона");
	ТаблицаКлючевыхСловЗапроса.Колонки.Добавить("СловоДляПоиска");
	
	Для Каждого Эталон Из МассивЭталонов Цикл
		СтрокаТаблицы = ТаблицаКлючевыхСловЗапроса.Добавить();
		СтрокаТаблицы.Эталон = Эталон;
		СтрокаТаблицы.ДлинаЭталона = СтрДлина(Эталон);
		СтрокаТаблицы.СловоДляПоиска = " " + ВРег(Эталон) + " ";
	КонецЦикла;
	
	ТаблицаКлючевыхСловЗапроса.Индексы.Добавить("Эталон");
	
	Возврат ТаблицаКлючевыхСловЗапроса;
	
КонецФункции

Функция ПолучитьМассивИсключенийСловЗапроса()
	
	// Набор строк-исключений, точно не встречающихся в запросах.
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("RU");
	МассивИсключений.Добавить("EN");
	
	Возврат МассивИсключений;
	
КонецФункции

Функция апк_СтрНайтиКавычки(ТекстМодуля, ПозицияНачала = 1)
	
	ПозицияПоиска = ПозицияНачала - 1;
	Пока Истина Цикл
		
		ПозицияПоиска = СтрНайти(ТекстМодуля, """",, ПозицияПоиска + 1);
		Если ПозицияПоиска = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НомерСтроки = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияПоиска);
		СтрокаМодуля = СтрПолучитьСтроку(ТекстМодуля, НомерСтроки);
		
		СтрокаМодуляБезКомментария = УдалитьКомментарийИзСтроки(СтрокаМодуля);
		Если ПустаяСтрока(СтрокаМодуляБезКомментария) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрокаМодуляБезКомментария, """") > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПозицияПоиска;
	
КонецФункции

Процедура ПроверкаКаноническогоНаписанияКлючевыхСловЗапроса(ДокументТекст, ПолноеИмяФайла)
	
	// Получаем массив ключевых слов запроса, по которым определяем, что это текст запроса.
	Если МассивКлючевыхСловЗапроса = Неопределено Тогда
		МассивКлючевыхСловЗапроса = ПолучитьМассивКлючевыхСловЗапроса();
	КонецЕсли;
	
	// Получаем таблицу ключевых слов запроса, которые необходимо заменить.
	Если ТаблицаКлючевыхСловЗапроса = Неопределено Тогда
		ТаблицаКлючевыхСловЗапроса = ПолучитьТаблицуЭталоновКлючевыхСловЗапроса();
	КонецЕсли;
	
	// Получаем массив слов, которые точно не встречаются в запросах.
	Если МассивИсключенийСловЗапроса = Неопределено Тогда
		МассивИсключенийСловЗапроса = ПолучитьМассивИсключенийСловЗапроса();
	КонецЕсли;
	
	ТекстКавычки = """";
	ТекстДвойныеКавычки = ТекстКавычки + ТекстКавычки;
	ТекстДвойныеКавычкиЗамена = "~~"; // берем такие знаки, чтобы сохранить длину замены.
	
	КоличествоСтрок = ДокументТекст.КоличествоСтрок();
	
	ТекстМодуля = ДокументТекст.ПолучитьТекст();
	
	// Заменяем в тексте модуля все лишнее на пробелы.
	ТекстМодуля = ВРег(ТекстМодуля);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, ТекстДвойныеКавычки, ТекстДвойныеКавычкиЗамена);
	ТекстМодуля = СтрЗаменить(ТекстМодуля, Символы.Таб, " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "(", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, ")", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "{", " ");
	ТекстМодуля = СтрЗаменить(ТекстМодуля, "}", " ");
	
	ДокументТекстБуфер = Новый ТекстовыйДокумент;
	
	ПозицияКавычекДляЗамены = 1;
	ПозицияКавычекКонец = 0;
	Пока Истина Цикл
		
		// Ищем открывающие кавычки.
		ПозицияКавычекНачало = апк_СтрНайтиКавычки(ТекстМодуля, ПозицияКавычекКонец + 1);
		Если ПозицияКавычекНачало = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Ищем закрывающие кавычки.
		ПозицияКавычекКонец = апк_СтрНайтиКавычки(ТекстМодуля, ПозицияКавычекНачало + 1);
		Если ПозицияКавычекКонец = 0 Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаМеждуКавычками = Сред(ТекстМодуля, ПозицияКавычекНачало + 1, ПозицияКавычекКонец - ПозицияКавычекНачало - 1);
		СтрокаМеждуКавычками = СтрЗаменить(СтрокаМеждуКавычками, Символы.ПС, " ");
		СтрокаМеждуКавычками = СокрЛП(СтрокаМеждуКавычками);
		
		// Если в строке нет пробелов, это идентификатор, пропускаем.
		Если СтрНайти(СтрокаМеждуКавычками, " ") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем исключения.
		НайденоСловоИсключение = Ложь;
		Для Каждого СловоИсключение Из МассивИсключенийСловЗапроса Цикл
			Если СтрНайти(СтрокаМеждуКавычками, СловоИсключение) > 0 Тогда
				НайденоСловоИсключение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НайденоСловоИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаМеждуКавычкамиБуфер = СтрШаблон(" %1 ", СтрокаМеждуКавычками);
		СтрокаМеждуКавычкамиБуфер = СтрЗаменить(СтрокаМеждуКавычкамиБуфер, "|", " ");
		СтрокаМеждуКавычкамиБуфер = СтрЗаменить(СтрокаМеждуКавычкамиБуфер, Символы.ПС, " ");
		
		// Проверяем, является ли найденный текст запросом по ключевым словам.
		НайденоКлючевоеСловоЗапроса = Ложь;
		Для Каждого КлючевоеСловоЗапроса Из МассивКлючевыхСловЗапроса Цикл
			Если СтрНайти(СтрокаМеждуКавычками, КлючевоеСловоЗапроса) > 0 Тогда
				НайденоКлючевоеСловоЗапроса = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ НайденоКлючевоеСловоЗапроса Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтрокиНачало = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияКавычекНачало);
		НомерСтрокиКонец = ПолучитьНомерСтрокиМодуля(ТекстМодуля, ПозицияКавычекКонец);
		
		// Заменяем все пробелами в первой строке до первой кавычки, чтобы не проверить лишнее.
		ПозицияПереноса = СтрНайти(ТекстМодуля, Символы.ПС, НаправлениеПоиска.СКонца, ПозицияКавычекНачало);
		ТекстМодуля = апк_СтрЗаменить(ТекстМодуля, " ", ПозицияПереноса + 1, ПозицияКавычекНачало);
		
		ДокументТекстБуфер.УстановитьТекст(ТекстМодуля);
		
		Для НомерСтроки = НомерСтрокиНачало По НомерСтрокиКонец Цикл
			
			СтрокаМодуля = ДокументТекстБуфер.ПолучитьСтроку(НомерСтроки);
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			// Если вся строка - это комментарий, то пропускаем.
			СтрокаМодуляСокрЛ = СокрЛ(СтрокаМодуля);
			Если СтрНачинаетсяС(СтрокаМодуляСокрЛ, "//") Тогда
				Продолжить;
			КонецЕсли;
			
			ДлинаСтроки = СтрДлина(СтрокаМодуля);
			
			// Заменяем кавычки на пробелы.
			СтрокаМодуля = СтрЗаменить(СтрокаМодуля, ТекстКавычки, " ");
			СтрокаМодуля = СтрЗаменить(СтрокаМодуля, "|", " ");
			
			// Ищем комментарий в строке после текста кода запроса.
			ПозицияКомментария = СтрНайти(СтрокаМодуля, "//");
			Если ПозицияКомментария > 0 Тогда
				// Удаляем все до конца строки.
				СтрокаМодуля = апк_СтрЗаменить(СтрокаМодуля, " ", ПозицияКомментария, СтрДлина(СтрокаМодуля));
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаМодуля) Тогда
				Продолжить;
			КонецЕсли;
			
			// Пропускаем строки без строковых констант.
			ПозицияДвойныхКавычекНачало = СтрНайти(СтрокаМодуля, ТекстДвойныеКавычкиЗамена);
			Если ПозицияДвойныхКавычекНачало = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМодуляИсправленная = ДокументТекст.ПолучитьСтроку(НомерСтроки);
			
			// Добавляем пробелы в начале и конце, чтобы поиск сработал корректно и совпадал номер символа в строках.
			СтрокаМодуля = " " + СтрокаМодуля + " ";
			СтрокаМодуляИсправленная = " " + СтрокаМодуляИсправленная + " ";
			
			// Проверяем правильное написание каждого ключевого слова запроса.
			Для Каждого СтрокаТаблицы Из ТаблицаКлючевыхСловЗапроса Цикл
				
				Эталон = СтрокаТаблицы.Эталон;
				ДлинаЭталона = СтрокаТаблицы.ДлинаЭталона;
				СловоДляПоиска = СтрокаТаблицы.СловоДляПоиска;
				
				// Ищем вхождение ключевого слова запроса в строке модуля.
				ПозицияДвойныхКавычекКонец = 0;
				ПозицияДвойныхКавычекНачало = 0;
				Пока Истина Цикл
					
					ПозицияДвойныхКавычекНачало = СтрНайти(СтрокаМодуля, ТекстДвойныеКавычкиЗамена,, ПозицияДвойныхКавычекКонец + 2);
					Если ПозицияДвойныхКавычекНачало = 0 Тогда
						Прервать;
					КонецЕсли;
					
					// Если кавычка не в конце строки, то ищем закрывающую.
					Если ПозицияДвойныхКавычекНачало < ДлинаСтроки Тогда
						ПозицияДвойныхКавычекКонец = СтрНайти(СтрокаМодуля, ТекстДвойныеКавычкиЗамена,, ПозицияДвойныхКавычекНачало + 2);
					КонецЕсли;
					
					Если ПозицияДвойныхКавычекКонец = 0 Тогда
						Прервать;
					КонецЕсли;
					
					ПозицияПоиска = 0;
					Пока Истина Цикл
					
						ПозицияПоиска = СтрНайти(СтрокаМодуляИсправленная, СловоДляПоиска,, ПозицияПоиска + 1);
						Если ПозицияПоиска = 0 Тогда
							Прервать;
						КонецЕсли;
						
						// Проверяем, что искомое слово находится внутри кавычек.
						Если НЕ (ПозицияПоиска > ПозицияДвойныхКавычекНачало И ПозицияПоиска < ПозицияДвойныхКавычекКонец) Тогда
							Продолжить;
						КонецЕсли;
						
						ПараметрыЗаполнения = Новый Структура;
						ПараметрыЗаполнения.Вставить("ИзмененнаяСтрока", СтрокаМодуляИсправленная);
						ПараметрыЗаполнения.Вставить("ИзмененнаяСтрокаНомер", НомерСтроки);
						ПараметрыЗаполнения.Вставить("ИзмененноеСлово", СловоДляПоиска);
						ПараметрыЗаполнения.Вставить("ПозицияСимволаВСтроке", ПозицияПоиска);
						
						ДобавитьСтрокуВТаблицуИзмененныхСтроковыхКонстант(ПолноеИмяФайла, ПараметрыЗаполнения);
						
					КонецЦикла;
					
					Если (ПозицияДвойныхКавычекНачало = ДлинаСтроки) ИЛИ (ПозицияДвойныхКавычекНачало + 1 = ДлинаСтроки) Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСтрокуВТаблицуИзмененныхСтроковыхКонстант(ПолноеИмяФайла, ПараметрыЗаполнения)
	
	ПутьОбъекта = ПолучитьПутьОбъектаИзФайлаВыгрузкиXML(ПолноеИмяФайла);
	
	НоваяСтрока = Результат.Добавить();
	
	НоваяСтрока.ПолноеИмяФайла			= ПолноеИмяФайла;
	НоваяСтрока.Объект					= ПутьОбъекта;
	НоваяСтрока.Флаг					= Истина;
	НоваяСтрока.ЗахваченВХранилище		= ПолучитьСтатусЗахватаОбъектаВХранилище(ПутьОбъекта);
	НоваяСтрока.РедактированиеРазрешено	= Истина;
	НоваяСтрока.ИзмененнаяСтрока		= ПараметрыЗаполнения.ИзмененнаяСтрока;
	НоваяСтрока.ИзмененнаяСтрокаНомер	= ПараметрыЗаполнения.ИзмененнаяСтрокаНомер;
	НоваяСтрока.ИзмененноеСлово			= ПараметрыЗаполнения.ИзмененноеСлово;
	НоваяСтрока.ПозицияСимволаВСтроке	= ПараметрыЗаполнения.ПозицияСимволаВСтроке;
	
	МестоОбнаружения = ПолучитьТипМодуляПоИмениФайла(ПолноеИмяФайла);
	НоваяСтрока.МестоОбнаружения		= МестоОбнаружения + ", " + ПараметрыЗаполнения.ИзмененнаяСтрокаНомер;
	
КонецФункции

Функция ВыполнитьАвтозаменуКлючевыхСлов() Экспорт
	
	// Инициализируем таблицу, в которой будут храниться уникальные строки.
	ТаблицаИзмененныхСтрок = Новый ТаблицаЗначений;
	ТаблицаИзмененныхСтрок.Колонки.Добавить("ПолноеИмяФайла");
	ТаблицаИзмененныхСтрок.Колонки.Добавить("ИзмененнаяСтрокаНомер");
	ТаблицаИзмененныхСтрок.Колонки.Добавить("ИзмененнаяСтрока");
	
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		Если НЕ ТекущаяСтрока.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДляЗамены = "";
		
		// Поиск текущей строки, в таблице уникальных строк.
		ПараметрыПоиска = Новый Структура("ПолноеИмяФайла, ИзмененнаяСтрокаНомер",
			ТекущаяСтрока.ПолноеИмяФайла, ТекущаяСтрока.ИзмененнаяСтрокаНомер);
		Массив = ТаблицаИзмененныхСтрок.НайтиСтроки(ПараметрыПоиска);
		Если Массив.Количество() = 0 Тогда
			СтрокаТаблицы = ТаблицаИзмененныхСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ТекущаяСтрока,
				"ПолноеИмяФайла, ИзмененнаяСтрокаНомер, ИзмененнаяСтрока");
		Иначе
			СтрокаТаблицы = Массив[0];
		КонецЕсли;
		
		СтрокаДляЗамены = СтрокаТаблицы.ИзмененнаяСтрока;
		
		СтрокаДо = Лев(СтрокаДляЗамены, ТекущаяСтрока.ПозицияСимволаВСтроке);
		СтрокаПосле = Сред(СтрокаДляЗамены, ТекущаяСтрока.ПозицияСимволаВСтроке + СтрДлина(ТекущаяСтрока.ИзмененноеСлово) - 1);
		СтрокаДляЗамены = СтрокаДо + СокрЛП(НРег(ТекущаяСтрока.ИзмененноеСлово)) + СтрокаПосле;
		
		СтрокаТаблицы.ИзмененнаяСтрока = СтрокаДляЗамены;
		
	КонецЦикла;
	
	// Заполняем ТЧ на основании таблицы уникальных строк.
	Для Каждого ТекущаяСтрока Из Результат Цикл
		
		ПараметрыПоиска = Новый Структура("ПолноеИмяФайла, ИзмененнаяСтрокаНомер", ТекущаяСтрока.ПолноеИмяФайла, ТекущаяСтрока.ИзмененнаяСтрокаНомер);
		МассивСтрок = ТаблицаИзмененныхСтрок.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрок.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.ИзмененнаяСтрока = МассивСтрок[0].ИзмененнаяСтрока;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область Инициализация

ТаблицаКлючевыхСловЗапроса = Неопределено;
МассивКлючевыхСловЗапроса = Неопределено;
МассивИсключенийСловЗапроса = Неопределено;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли